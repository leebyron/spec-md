{
  "type": "Document",
  "title": {
    "type": "DocumentTitle",
    "value": "Spec Markdown"
  },
  "contents": [
    {
      "type": "Paragraph",
      "contents": [
        {
          "type": "Text",
          "value": "Renders Markdown with some additions into an HTML format commonly used for writing technical specification documents. Markdown additions include code syntax highlighting, edit annotations, and the definition of algorithms and grammar productions."
        }
      ]
    },
    {
      "type": "Subsection",
      "header": {
        "type": "Subheader",
        "title": "Philosophy"
      },
      "contents": [
        {
          "type": "Paragraph",
          "contents": [
            {
              "type": "Text",
              "value": "Spec Markdown is first and foremost Markdown. As such, it follows Markdown’s philosophy of intending to be as easy to read and easy to write as is feasible."
            }
          ]
        },
        {
          "type": "Paragraph",
          "contents": [
            {
              "type": "Text",
              "value": "In order to interoperate with other tools which use Markdown, Spec Markdown tries to add as little additional syntax as possible, instead preferring conventions. This means any documents written with Spec Markdown in mind should render adequately by other Markdown renderers."
            }
          ]
        },
        {
          "type": "Paragraph",
          "contents": [
            {
              "type": "Text",
              "value": "To support the rendering additions of Spec Markdown, some features of Markdown may be limited or removed. As an example, Spec Markdown is strict about the order and locations of headers in a document."
            }
          ]
        },
        {
          "type": "Note",
          "contents": [
            {
              "type": "Text",
              "value": "This is not a normative spec for Spec Markdown, but just documentation of this tool. Of course, written in Spec Markdown!"
            }
          ]
        }
      ]
    },
    {
      "type": "Section",
      "header": {
        "type": "Header",
        "level": 1,
        "secID": null,
        "title": "Getting Started"
      },
      "contents": [
        {
          "type": "Paragraph",
          "contents": [
            {
              "type": "Text",
              "value": "To use Spec Markdown, just write Markdown files. There are some conventions used by Spec Markdown which you can read about in "
            },
            {
              "type": "Link",
              "contents": [
                {
                  "type": "Text",
                  "value": "Spec additions"
                }
              ],
              "url": "./spec/Spec Additions.md#Spec-Additions",
              "title": null
            },
            {
              "type": "Text",
              "value": "."
            }
          ]
        },
        {
          "type": "Paragraph",
          "contents": [
            {
              "type": "Text",
              "value": "To convert your Markdown files into an HTML spec document, use the "
            },
            {
              "type": "InlineCode",
              "code": "spec-md"
            },
            {
              "type": "Text",
              "value": " utility."
            }
          ]
        },
        {
          "type": "Code",
          "raw": false,
          "lang": "sh",
          "example": false,
          "counter": false,
          "code": "npm install -g spec-md\nspec-md ./path/to/markdown.md > ./path/to/output.html\n"
        },
        {
          "type": "Paragraph",
          "contents": [
            {
              "type": "Text",
              "value": "You can also require "
            },
            {
              "type": "InlineCode",
              "code": "spec-md"
            },
            {
              "type": "Text",
              "value": " as a node module."
            }
          ]
        },
        {
          "type": "Code",
          "raw": false,
          "lang": "sh",
          "example": false,
          "counter": false,
          "code": "npm install --save-dev spec-md\n"
        },
        {
          "type": "Code",
          "raw": false,
          "lang": "js",
          "example": false,
          "counter": false,
          "code": "const fs = require('fs');\nconst specMarkdown = require('spec-md');\nspecMarkdown.html('./path/to/markdown.md').then(html => {\n  fs.writeFile('./path/to/output.html', html);\n});\n"
        },
        {
          "type": "Paragraph",
          "contents": [
            {
              "type": "Text",
              "value": "Spec Markdown also provides utilities for generating and operating on an intermediate representation of the markdown, which you can explore in "
            },
            {
              "type": "Link",
              "contents": [
                {
                  "type": "Text",
                  "value": "Using Spec Markdown"
                }
              ],
              "url": "./spec/Usage.md#Using-Spec-Markdown",
              "title": null
            },
            {
              "type": "Text",
              "value": "."
            }
          ]
        }
      ]
    },
    {
      "type": "Section",
      "header": {
        "type": "Header",
        "level": 1,
        "secID": null,
        "title": "Markdown"
      },
      "contents": [
        {
          "type": "Paragraph",
          "contents": [
            {
              "type": "Text",
              "value": "Spec Markdown is first and foremost "
            },
            {
              "type": "Link",
              "contents": [
                {
                  "type": "Text",
                  "value": "Markdown"
                }
              ],
              "url": "http://daringfireball.net/projects/markdown/syntax",
              "title": null
            },
            {
              "type": "Text",
              "value": ". More specifically, it’s based on "
            },
            {
              "type": "Link",
              "contents": [
                {
                  "type": "Text",
                  "value": "Github-flavored Markdown"
                }
              ],
              "url": "https://help.github.com/articles/github-flavored-markdown/",
              "title": null
            },
            {
              "type": "Text",
              "value": "."
            }
          ]
        },
        {
          "type": "Paragraph",
          "contents": [
            {
              "type": "Text",
              "value": "This section explains the syntax and capabilities of Markdown that Spec Markdown supports and augments."
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Character Encoding"
          },
          "contents": [
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Markdown allows you to write text which uses &, <, and >. The output HTML will automatically use the "
                },
                {
                  "type": "InlineCode",
                  "code": "&amp;"
                },
                {
                  "type": "Text",
                  "value": ", "
                },
                {
                  "type": "InlineCode",
                  "code": "&lt;"
                },
                {
                  "type": "Text",
                  "value": ", and "
                },
                {
                  "type": "InlineCode",
                  "code": "&gt;"
                },
                {
                  "type": "Text",
                  "value": " entities."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Well formed HTML entities can be written inline directly. If you write "
                },
                {
                  "type": "InlineCode",
                  "code": "&copy;"
                },
                {
                  "type": "Text",
                  "value": ", it will appear in the HTML output as &copy;."
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Escape sequence"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Markdown makes use of certain characters to format text, in order to render one explicitly, place a backslash before it."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "You can type *literal asterisks* instead of emphasis by typing "
                    },
                    {
                      "type": "InlineCode",
                      "code": "\\*literal asterisks\\*"
                    },
                    {
                      "type": "Text",
                      "value": "."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Escaping does not apply within code."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Spec Markdown allows backslash escapes for any ASCII punctuation character."
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": false,
                  "counter": false,
                  "code": "\\!\\\"\\#\\$\\%\\&\\'\\(\\)\\*\\+\\,\\-\\.\\/\\:\\;\\<\\=\\>\\?\\@\\[\\\\\\]\\^\\_\\`\\{\\|\\}\\~\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Produces the following:"
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Inline formatting"
          },
          "contents": [
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Markdown allows for inline stylistic and structual formatting. Inline formatting is allowed in paragraphs, list items, and table cells."
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Inline HTML"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Markdown is not a replacement for HTML and instead leverages HTML by allowing its use inline within paragraphs, links, etc."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "This code has "
                    },
                    {
                      "type": "HTMLTag",
                      "tag": "<blink>"
                    },
                    {
                      "type": "Text",
                      "value": "blinking"
                    },
                    {
                      "type": "HTMLTag",
                      "tag": "</blink>"
                    },
                    {
                      "type": "Text",
                      "value": " and "
                    },
                    {
                      "type": "HTMLTag",
                      "tag": "<em>"
                    },
                    {
                      "type": "Text",
                      "value": "emphasized"
                    },
                    {
                      "type": "HTMLTag",
                      "tag": "</em>"
                    },
                    {
                      "type": "Text",
                      "value": " formatting."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Markdown syntax can continue to be "
                    },
                    {
                      "type": "HTMLTag",
                      "tag": "<u>"
                    },
                    {
                      "type": "Text",
                      "value": "used "
                    },
                    {
                      "type": "Italic",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "within"
                        }
                      ]
                    },
                    {
                      "type": "Text",
                      "value": " inline HTML"
                    },
                    {
                      "type": "HTMLTag",
                      "tag": "</u>"
                    },
                    {
                      "type": "Text",
                      "value": "."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Links"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Use "
                    },
                    {
                      "type": "InlineCode",
                      "code": "[ ]"
                    },
                    {
                      "type": "Text",
                      "value": " square brackets to indicate linked text followed immediately by "
                    },
                    {
                      "type": "InlineCode",
                      "code": "( )"
                    },
                    {
                      "type": "Text",
                      "value": " parenthesis to describe the URL the text will link to."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "The linked text can contain any other inline formatting."
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": false,
                  "counter": false,
                  "code": "This is an [-->*example*<--](https://www.facebook.com) of a link.\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Produces the following:"
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "This is an "
                    },
                    {
                      "type": "Link",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "→"
                        },
                        {
                          "type": "Italic",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "example"
                            }
                          ]
                        },
                        {
                          "type": "Text",
                          "value": "←"
                        }
                      ],
                      "url": "https://www.facebook.com",
                      "title": null
                    },
                    {
                      "type": "Text",
                      "value": " of a link."
                    }
                  ]
                },
                {
                  "type": "Todo",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Links do not yet support a reference style short-form."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Emphasis"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Wrapping asterisks "
                    },
                    {
                      "type": "Italic",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "(*)"
                        }
                      ]
                    },
                    {
                      "type": "Text",
                      "value": " indicate emphasis."
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": false,
                  "counter": false,
                  "code": "Example of **bold** and *italic* and ***bold italic***.\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Produces the following:"
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Example of "
                    },
                    {
                      "type": "Bold",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "bold"
                        }
                      ]
                    },
                    {
                      "type": "Text",
                      "value": " and "
                    },
                    {
                      "type": "Italic",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "italic"
                        }
                      ]
                    },
                    {
                      "type": "Text",
                      "value": " and "
                    },
                    {
                      "type": "Bold",
                      "contents": [
                        {
                          "type": "Italic",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "bold italic"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "Text",
                      "value": "."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Alternatively, use underscore "
                    },
                    {
                      "type": "Italic",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "(_)"
                        }
                      ]
                    },
                    {
                      "type": "Text",
                      "value": " for italic emphasis."
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": false,
                  "counter": false,
                  "code": "Example of _italic_ and **_bold italic_** or _**bold italic**_.\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Produces the following:"
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Example of "
                    },
                    {
                      "type": "Italic",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "italic"
                        }
                      ]
                    },
                    {
                      "type": "Text",
                      "value": " and "
                    },
                    {
                      "type": "Bold",
                      "contents": [
                        {
                          "type": "Italic",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "bold italic"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "Text",
                      "value": " or "
                    },
                    {
                      "type": "Italic",
                      "contents": [
                        {
                          "type": "Bold",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "bold italic"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "Text",
                      "value": "."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Inline Code"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Wrapping back-ticks "
                    },
                    {
                      "type": "Italic",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "(`)"
                        }
                      ]
                    },
                    {
                      "type": "Text",
                      "value": " indicate inline code, text inside back-ticks is not formatted, allowing for special characters to be used in inline code without escapes."
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": false,
                  "counter": false,
                  "code": "This is an `example` of some inline code.\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Produces"
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "This is an "
                    },
                    {
                      "type": "InlineCode",
                      "code": "example"
                    },
                    {
                      "type": "Text",
                      "value": " of some inline code."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Inline code can also use double- or triple-backticks. Wrapping spaces are removed."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "InlineCode",
                      "code": "`` ` ``"
                    },
                    {
                      "type": "Text",
                      "value": " Produces "
                    },
                    {
                      "type": "InlineCode",
                      "code": "`"
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Images"
              },
              "contents": [
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": false,
                  "counter": false,
                  "code": "![Specs](http://i.imgur.com/aV8o3rE.png)\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Produces the following:"
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Image",
                      "alt": "Specs",
                      "url": "http://i.imgur.com/aV8o3rE.png",
                      "title": null
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Blocks"
          },
          "contents": [
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Markdown allows for block-level structual formatting. Every block is seperated by at least two new lines. Spec Markdown makes use of Markdown’s blocks to produce more specific structural formatting."
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Block HTML"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Markdown is not a replacement for HTML and instead leverages HTML by allowing its use as complete blocks when separated from surrounding content by blank lines."
                    }
                  ]
                },
                {
                  "type": "Note",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Markdown formatting syntax is not processed within block-level HTML tags."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "For example, to add an HTML table to a Markdown article:"
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": false,
                  "counter": false,
                  "code": "Unrelated previous paragraph followed by a blank line\n\n<table>\n<tr>\n<td>Table cell</td>\n<td>\n\n<table>\n<tr>\n<td>*Tables in tables*</td>\n</tr>\n</table>\n\n</td>\n</tr>\n</table>\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Produces the following:"
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Unrelated previous paragraph followed by a blank line"
                    }
                  ]
                },
                {
                  "type": "HTMLBlock",
                  "name": "table",
                  "html": "<table>\n<tr>\n<td>Table cell</td>\n<td>\n\n<table>\n<tr>\n  <td>*Tables in tables*</td>\n</tr>\n</table>\n\n</td>\n</tr>\n</table>"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "And using "
                    },
                    {
                      "type": "InlineCode",
                      "code": "<pre>"
                    },
                    {
                      "type": "Text",
                      "value": " produces a simple code block:"
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": false,
                  "counter": false,
                  "code": "<pre>\nBuffalo Bill ’s\ndefunct\n       who used to\n       ride a watersmooth-silver\n                                stallion\nand break onetwothreefourfive pigeonsjustlikethat\n                                                 Jesus\nhe was a handsome man\n                     and what i want to know is\nhow do you like your blueeyed boy\nMister Death\n</pre>\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Produces the following:"
                    }
                  ]
                },
                {
                  "type": "HTMLBlock",
                  "name": "pre",
                  "html": "<pre>\nBuffalo Bill ’s\ndefunct\n       who used to\n       ride a watersmooth-silver\n                                stallion\nand break onetwothreefourfive pigeonsjustlikethat\n                                                 Jesus\nhe was a handsome man\n                     and what i want to know is\nhow do you like your blueeyed boy\nMister Death\n</pre>"
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Section Headers"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Regular Markdown supports two styles of headers, Setext and atx, however Spec Markdown generally only supports atx style headers."
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": true,
                  "counter": false,
                  "code": "# Header\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Setext headers are not supported by Spec Markdown."
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": true,
                  "counter": true,
                  "code": "Header\n------\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "The number of "
                    },
                    {
                      "type": "InlineCode",
                      "code": "#"
                    },
                    {
                      "type": "Text",
                      "value": " characters refers to the depth of the section. To produce an, "
                    },
                    {
                      "type": "InlineCode",
                      "code": "<h3>"
                    },
                    {
                      "type": "Text",
                      "value": ", type "
                    },
                    {
                      "type": "InlineCode",
                      "code": "###"
                    },
                    {
                      "type": "Text",
                      "value": ". Optionally, a header may be “closed” by any number of "
                    },
                    {
                      "type": "InlineCode",
                      "code": "#"
                    },
                    {
                      "type": "Text",
                      "value": " characters."
                    }
                  ]
                },
                {
                  "type": "Note",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Spec Markdown requires that documents start with a header."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Paragraphs"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Paragraphs are the most simple Markdown blocks. Lines are appended together to form a single <p> tag. Any inline syntax is allowed within a paragraph."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Lists"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Markdown lists are lines which each start with either a ordered bullet "
                    },
                    {
                      "type": "InlineCode",
                      "code": "1."
                    },
                    {
                      "type": "Text",
                      "value": " or unordered bullet, "
                    },
                    {
                      "type": "InlineCode",
                      "code": "*"
                    },
                    {
                      "type": "Text",
                      "value": ", "
                    },
                    {
                      "type": "InlineCode",
                      "code": "-"
                    },
                    {
                      "type": "Text",
                      "value": ", or "
                    },
                    {
                      "type": "InlineCode",
                      "code": "+"
                    },
                    {
                      "type": "Text",
                      "value": ". Lists are optionally indented by two spaces."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Lists can be nested within other lists by indenting by at least two spaces."
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": true,
                  "counter": false,
                  "code": "  1. this\n  2. is\n  3. a\n    - nested\n  4. list\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Produces the following:"
                    }
                  ]
                },
                {
                  "type": "List",
                  "ordered": true,
                  "items": [
                    {
                      "type": "ListItem",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "this"
                        }
                      ]
                    },
                    {
                      "type": "ListItem",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "is"
                        }
                      ]
                    },
                    {
                      "type": "ListItem",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "a"
                        },
                        {
                          "type": "List",
                          "ordered": false,
                          "items": [
                            {
                              "type": "ListItem",
                              "contents": [
                                {
                                  "type": "Text",
                                  "value": "nested"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "ListItem",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "list"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "Section",
                  "header": {
                    "type": "Header",
                    "level": 4,
                    "secID": null,
                    "title": "Task Lists"
                  },
                  "contents": [
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Spec Markdown also supports task lists. Start a list item with "
                        },
                        {
                          "type": "InlineCode",
                          "code": "[ ]"
                        },
                        {
                          "type": "Text",
                          "value": " or "
                        },
                        {
                          "type": "InlineCode",
                          "code": "[x]"
                        },
                        {
                          "type": "Text",
                          "value": " to render a checkbox. This can be useful for keeping your tasks inline with in-progress draft specifications."
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": null,
                      "example": true,
                      "counter": false,
                      "code": "  1. this\n  2. [ ] is\n  3. [x] a\n    - [X] nested\n  4. todo list\n"
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Produces the following:"
                        }
                      ]
                    },
                    {
                      "type": "List",
                      "ordered": true,
                      "items": [
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "this"
                            }
                          ]
                        },
                        {
                          "type": "TaskListItem",
                          "done": false,
                          "contents": [
                            {
                              "type": "Text",
                              "value": "is"
                            }
                          ]
                        },
                        {
                          "type": "TaskListItem",
                          "done": true,
                          "contents": [
                            {
                              "type": "Text",
                              "value": "a"
                            },
                            {
                              "type": "List",
                              "ordered": false,
                              "items": [
                                {
                                  "type": "TaskListItem",
                                  "done": true,
                                  "contents": [
                                    {
                                      "type": "Text",
                                      "value": "nested"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "todo list"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Code Block"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "A block of code is formed by either indenting by 4 spaces, or wrapping with "
                    },
                    {
                      "type": "HTMLTag",
                      "tag": "<code>"
                    },
                    {
                      "type": "Text",
                      "value": "```"
                    },
                    {
                      "type": "HTMLTag",
                      "tag": "</code>"
                    },
                    {
                      "type": "Text",
                      "value": " on their own lines."
                    }
                  ]
                },
                {
                  "type": "Code",
                  "code": "```\nconst code = sample();\n```"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Produces the following:"
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": false,
                  "counter": false,
                  "code": "const code = sample();\n"
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Block Quotes"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Spec markdown does not yet support Markdown’s "
                    },
                    {
                      "type": "InlineCode",
                      "code": ">"
                    },
                    {
                      "type": "Text",
                      "value": " style block quotes."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Horizontal Rules"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Spec Markdown does not yet support Markdown’s "
                    },
                    {
                      "type": "InlineCode",
                      "code": "---"
                    },
                    {
                      "type": "Text",
                      "value": " style <hr>."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Automatic Links"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Spec Markdown does not yet automatically link urls. "
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "Section",
      "header": {
        "type": "Header",
        "level": 1,
        "secID": null,
        "title": "Spec Additions"
      },
      "contents": [
        {
          "type": "Paragraph",
          "contents": [
            {
              "type": "Text",
              "value": "Spec Markdown makes some additions to Markdown to support cases relevant to writing technical specs and documentation. It attempts to be as minimally invasive as possible, leveraging existing Markdown formatting features whenever possible so Spec Markdown documents may render adequately as regular Markdown."
            }
          ]
        },
        {
          "type": "Paragraph",
          "contents": [
            {
              "type": "Text",
              "value": "Spec Markdown also makes restrictions to the overall format of the Markdown document in order to derive a structure to the entire document."
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Link Anything"
          },
          "contents": [
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Everything unique in a Spec Markdown file has a link created for it. Sections each have a link, as do named "
                },
                {
                  "type": "Link",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Algorithms"
                    }
                  ],
                  "url": "#sec-Algorithms",
                  "title": null
                },
                {
                  "type": "Text",
                  "value": " and "
                },
                {
                  "type": "Link",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Grammar"
                    }
                  ],
                  "url": "#sec-Grammar",
                  "title": null
                },
                {
                  "type": "Text",
                  "value": ". You’ll find that "
                },
                {
                  "type": "Link",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Notes"
                    }
                  ],
                  "url": "#sec-Note",
                  "title": null
                },
                {
                  "type": "Text",
                  "value": " and "
                },
                {
                  "type": "Link",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Examples"
                    }
                  ],
                  "url": "#sec-Examples",
                  "title": null
                },
                {
                  "type": "Text",
                  "value": " are also given stable links based on their contents, just in case things move around."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "However, you can also link "
                },
                {
                  "type": "Italic",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "anything"
                    }
                  ]
                },
                {
                  "type": "Text",
                  "value": " in a Spec Markdown file. Just highlight any bit of text and a link will be created just for that selection, making referencing specific parts of your document easy. Try it here!"
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Title and Introduction"
          },
          "contents": [
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "A Spec Markdown document must start with a header which will be used as the title of the document. Any content between this and the next header will become the introduction to the document."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "A Spec Markdown document starts in this form:"
                }
              ]
            },
            {
              "type": "Code",
              "raw": false,
              "lang": null,
              "example": false,
              "counter": false,
              "code": "# Spec Markdown\n\nIntroductory paragraph.\n\n# First Section Header\n"
            },
            {
              "type": "Note",
              "contents": [
                {
                  "type": "Text",
                  "value": "For backwards-compatibility, a setext style header can be used for a document title."
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Sections"
          },
          "contents": [
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "A Spec Markdown document is separated into a sequence and hierarchy of sections. Those sections can then be used as navigation points and can be used to create a table of contents. A section is started by a header and ends at either the next header of similar or greater precedence or the end of the document. A section can contain other sections if their headers are of lower precedence."
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Section Headers"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Regular Markdown supports two styles of headers, Setext and atx, however Spec Markdown only supports atx style headers as section headers."
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": false,
                  "counter": false,
                  "code": "# Header\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Only use Setext style headers for the title of the document."
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": true,
                  "counter": true,
                  "code": "Header\n------\n"
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Subsection Headers"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "While sections are numbered and appear in the table of contents, a subsection is similar but not numbered or in the table of contents."
                    }
                  ]
                },
                {
                  "type": "Subsection",
                  "header": {
                    "type": "Subheader",
                    "title": "This is a subsection"
                  },
                  "contents": [
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "The subsection’s content appears below the subsection header."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "Subsection",
                  "header": {
                    "type": "Subheader",
                    "title": "Another subsection"
                  },
                  "contents": [
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Sections may contain multiple subsections, but subsections cannot contain sections or subsections."
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Table of Contents"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "A table of contents is automatically generated from the hierarchy of sections in the Spec Markdown document."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Section Numbers"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "A number is associated with each section, starting with 1. In a hierarchy of sections, the parent sections are joined with dots. This provides an unambiguous location identifier for a given section in a document."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "You can specify these section numbers directly in your Markdown documents if you wish by writing them directly after the "
                    },
                    {
                      "type": "InlineCode",
                      "code": "#"
                    },
                    {
                      "type": "Text",
                      "value": " and before the text of the header."
                    }
                  ]
                },
                {
                  "type": "Section",
                  "header": {
                    "type": "Header",
                    "level": 4,
                    "secID": [
                      "3",
                      "2",
                      "3",
                      "8"
                    ],
                    "title": "Custom Numbers"
                  },
                  "contents": [
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "If the section number is written in the document, the last number will be used as the number for that section. This is useful when writing a proposal against an existing spec and wish to reference a particular section."
                        }
                      ]
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "The header for this section was written as"
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": null,
                      "example": false,
                      "counter": false,
                      "code": "#### 3.2.3.8. Custom Numbers\n"
                    }
                  ]
                },
                {
                  "type": "Section",
                  "header": {
                    "type": "Header",
                    "level": 4,
                    "secID": null,
                    "title": "Appendix / Annex Sections"
                  },
                  "contents": [
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "If a top level section is written with a letter, such as "
                        },
                        {
                          "type": "InlineCode",
                          "code": "A"
                        },
                        {
                          "type": "Text",
                          "value": " instead of a number, that will begin an Appendix section."
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": null,
                      "example": false,
                      "counter": false,
                      "code": "# A. Appendix: Grammar\n"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Smart Characters"
          },
          "contents": [
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "The Spec Markdown renderer will replace easy to type characters like quotes and dashes with their appropriate typographic entities. These replacements will not occur within blocks of code."
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Quotes and Dashes"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Prose text has “smart quotes”, hyphens, en-dashes and em-dashes—you shouldn’t have to think about it, they’ll just work."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "For example, a quote of a quote (with an inner apostrophe and emphasis for flair):"
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "InlineCode",
                      "code": "\"She told me that 'he isn't here right *now*' - so I left.\""
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Will render as:"
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "“She told me that ‘he isn’t here right "
                    },
                    {
                      "type": "Italic",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "now"
                        }
                      ]
                    },
                    {
                      "type": "Text",
                      "value": "’ – so I left.”"
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Escaped "
                    },
                    {
                      "type": "InlineCode",
                      "code": "\\\"quotes \\'and single\\-quotes\\'\\\""
                    },
                    {
                      "type": "Text",
                      "value": " becomes: \\“quotes \\‘and single-quotes'\"."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Math"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Math operators like ≥, ≤, and ≈ can be written as "
                    },
                    {
                      "type": "InlineCode",
                      "code": ">="
                    },
                    {
                      "type": "Text",
                      "value": ", "
                    },
                    {
                      "type": "InlineCode",
                      "code": "<="
                    },
                    {
                      "type": "Text",
                      "value": ", and "
                    },
                    {
                      "type": "InlineCode",
                      "code": "~="
                    },
                    {
                      "type": "Text",
                      "value": "."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Escaped "
                    },
                    {
                      "type": "InlineCode",
                      "code": "\\>= \\<= \\~="
                    },
                    {
                      "type": "Text",
                      "value": " becomes: >= <= ~=."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Arrows"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Smart arrows → and ← and ↔ can be written as "
                    },
                    {
                      "type": "InlineCode",
                      "code": "->"
                    },
                    {
                      "type": "Text",
                      "value": ", "
                    },
                    {
                      "type": "InlineCode",
                      "code": "<-"
                    },
                    {
                      "type": "Text",
                      "value": " and "
                    },
                    {
                      "type": "InlineCode",
                      "code": "<->"
                    },
                    {
                      "type": "Text",
                      "value": "."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Fat smart arrows ⇒ and ⇐ and ⇔ can be written as "
                    },
                    {
                      "type": "InlineCode",
                      "code": "=>"
                    },
                    {
                      "type": "Text",
                      "value": ", "
                    },
                    {
                      "type": "InlineCode",
                      "code": "<=="
                    },
                    {
                      "type": "Text",
                      "value": " and "
                    },
                    {
                      "type": "InlineCode",
                      "code": "<=>"
                    },
                    {
                      "type": "Text",
                      "value": "."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Escaped "
                    },
                    {
                      "type": "InlineCode",
                      "code": "\\-> \\<- \\<-> \\=> \\<== \\<=>"
                    },
                    {
                      "type": "Text",
                      "value": " becomes: -> <- <-> => <== <=>."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Tables"
          },
          "contents": [
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Similar to Github flavored Markdown"
                }
              ]
            },
            {
              "type": "Code",
              "raw": false,
              "lang": null,
              "example": false,
              "counter": false,
              "code": "| This | is a | table |\n| ---- | ---: | :---: |\n| key  | val  | etc   |\n"
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Produces the following:"
                }
              ]
            },
            {
              "type": "Table",
              "header": {
                "type": "TableHeader",
                "cells": [
                  [
                    {
                      "type": "Text",
                      "value": "This"
                    }
                  ],
                  [
                    {
                      "type": "Text",
                      "value": "is a"
                    }
                  ],
                  [
                    {
                      "type": "Text",
                      "value": "table"
                    }
                  ]
                ],
                "alignments": [
                  null,
                  "right",
                  "center"
                ]
              },
              "rows": [
                {
                  "type": "TableRow",
                  "cells": [
                    [
                      {
                        "type": "Text",
                        "value": "key"
                      }
                    ],
                    [
                      {
                        "type": "Text",
                        "value": "val"
                      }
                    ],
                    [
                      {
                        "type": "Text",
                        "value": "etc"
                      }
                    ]
                  ],
                  "alignments": [
                    null,
                    "right",
                    "center"
                  ]
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Table cells can contain any content that a paragraph can contain."
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Definitions"
          },
          "contents": [
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Spec Markdown provides two forms for defining terms, definition lists and definition paragraphs."
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Definition List"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "A definition list is written as a defined term on a single line followed by one or more definition lines, each starting with a "
                    },
                    {
                      "type": "InlineCode",
                      "code": ": "
                    },
                    {
                      "type": "Text",
                      "value": "."
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": false,
                  "counter": false,
                  "code": "Cookie\n:   A small piece of data that a server sends to the user's web browser. The\n    browser may store it and send it back with later requests to the same server.\n:   A delicious snack, often containing chocolate chips.\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Produces the following:"
                    }
                  ]
                },
                {
                  "type": "DefinitionList",
                  "term": {
                    "type": "DefinitionTerm",
                    "name": "Cookie"
                  },
                  "defs": [
                    {
                      "type": "DefinitionDescription",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "A small piece of data that a server sends to the user’s web browser. The browser may store it and send it back with later requests to the same server."
                        }
                      ]
                    },
                    {
                      "type": "DefinitionDescription",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "A delicious snack, often containing chocolate chips."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "Note",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Term definitions can optionally be separated by a single blank line."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Definition Paragraph"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "A definition paragraph starts with a "
                    },
                    {
                      "type": "InlineCode",
                      "code": ":: "
                    },
                    {
                      "type": "Text",
                      "value": " and contains an italicized term. This is useful when it is easier to define a term in a sentence containing that term."
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": false,
                  "counter": false,
                  "code": ":: The study of *Philosophy* investigates general and fundamental questions.\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Produces the following:"
                    }
                  ]
                },
                {
                  "type": "DefinitionParagraph",
                  "term": {
                    "type": "DefinitionTerm",
                    "name": "Philosophy"
                  },
                  "contents": [
                    {
                      "type": "Text",
                      "value": "The study of "
                    },
                    {
                      "type": "DefinitionTerm",
                      "name": "Philosophy"
                    },
                    {
                      "type": "Text",
                      "value": " investigates general and fundamental questions."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Definition References"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "A defined term can be later referenced by italicizing that term. Referenced terms are case insensitive."
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": false,
                  "counter": false,
                  "code": "After studying *philosophy*, you may eat a *cookie*.\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Produces the following:"
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "After studying "
                    },
                    {
                      "type": "Italic",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "philosophy"
                        }
                      ]
                    },
                    {
                      "type": "Text",
                      "value": ", you may eat a "
                    },
                    {
                      "type": "Italic",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "cookie"
                        }
                      ]
                    },
                    {
                      "type": "Text",
                      "value": "."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Note"
          },
          "contents": [
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Notes can be written inline with a spec document, and are often helpful to supply non-normative explanatory text or caveats in a differently formatted style. Case insensitive, the "
                },
                {
                  "type": "InlineCode",
                  "code": ":"
                },
                {
                  "type": "Text",
                  "value": " is optional."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Notes automatically have short links generated for them. If the contents of the note changes, so will the link URL. However if a note moves around, or content around the note changes the existing links will still point to the right place, very useful for consistently evolving specifications!"
                }
              ]
            },
            {
              "type": "Code",
              "raw": false,
              "lang": null,
              "example": false,
              "counter": false,
              "code": "Note: Notes are awesome.\n"
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Produces the following:"
                }
              ]
            },
            {
              "type": "Note",
              "contents": [
                {
                  "type": "Text",
                  "value": "Notes are awesome."
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Todo"
          },
          "contents": [
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "It’s often helpful to write a draft of a document and leave “to-do” comments in not-yet-completed sections. Case insensitive, the "
                },
                {
                  "type": "InlineCode",
                  "code": ":"
                },
                {
                  "type": "Text",
                  "value": " is optional."
                }
              ]
            },
            {
              "type": "Code",
              "raw": false,
              "lang": null,
              "example": false,
              "counter": false,
              "code": "TODO: finish this section\n"
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Produces the following:"
                }
              ]
            },
            {
              "type": "Todo",
              "contents": [
                {
                  "type": "Text",
                  "value": "finish this section"
                }
              ]
            },
            {
              "type": "Note",
              "contents": [
                {
                  "type": "Text",
                  "value": "You can also write "
                },
                {
                  "type": "InlineCode",
                  "code": "TK"
                },
                {
                  "type": "Text",
                  "value": " in place of "
                },
                {
                  "type": "InlineCode",
                  "code": "TODO"
                },
                {
                  "type": "Text",
                  "value": ", nerds."
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Syntax Highlighting"
          },
          "contents": [
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Spec Markdown will apply syntax highlighting to blocks of code if a github-flavored-markdown style language is supplied."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "You may provide a "
                },
                {
                  "type": "InlineCode",
                  "code": "highlight"
                },
                {
                  "type": "Text",
                  "value": " function as an option to customize this behavior."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "To render this highlighted javascript:"
                }
              ]
            },
            {
              "type": "Code",
              "code": "```js\nconst baz = foo(\"bar\");\n```"
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Produces the following:"
                }
              ]
            },
            {
              "type": "Code",
              "raw": false,
              "lang": "js",
              "example": false,
              "counter": false,
              "code": "const baz = foo(\"bar\");\n"
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "You may also prefix your highlight function with “raw” if you want to avoid other tools, such as Prettier, from interpreting a code block."
                }
              ]
            },
            {
              "type": "Code",
              "code": "```raw js\nconst baz = foo(\"bar\");\n```"
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Produces the following:"
                }
              ]
            },
            {
              "type": "Code",
              "raw": true,
              "lang": "js",
              "example": false,
              "counter": false,
              "code": "const baz = foo(\"bar\");\n"
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Examples"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Spec Markdown helps you write examples, visually indicaticating the difference from normative code blocks, and generating permalinks to those examples. Just write "
                    },
                    {
                      "type": "InlineCode",
                      "code": "example"
                    },
                    {
                      "type": "Text",
                      "value": " after the "
                    },
                    {
                      "type": "HTMLTag",
                      "tag": "<code>"
                    },
                    {
                      "type": "Text",
                      "value": "```"
                    },
                    {
                      "type": "HTMLTag",
                      "tag": "</code>"
                    },
                    {
                      "type": "Text",
                      "value": "."
                    }
                  ]
                },
                {
                  "type": "Code",
                  "code": "```example\nconst great = useOf.example(\"code\");\n```"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Produces the following:"
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": true,
                  "counter": false,
                  "code": "const great = useOf.example(\"code\");\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Examples can also be syntax highlighted, by placing the language directly before writing "
                    },
                    {
                      "type": "InlineCode",
                      "code": "example"
                    },
                    {
                      "type": "Text",
                      "value": ":"
                    }
                  ]
                },
                {
                  "type": "Code",
                  "code": "```js example\nconst great = useOf.example(\"code\");\n```"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Produces the following:"
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": "js",
                  "example": true,
                  "counter": false,
                  "code": "const great = useOf.example(\"code\");\n"
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Counter Examples"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "In addition to examples, Spec Markdown helps you write "
                    },
                    {
                      "type": "Italic",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "counter-examples"
                        }
                      ]
                    },
                    {
                      "type": "Text",
                      "value": ", which are examples of things you should not do. These are visually indicated as different from normative code blocks and other examples. Just write "
                    },
                    {
                      "type": "InlineCode",
                      "code": "counter-example"
                    },
                    {
                      "type": "Text",
                      "value": " after the "
                    },
                    {
                      "type": "HTMLTag",
                      "tag": "<code>"
                    },
                    {
                      "type": "Text",
                      "value": "```"
                    },
                    {
                      "type": "HTMLTag",
                      "tag": "</code>"
                    },
                    {
                      "type": "Text",
                      "value": " (and optional language)."
                    }
                  ]
                },
                {
                  "type": "Code",
                  "code": "```js counter-example\nconst shit = dontSwear();\n```"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Produces the following:"
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": "js",
                  "example": true,
                  "counter": true,
                  "code": "const shit = dontSwear();\n"
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Imports"
          },
          "contents": [
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "When compiled, an import reference will be inlined into the same document. An import reference looks like a link to a “.md” file as a single paragraph."
                }
              ]
            },
            {
              "type": "Code",
              "raw": false,
              "lang": null,
              "example": false,
              "counter": false,
              "code": "[AnythingGoesHere](SomeName.md)\n"
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "You can optionally prefix the import reference with "
                },
                {
                  "type": "InlineCode",
                  "code": "#"
                },
                {
                  "type": "Text",
                  "value": " characters to describe at what section level the import should apply. By default an import reference will be imported as a child of the current section."
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Inline editing"
          },
          "contents": [
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "A portion of the "
                },
                {
                  "type": "Link",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "CriticMarkup"
                    }
                  ],
                  "url": "http://criticmarkup.com/",
                  "title": null
                },
                {
                  "type": "Text",
                  "value": " spec is supported."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "For example, we can "
                },
                {
                  "type": "Ins",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "add"
                    }
                  ]
                },
                {
                  "type": "Text",
                  "value": " or "
                },
                {
                  "type": "Del",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "remove"
                    }
                  ]
                },
                {
                  "type": "Text",
                  "value": " text with the "
                },
                {
                  "type": "InlineCode",
                  "code": "{++add++}"
                },
                {
                  "type": "Text",
                  "value": " or "
                },
                {
                  "type": "InlineCode",
                  "code": "{--remove--}"
                },
                {
                  "type": "Text",
                  "value": " syntax."
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Block editing"
          },
          "contents": [
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "We can also add and remove entire blocks of content, by using "
                },
                {
                  "type": "InlineCode",
                  "code": "{++"
                },
                {
                  "type": "Text",
                  "value": " or "
                },
                {
                  "type": "InlineCode",
                  "code": "{--"
                },
                {
                  "type": "Text",
                  "value": " on their own line with empty lines on either side:"
                }
              ]
            },
            {
              "type": "BlockIns",
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "These paragraphs"
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "have been "
                    },
                    {
                      "type": "Italic",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "added"
                        }
                      ]
                    },
                    {
                      "type": "Text",
                      "value": "."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "And"
                }
              ]
            },
            {
              "type": "BlockDel",
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "These paragraphs"
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "have been "
                    },
                    {
                      "type": "Italic",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "removed"
                        }
                      ]
                    },
                    {
                      "type": "Text",
                      "value": "."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "By typing:"
                }
              ]
            },
            {
              "type": "Code",
              "raw": false,
              "lang": null,
              "example": false,
              "counter": false,
              "code": "{++\n\nThese paragraphs\n\nhave been *added*.\n\n++}\n\nAnd\n\n{--\n\nThese paragraphs\n\nhave been *removed*.\n\n--}\n"
            },
            {
              "type": "Note",
              "contents": [
                {
                  "type": "Text",
                  "value": "imports and section headers cannot be included in a added or removed section to preserve the ability to render a table of contents."
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Algorithms"
          },
          "contents": [
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Specifications for procedures or algorithms can be defined in terms of nested markdown lists. These lists can be of any kind, but will always have ordered formatting. The bullet labeling for algorithms is specific will cycle between decimal, lower-alpha, and lower-roman."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "An algorithm definition also describes its arguments in terms of variables."
                }
              ]
            },
            {
              "type": "Code",
              "raw": false,
              "lang": null,
              "example": false,
              "counter": false,
              "code": "Algorithm(arg) :\n  1. first\n  1. then\n    * substep\n      * deeper substep\n      * another deep substep\n    * another step\n  1. okay\n"
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Produces the following:"
                }
              ]
            },
            {
              "type": "Algorithm",
              "call": {
                "type": "Call",
                "name": "Algorithm",
                "args": [
                  {
                    "type": "Variable",
                    "name": "arg"
                  }
                ]
              },
              "steps": {
                "type": "List",
                "ordered": true,
                "items": [
                  {
                    "type": "ListItem",
                    "contents": [
                      {
                        "type": "Text",
                        "value": "first"
                      }
                    ]
                  },
                  {
                    "type": "ListItem",
                    "contents": [
                      {
                        "type": "Text",
                        "value": "then"
                      },
                      {
                        "type": "List",
                        "ordered": true,
                        "items": [
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "substep"
                              },
                              {
                                "type": "List",
                                "ordered": true,
                                "items": [
                                  {
                                    "type": "ListItem",
                                    "contents": [
                                      {
                                        "type": "Text",
                                        "value": "deeper substep"
                                      }
                                    ]
                                  },
                                  {
                                    "type": "ListItem",
                                    "contents": [
                                      {
                                        "type": "Text",
                                        "value": "another deep substep"
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "another step"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "type": "ListItem",
                    "contents": [
                      {
                        "type": "Text",
                        "value": "okay"
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Grammar"
          },
          "contents": [
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Spec Markdown makes it easier to describe context-free grammatical productions."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Grammars are defined by a sequence of "
                },
                {
                  "type": "Italic",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "terminal"
                    }
                  ]
                },
                {
                  "type": "Text",
                  "value": " characters or sequence of characters, which are then referenced by "
                },
                {
                  "type": "Italic",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "non-terminal"
                    }
                  ]
                },
                {
                  "type": "Text",
                  "value": " rules. The definition of a non-terminal is referred to as a "
                },
                {
                  "type": "Italic",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "production"
                    }
                  ]
                },
                {
                  "type": "Text",
                  "value": "."
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Grammar Production"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "The "
                    },
                    {
                      "type": "InlineCode",
                      "code": ":"
                    },
                    {
                      "type": "Text",
                      "value": " token indicates an “is defined as” production for a non-terminal, where a single definition can be written directly after the "
                    },
                    {
                      "type": "InlineCode",
                      "code": ":"
                    },
                    {
                      "type": "Text",
                      "value": "."
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": false,
                  "counter": false,
                  "code": "PBJ : Bread PeanutButter Jelly Bread\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Produces the following:"
                    }
                  ]
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "PBJ",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "Bread",
                        "params": null
                      },
                      {
                        "type": "NonTerminal",
                        "name": "PeanutButter",
                        "params": null
                      },
                      {
                        "type": "NonTerminal",
                        "name": "Jelly",
                        "params": null
                      },
                      {
                        "type": "NonTerminal",
                        "name": "Bread",
                        "params": null
                      }
                    ]
                  }
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Or if "
                    },
                    {
                      "type": "NonTerminal",
                      "name": "PBJ",
                      "params": null
                    },
                    {
                      "type": "Text",
                      "value": " has definition options, they are written immediately after as a Markdown list."
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": false,
                  "counter": false,
                  "code": "PBJ :\n  - Bread PeanutButter Jelly Bread\n  - Bread Jelly PeanutButter Bread\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Produces the following:"
                    }
                  ]
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "PBJ",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "ListRHS",
                    "defs": [
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "Bread",
                            "params": null
                          },
                          {
                            "type": "NonTerminal",
                            "name": "PeanutButter",
                            "params": null
                          },
                          {
                            "type": "NonTerminal",
                            "name": "Jelly",
                            "params": null
                          },
                          {
                            "type": "NonTerminal",
                            "name": "Bread",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "Bread",
                            "params": null
                          },
                          {
                            "type": "NonTerminal",
                            "name": "Jelly",
                            "params": null
                          },
                          {
                            "type": "NonTerminal",
                            "name": "PeanutButter",
                            "params": null
                          },
                          {
                            "type": "NonTerminal",
                            "name": "Bread",
                            "params": null
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Each definition is a space seperated list of "
                    },
                    {
                      "type": "Italic",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "terminal"
                        }
                      ]
                    },
                    {
                      "type": "Text",
                      "value": " or "
                    },
                    {
                      "type": "Italic",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "non-terminal"
                        }
                      ]
                    },
                    {
                      "type": "Text",
                      "value": " tokens, and may also include conditionals and constraints."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Definition lists aren’t required to be indented:"
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": false,
                  "counter": false,
                  "code": "PBJ :\n\n- Bread PeanutButter Jelly Bread\n- Bread Jelly PeanutButter Bread\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Produces the following:"
                    }
                  ]
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "PBJ",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "ListRHS",
                    "defs": [
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "Bread",
                            "params": null
                          },
                          {
                            "type": "NonTerminal",
                            "name": "PeanutButter",
                            "params": null
                          },
                          {
                            "type": "NonTerminal",
                            "name": "Jelly",
                            "params": null
                          },
                          {
                            "type": "NonTerminal",
                            "name": "Bread",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "Bread",
                            "params": null
                          },
                          {
                            "type": "NonTerminal",
                            "name": "Jelly",
                            "params": null
                          },
                          {
                            "type": "NonTerminal",
                            "name": "PeanutButter",
                            "params": null
                          },
                          {
                            "type": "NonTerminal",
                            "name": "Bread",
                            "params": null
                          }
                        ]
                      }
                    ]
                  }
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Production types"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Often languages wish to specify different types of grammar productions, such as lexical or syntactical, or if certain characters line whitespace or newlines are permitted between symbols in the right-hand-side. Spec-md allows this this distinction based on the number of colons:"
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": false,
                  "counter": false,
                  "code": "TypeOne : `type` `one`\n\nTypeTwo :: `type` `two`\n\nTypeThree ::: `type` `three`\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Produces the following:"
                    }
                  ]
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "TypeOne",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Terminal",
                        "value": "type"
                      },
                      {
                        "type": "Terminal",
                        "value": "one"
                      }
                    ]
                  }
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "TypeTwo",
                    "params": null
                  },
                  "defType": 2,
                  "rhs": {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Terminal",
                        "value": "type"
                      },
                      {
                        "type": "Terminal",
                        "value": "two"
                      }
                    ]
                  }
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "TypeThree",
                    "params": null
                  },
                  "defType": 3,
                  "rhs": {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Terminal",
                        "value": "type"
                      },
                      {
                        "type": "Terminal",
                        "value": "three"
                      }
                    ]
                  }
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "One of"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "If each definition option is a single token, it can be expressed as a “one of” expression instead of a markdown list."
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": false,
                  "counter": false,
                  "code": "AssignmentOperator : one of *= `/=` %= += -= <<= >>= >>>= &= ^= |=\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Produces the following:"
                    }
                  ]
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "AssignmentOperator",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "OneOfRHS",
                    "rows": [
                      [
                        {
                          "type": "Terminal",
                          "value": "*="
                        },
                        {
                          "type": "Terminal",
                          "value": "/="
                        },
                        {
                          "type": "Terminal",
                          "value": "%="
                        },
                        {
                          "type": "Terminal",
                          "value": "+="
                        },
                        {
                          "type": "Terminal",
                          "value": "-="
                        },
                        {
                          "type": "Terminal",
                          "value": "<<="
                        },
                        {
                          "type": "Terminal",
                          "value": ">>="
                        },
                        {
                          "type": "Terminal",
                          "value": ">>>="
                        },
                        {
                          "type": "Terminal",
                          "value": "&="
                        },
                        {
                          "type": "Terminal",
                          "value": "^="
                        },
                        {
                          "type": "Terminal",
                          "value": "|="
                        }
                      ]
                    ]
                  }
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "“one of” can also be followed by a line break and multiple lines of tokens. To improve legibility in other tools, each line may optionally begin with a bullet."
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": false,
                  "counter": false,
                  "code": "Keyword : one of\n  - break     do        in          typeof\n  - case      else      instanceof  var\n  - catch     export    new         void\n  - class     extends   return      while\n  - const     finally   super       with\n  - continue  for       switch      yield\n  - debugger  function  this\n  - default   if        throw\n  - delete    import    try\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Produces the following:"
                    }
                  ]
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "Keyword",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "OneOfRHS",
                    "rows": [
                      [
                        {
                          "type": "Terminal",
                          "value": "break"
                        },
                        {
                          "type": "Terminal",
                          "value": "do"
                        },
                        {
                          "type": "Terminal",
                          "value": "in"
                        },
                        {
                          "type": "Terminal",
                          "value": "typeof"
                        }
                      ],
                      [
                        {
                          "type": "Terminal",
                          "value": "case"
                        },
                        {
                          "type": "Terminal",
                          "value": "else"
                        },
                        {
                          "type": "Terminal",
                          "value": "instanceof"
                        },
                        {
                          "type": "Terminal",
                          "value": "var"
                        }
                      ],
                      [
                        {
                          "type": "Terminal",
                          "value": "catch"
                        },
                        {
                          "type": "Terminal",
                          "value": "export"
                        },
                        {
                          "type": "Terminal",
                          "value": "new"
                        },
                        {
                          "type": "Terminal",
                          "value": "void"
                        }
                      ],
                      [
                        {
                          "type": "Terminal",
                          "value": "class"
                        },
                        {
                          "type": "Terminal",
                          "value": "extends"
                        },
                        {
                          "type": "Terminal",
                          "value": "return"
                        },
                        {
                          "type": "Terminal",
                          "value": "while"
                        }
                      ],
                      [
                        {
                          "type": "Terminal",
                          "value": "const"
                        },
                        {
                          "type": "Terminal",
                          "value": "finally"
                        },
                        {
                          "type": "Terminal",
                          "value": "super"
                        },
                        {
                          "type": "Terminal",
                          "value": "with"
                        }
                      ],
                      [
                        {
                          "type": "Terminal",
                          "value": "continue"
                        },
                        {
                          "type": "Terminal",
                          "value": "for"
                        },
                        {
                          "type": "Terminal",
                          "value": "switch"
                        },
                        {
                          "type": "Terminal",
                          "value": "yield"
                        }
                      ],
                      [
                        {
                          "type": "Terminal",
                          "value": "debugger"
                        },
                        {
                          "type": "Terminal",
                          "value": "function"
                        },
                        {
                          "type": "Terminal",
                          "value": "this"
                        }
                      ],
                      [
                        {
                          "type": "Terminal",
                          "value": "default"
                        },
                        {
                          "type": "Terminal",
                          "value": "if"
                        },
                        {
                          "type": "Terminal",
                          "value": "throw"
                        }
                      ],
                      [
                        {
                          "type": "Terminal",
                          "value": "delete"
                        },
                        {
                          "type": "Terminal",
                          "value": "import"
                        },
                        {
                          "type": "Terminal",
                          "value": "try"
                        }
                      ]
                    ]
                  }
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Non Terminal Token"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Non-terminal tokens with a defined as a grammar production can be referred to in other grammar productions. Non-terminals must match the regular expression "
                    },
                    {
                      "type": "RegExp",
                      "value": "/[A-Z][_a-zA-Z]*/"
                    },
                    {
                      "type": "Text",
                      "value": ". That is, they must start with an uppercase letter, followed by any number of letters or underscores."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Prose"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Grammars can describe arbitrary rules by using prose within a grammar definition by using "
                    },
                    {
                      "type": "InlineCode",
                      "code": "\"quotes\""
                    },
                    {
                      "type": "Text",
                      "value": "."
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": false,
                  "counter": false,
                  "code": "Sandwich : Bread \"Any kind of topping\" Bread\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Produces the following:"
                    }
                  ]
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "Sandwich",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "Bread",
                        "params": null
                      },
                      {
                        "type": "Prose",
                        "text": "Any kind of topping"
                      },
                      {
                        "type": "NonTerminal",
                        "name": "Bread",
                        "params": null
                      }
                    ]
                  }
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Terminal Token"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Terminal tokens refer to a character or sequence of characters. They can be written unadorned in the grammar definition."
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": false,
                  "counter": false,
                  "code": "BalancedParens : ( BalancedParens )\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Produces the following:"
                    }
                  ]
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "BalancedParens",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Terminal",
                        "value": "("
                      },
                      {
                        "type": "NonTerminal",
                        "name": "BalancedParens",
                        "params": null
                      },
                      {
                        "type": "Terminal",
                        "value": ")"
                      }
                    ]
                  }
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Any sequence of characters can be written to indicate a terminal token:"
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": false,
                  "counter": false,
                  "code": "WhileStatement : while ( Expression ) { Statements }\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Produces"
                    }
                  ]
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "WhileStatement",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Terminal",
                        "value": "while"
                      },
                      {
                        "type": "Terminal",
                        "value": "("
                      },
                      {
                        "type": "NonTerminal",
                        "name": "Expression",
                        "params": null
                      },
                      {
                        "type": "Terminal",
                        "value": ")"
                      },
                      {
                        "type": "Terminal",
                        "value": "{"
                      },
                      {
                        "type": "NonTerminal",
                        "name": "Statements",
                        "params": null
                      },
                      {
                        "type": "Terminal",
                        "value": "}"
                      }
                    ]
                  }
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Terminals can also be quoted with back-ticks "
                    },
                    {
                      "type": "HTMLTag",
                      "tag": "<code>"
                    },
                    {
                      "type": "Text",
                      "value": "`"
                    },
                    {
                      "type": "HTMLTag",
                      "tag": "</code>"
                    },
                    {
                      "type": "Text",
                      "value": " to remove any ambiguity from other meanings, for example to allow a terminal token to start with an uppercase letter, or a slash "
                    },
                    {
                      "type": "InlineCode",
                      "code": "/"
                    },
                    {
                      "type": "Text",
                      "value": " or backslash "
                    },
                    {
                      "type": "InlineCode",
                      "code": "\\"
                    },
                    {
                      "type": "Text",
                      "value": ", or later contain a "
                    },
                    {
                      "type": "InlineCode",
                      "code": "]"
                    },
                    {
                      "type": "Text",
                      "value": " or "
                    },
                    {
                      "type": "InlineCode",
                      "code": "}"
                    },
                    {
                      "type": "Text",
                      "value": "."
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": false,
                  "counter": false,
                  "code": "DivisionExpression : Expression `/` Expression\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Produces"
                    }
                  ]
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "DivisionExpression",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "Expression",
                        "params": null
                      },
                      {
                        "type": "Terminal",
                        "value": "/"
                      },
                      {
                        "type": "NonTerminal",
                        "name": "Expression",
                        "params": null
                      }
                    ]
                  }
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Regular Expression"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "When a grammar is intended to be interpretted as a single token and can be clearly written as a regular expression, you can do so directly."
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": false,
                  "counter": false,
                  "code": "UppercaseWord : /[A-Z][a-z]*/\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Produces the following:"
                    }
                  ]
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "UppercaseWord",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "RegExp",
                        "value": "/[A-Z][a-z]*/"
                      }
                    ]
                  }
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Quantifiers"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Tokens can be followed by quantifiers to alter their meaning and as a short-hand for common patterns of optionality and repetition."
                    }
                  ]
                },
                {
                  "type": "Subsection",
                  "header": {
                    "type": "Subheader",
                    "title": "Optional Tokens"
                  },
                  "contents": [
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "A subscript suffix "
                        },
                        {
                          "type": "InlineCode",
                          "code": "Token?"
                        },
                        {
                          "type": "Text",
                          "value": " renders as "
                        },
                        {
                          "type": "Quantified",
                          "token": {
                            "type": "NonTerminal",
                            "name": "Token",
                            "params": null
                          },
                          "isList": false,
                          "isOptional": true
                        },
                        {
                          "type": "Text",
                          "value": " and is a shorthand for two possible definitions, one including that token and one excluding it."
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": null,
                      "example": false,
                      "counter": false,
                      "code": "Sentence : Noun Verb Adverb?\n"
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Produces the following:"
                        }
                      ]
                    },
                    {
                      "type": "Production",
                      "token": {
                        "type": "NonTerminal",
                        "name": "Sentence",
                        "params": null
                      },
                      "defType": 1,
                      "rhs": {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "Noun",
                            "params": null
                          },
                          {
                            "type": "NonTerminal",
                            "name": "Verb",
                            "params": null
                          },
                          {
                            "type": "Quantified",
                            "token": {
                              "type": "NonTerminal",
                              "name": "Adverb",
                              "params": null
                            },
                            "isList": false,
                            "isOptional": true
                          }
                        ]
                      }
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Which is shorthand for:"
                        }
                      ]
                    },
                    {
                      "type": "Production",
                      "token": {
                        "type": "NonTerminal",
                        "name": "Sentence",
                        "params": null
                      },
                      "defType": 1,
                      "rhs": {
                        "type": "ListRHS",
                        "defs": [
                          {
                            "type": "RHS",
                            "condition": null,
                            "tokens": [
                              {
                                "type": "NonTerminal",
                                "name": "Noun",
                                "params": null
                              },
                              {
                                "type": "NonTerminal",
                                "name": "Verb",
                                "params": null
                              },
                              {
                                "type": "NonTerminal",
                                "name": "Adverb",
                                "params": null
                              }
                            ]
                          },
                          {
                            "type": "RHS",
                            "condition": null,
                            "tokens": [
                              {
                                "type": "NonTerminal",
                                "name": "Noun",
                                "params": null
                              },
                              {
                                "type": "NonTerminal",
                                "name": "Verb",
                                "params": null
                              }
                            ]
                          }
                        ]
                      }
                    }
                  ]
                },
                {
                  "type": "Subsection",
                  "header": {
                    "type": "Subheader",
                    "title": "Token Lists"
                  },
                  "contents": [
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "A subscript suffix "
                        },
                        {
                          "type": "InlineCode",
                          "code": "Token+"
                        },
                        {
                          "type": "Text",
                          "value": " renders as "
                        },
                        {
                          "type": "Quantified",
                          "token": {
                            "type": "NonTerminal",
                            "name": "Token",
                            "params": null
                          },
                          "isList": true,
                          "isOptional": false
                        },
                        {
                          "type": "Text",
                          "value": " and is shorthand for a list of one or more of that token."
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": null,
                      "example": false,
                      "counter": false,
                      "code": "Book : Cover Page+ Cover\n"
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Produces the following:"
                        }
                      ]
                    },
                    {
                      "type": "Production",
                      "token": {
                        "type": "NonTerminal",
                        "name": "Book",
                        "params": null
                      },
                      "defType": 1,
                      "rhs": {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "Cover",
                            "params": null
                          },
                          {
                            "type": "Quantified",
                            "token": {
                              "type": "NonTerminal",
                              "name": "Page",
                              "params": null
                            },
                            "isList": true,
                            "isOptional": false
                          },
                          {
                            "type": "NonTerminal",
                            "name": "Cover",
                            "params": null
                          }
                        ]
                      }
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Which, unless your specification document declares otherwise, is shorthand for:"
                        }
                      ]
                    },
                    {
                      "type": "Production",
                      "token": {
                        "type": "NonTerminal",
                        "name": "Book",
                        "params": null
                      },
                      "defType": 1,
                      "rhs": {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "Cover",
                            "params": null
                          },
                          {
                            "type": "NonTerminal",
                            "name": "Page_list",
                            "params": null
                          },
                          {
                            "type": "NonTerminal",
                            "name": "Cover",
                            "params": null
                          }
                        ]
                      }
                    },
                    {
                      "type": "Production",
                      "token": {
                        "type": "NonTerminal",
                        "name": "Page_list",
                        "params": null
                      },
                      "defType": 1,
                      "rhs": {
                        "type": "ListRHS",
                        "defs": [
                          {
                            "type": "RHS",
                            "condition": null,
                            "tokens": [
                              {
                                "type": "NonTerminal",
                                "name": "Page_list",
                                "params": null
                              },
                              {
                                "type": "NonTerminal",
                                "name": "Page",
                                "params": null
                              }
                            ]
                          },
                          {
                            "type": "RHS",
                            "condition": null,
                            "tokens": [
                              {
                                "type": "NonTerminal",
                                "name": "Page",
                                "params": null
                              }
                            ]
                          }
                        ]
                      }
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Some specifications may wish to declare "
                        },
                        {
                          "type": "Quantified",
                          "token": {
                            "type": "NonTerminal",
                            "name": "Token",
                            "params": null
                          },
                          "isList": true,
                          "isOptional": false
                        },
                        {
                          "type": "Text",
                          "value": " as a shorthand for a comma-separated list, in which case the previous example would be shorthand for:"
                        }
                      ]
                    },
                    {
                      "type": "Production",
                      "token": {
                        "type": "NonTerminal",
                        "name": "Book",
                        "params": null
                      },
                      "defType": 1,
                      "rhs": {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "Cover",
                            "params": null
                          },
                          {
                            "type": "NonTerminal",
                            "name": "Page_list",
                            "params": null
                          },
                          {
                            "type": "NonTerminal",
                            "name": "Cover",
                            "params": null
                          }
                        ]
                      }
                    },
                    {
                      "type": "Production",
                      "token": {
                        "type": "NonTerminal",
                        "name": "Page_list",
                        "params": null
                      },
                      "defType": 1,
                      "rhs": {
                        "type": "ListRHS",
                        "defs": [
                          {
                            "type": "RHS",
                            "condition": null,
                            "tokens": [
                              {
                                "type": "NonTerminal",
                                "name": "Page_list",
                                "params": null
                              },
                              {
                                "type": "Terminal",
                                "value": ","
                              },
                              {
                                "type": "NonTerminal",
                                "name": "Page",
                                "params": null
                              }
                            ]
                          },
                          {
                            "type": "RHS",
                            "condition": null,
                            "tokens": [
                              {
                                "type": "NonTerminal",
                                "name": "Page",
                                "params": null
                              }
                            ]
                          }
                        ]
                      }
                    }
                  ]
                },
                {
                  "type": "Subsection",
                  "header": {
                    "type": "Subheader",
                    "title": "Optional Lists"
                  },
                  "contents": [
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "A subscript suffix "
                        },
                        {
                          "type": "InlineCode",
                          "code": "Token*"
                        },
                        {
                          "type": "Text",
                          "value": " renders as "
                        },
                        {
                          "type": "Quantified",
                          "token": {
                            "type": "NonTerminal",
                            "name": "Token",
                            "params": null
                          },
                          "isList": true,
                          "isOptional": true
                        },
                        {
                          "type": "Text",
                          "value": " and is shorthand for an optional list, which describes zero or more of that token."
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": null,
                      "example": false,
                      "counter": false,
                      "code": "Sandwich : Bread Topping* Bread\n"
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Produces the following:"
                        }
                      ]
                    },
                    {
                      "type": "Production",
                      "token": {
                        "type": "NonTerminal",
                        "name": "Sandwich",
                        "params": null
                      },
                      "defType": 1,
                      "rhs": {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "Bread",
                            "params": null
                          },
                          {
                            "type": "Quantified",
                            "token": {
                              "type": "NonTerminal",
                              "name": "Topping",
                              "params": null
                            },
                            "isList": true,
                            "isOptional": true
                          },
                          {
                            "type": "NonTerminal",
                            "name": "Bread",
                            "params": null
                          }
                        ]
                      }
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Which is shorthand for:"
                        }
                      ]
                    },
                    {
                      "type": "Production",
                      "token": {
                        "type": "NonTerminal",
                        "name": "Sandwich",
                        "params": null
                      },
                      "defType": 1,
                      "rhs": {
                        "type": "ListRHS",
                        "defs": [
                          {
                            "type": "RHS",
                            "condition": null,
                            "tokens": [
                              {
                                "type": "NonTerminal",
                                "name": "Bread",
                                "params": null
                              },
                              {
                                "type": "NonTerminal",
                                "name": "Topping_list",
                                "params": null
                              },
                              {
                                "type": "NonTerminal",
                                "name": "Bread",
                                "params": null
                              }
                            ]
                          },
                          {
                            "type": "RHS",
                            "condition": null,
                            "tokens": [
                              {
                                "type": "NonTerminal",
                                "name": "Bread",
                                "params": null
                              },
                              {
                                "type": "NonTerminal",
                                "name": "Bread",
                                "params": null
                              }
                            ]
                          }
                        ]
                      }
                    },
                    {
                      "type": "Production",
                      "token": {
                        "type": "NonTerminal",
                        "name": "Topping_list",
                        "params": null
                      },
                      "defType": 1,
                      "rhs": {
                        "type": "ListRHS",
                        "defs": [
                          {
                            "type": "RHS",
                            "condition": null,
                            "tokens": [
                              {
                                "type": "NonTerminal",
                                "name": "Topping_list",
                                "params": null
                              },
                              {
                                "type": "NonTerminal",
                                "name": "Topping",
                                "params": null
                              }
                            ]
                          },
                          {
                            "type": "RHS",
                            "condition": null,
                            "tokens": [
                              {
                                "type": "NonTerminal",
                                "name": "Topping",
                                "params": null
                              }
                            ]
                          }
                        ]
                      }
                    }
                  ]
                },
                {
                  "type": "Subsection",
                  "header": {
                    "type": "Subheader",
                    "title": "Use with Non-Terminals"
                  },
                  "contents": [
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Quantifiers also apply to non-terminal tokens with the same rules. For example:"
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": "markdown",
                      "example": false,
                      "counter": false,
                      "code": "UnionMembers :\n  - UnionMembers | NamedType\n  - `|`? NamedType\n"
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Produces the following:"
                        }
                      ]
                    },
                    {
                      "type": "Production",
                      "token": {
                        "type": "NonTerminal",
                        "name": "UnionMembers",
                        "params": null
                      },
                      "defType": 1,
                      "rhs": {
                        "type": "ListRHS",
                        "defs": [
                          {
                            "type": "RHS",
                            "condition": null,
                            "tokens": [
                              {
                                "type": "NonTerminal",
                                "name": "UnionMembers",
                                "params": null
                              },
                              {
                                "type": "Terminal",
                                "value": "|"
                              },
                              {
                                "type": "NonTerminal",
                                "name": "NamedType",
                                "params": null
                              }
                            ]
                          },
                          {
                            "type": "RHS",
                            "condition": null,
                            "tokens": [
                              {
                                "type": "Quantified",
                                "token": {
                                  "type": "Terminal",
                                  "value": "|"
                                },
                                "isList": false,
                                "isOptional": true
                              },
                              {
                                "type": "NonTerminal",
                                "name": "NamedType",
                                "params": null
                              }
                            ]
                          }
                        ]
                      }
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "However, unquoted non-terminals may use the "
                        },
                        {
                          "type": "InlineCode",
                          "code": "*"
                        },
                        {
                          "type": "Text",
                          "value": ", "
                        },
                        {
                          "type": "InlineCode",
                          "code": "?"
                        },
                        {
                          "type": "Text",
                          "value": " and "
                        },
                        {
                          "type": "InlineCode",
                          "code": "+"
                        },
                        {
                          "type": "Text",
                          "value": " characters, so always quote the terminal if the intent is to apply a quantifer."
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": "markdown",
                      "example": true,
                      "counter": true,
                      "code": "UnionMembers :\n  - UnionMembers | NamedType\n  - |? NamedType\n"
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Produces the terminal "
                        },
                        {
                          "type": "InlineCode",
                          "code": "|?"
                        },
                        {
                          "type": "Text",
                          "value": ", not an optional "
                        },
                        {
                          "type": "InlineCode",
                          "code": "|"
                        },
                        {
                          "type": "Text",
                          "value": ":"
                        }
                      ]
                    },
                    {
                      "type": "Production",
                      "token": {
                        "type": "NonTerminal",
                        "name": "UnionMembers",
                        "params": null
                      },
                      "defType": 1,
                      "rhs": {
                        "type": "ListRHS",
                        "defs": [
                          {
                            "type": "RHS",
                            "condition": null,
                            "tokens": [
                              {
                                "type": "NonTerminal",
                                "name": "UnionMembers",
                                "params": null
                              },
                              {
                                "type": "Terminal",
                                "value": "|"
                              },
                              {
                                "type": "NonTerminal",
                                "name": "NamedType",
                                "params": null
                              }
                            ]
                          },
                          {
                            "type": "RHS",
                            "condition": null,
                            "tokens": [
                              {
                                "type": "Terminal",
                                "value": "|?"
                              },
                              {
                                "type": "NonTerminal",
                                "name": "NamedType",
                                "params": null
                              }
                            ]
                          }
                        ]
                      }
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Conditional Parameters"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "It can be a useful short-hand to provide conditional parameters when defining a non-terminal token rather than defining two very similar non-terminals."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "A conditional parameter is written in braces "
                    },
                    {
                      "type": "InlineCode",
                      "code": "Token[Param]"
                    },
                    {
                      "type": "Text",
                      "value": " and renders as "
                    },
                    {
                      "type": "NonTerminal",
                      "name": "Token",
                      "params": [
                        {
                          "type": "NonTerminalParam",
                          "conditional": false,
                          "negated": false,
                          "name": "Param"
                        }
                      ]
                    },
                    {
                      "type": "Text",
                      "value": ". When used in definitions is shorthand for two symbol definitions: one appended with that parameter name, the other without."
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": false,
                  "counter": false,
                  "code": "Example[WithCondition] : \"Definition TBD\"\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Produces the following:"
                    }
                  ]
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "Example",
                    "params": [
                      {
                        "type": "NonTerminalParam",
                        "conditional": false,
                        "negated": false,
                        "name": "WithCondition"
                      }
                    ]
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Prose",
                        "text": "Definition TBD"
                      }
                    ]
                  }
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Which is shorthand for:"
                    }
                  ]
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "Example",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Prose",
                        "text": "Definition TBD"
                      }
                    ]
                  }
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "Example_WithCondition",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Prose",
                        "text": "Definition TBD"
                      }
                    ]
                  }
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "The conditions are applied at the beginning of a definition for the non-terminal by prefixing with "
                    },
                    {
                      "type": "InlineCode",
                      "code": "[if Param]"
                    },
                    {
                      "type": "Text",
                      "value": " (alternatively "
                    },
                    {
                      "type": "InlineCode",
                      "code": "[+Param]"
                    },
                    {
                      "type": "Text",
                      "value": ") or "
                    },
                    {
                      "type": "InlineCode",
                      "code": "[if not Param]"
                    },
                    {
                      "type": "Text",
                      "value": " (alternatively "
                    },
                    {
                      "type": "InlineCode",
                      "code": "[~Param]"
                    },
                    {
                      "type": "Text",
                      "value": ") to only include the definition when the variant with the conditional parameter is or is not used, respectively."
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": false,
                  "counter": false,
                  "code": "Example[WithCondition] :\n  - A\n  - [if WithCondition] B\n  - [if not WithCondition] C\n  - [+WithCondition] D\n  - [~WithCondition] E\n\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Produces the following:"
                    }
                  ]
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "Example",
                    "params": [
                      {
                        "type": "NonTerminalParam",
                        "conditional": false,
                        "negated": false,
                        "name": "WithCondition"
                      }
                    ]
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "ListRHS",
                    "defs": [
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "A",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": {
                          "type": "Condition",
                          "param": "WithCondition",
                          "not": false
                        },
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "B",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": {
                          "type": "Condition",
                          "param": "WithCondition",
                          "not": true
                        },
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "C",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": {
                          "type": "Condition",
                          "param": "WithCondition",
                          "not": false
                        },
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "D",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": {
                          "type": "Condition",
                          "param": "WithCondition",
                          "not": true
                        },
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "E",
                            "params": null
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Which is shorthand for:"
                    }
                  ]
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "Example",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "ListRHS",
                    "defs": [
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "A",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "C",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "E",
                            "params": null
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "Example_WithCondition",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "ListRHS",
                    "defs": [
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "A",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "B",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "D",
                            "params": null
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "The same bracket suffix on a non-terminal within a rule is shorthand for using that variant of the rule. If the parameter starts with "
                    },
                    {
                      "type": "InlineCode",
                      "code": "?"
                    },
                    {
                      "type": "Text",
                      "value": ", that form of the symbol is conditionally used only in the derived production with the same parameter. If the parameter starts with "
                    },
                    {
                      "type": "InlineCode",
                      "code": "!"
                    },
                    {
                      "type": "Text",
                      "value": ", that form of the symbol is only used when in the derived production "
                    },
                    {
                      "type": "Italic",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "without"
                        }
                      ]
                    },
                    {
                      "type": "Text",
                      "value": " that parameter."
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": false,
                  "counter": false,
                  "code": "Example[WithCondition] :\n  - Example\n  - Example[WithCondition]\n  - Example[?WithCondition]\n  - Example[!WithCondition]\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Produces the following:"
                    }
                  ]
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "Example",
                    "params": [
                      {
                        "type": "NonTerminalParam",
                        "conditional": false,
                        "negated": false,
                        "name": "WithCondition"
                      }
                    ]
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "ListRHS",
                    "defs": [
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "Example",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "Example",
                            "params": [
                              {
                                "type": "NonTerminalParam",
                                "conditional": false,
                                "negated": false,
                                "name": "WithCondition"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "Example",
                            "params": [
                              {
                                "type": "NonTerminalParam",
                                "conditional": true,
                                "negated": false,
                                "name": "WithCondition"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "Example",
                            "params": [
                              {
                                "type": "NonTerminalParam",
                                "conditional": false,
                                "negated": true,
                                "name": "WithCondition"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Which is shorthand for:"
                    }
                  ]
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "Example",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "ListRHS",
                    "defs": [
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "Example",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "Example_WithCondition",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "Example",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "Example_WithCondition",
                            "params": null
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "Example_WithCondition",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "ListRHS",
                    "defs": [
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "Example",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "Example_WithCondition",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "Example_WithCondition",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "Example",
                            "params": null
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Multiple conditional parameters can be used on both the production definition and on non-terminals within a rule, in which case it is short form for the permutation of all conditions:"
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": false,
                  "counter": false,
                  "code": "Example[P, Q] :\n  - [if P] `p`\n  - [if Q] `q`\n  - Example[!P, ?Q]\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Produces the following:"
                    }
                  ]
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "Example",
                    "params": [
                      {
                        "type": "NonTerminalParam",
                        "conditional": false,
                        "negated": false,
                        "name": "P"
                      },
                      {
                        "type": "NonTerminalParam",
                        "conditional": false,
                        "negated": false,
                        "name": "Q"
                      }
                    ]
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "ListRHS",
                    "defs": [
                      {
                        "type": "RHS",
                        "condition": {
                          "type": "Condition",
                          "param": "P",
                          "not": false
                        },
                        "tokens": [
                          {
                            "type": "Terminal",
                            "value": "p"
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": {
                          "type": "Condition",
                          "param": "Q",
                          "not": false
                        },
                        "tokens": [
                          {
                            "type": "Terminal",
                            "value": "q"
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "Example",
                            "params": [
                              {
                                "type": "NonTerminalParam",
                                "conditional": false,
                                "negated": true,
                                "name": "P"
                              },
                              {
                                "type": "NonTerminalParam",
                                "conditional": true,
                                "negated": false,
                                "name": "Q"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Which is shorthand for:"
                    }
                  ]
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "Example",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "ListRHS",
                    "defs": [
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "Example_P",
                            "params": null
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "Example_P",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "ListRHS",
                    "defs": [
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "Terminal",
                            "value": "p"
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "Example",
                            "params": null
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "Example_Q",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "ListRHS",
                    "defs": [
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "Terminal",
                            "value": "q"
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "Example_P_Q",
                            "params": null
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "Example_P_Q",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "ListRHS",
                    "defs": [
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "Terminal",
                            "value": "p"
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "Terminal",
                            "value": "q"
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "Example_Q",
                            "params": null
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Conditional parameters on a usage can be followed by a quantifier."
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": false,
                  "counter": false,
                  "code": "Example[P, ?Q]*\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Produces the following:"
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Quantified",
                      "token": {
                        "type": "NonTerminal",
                        "name": "Example",
                        "params": [
                          {
                            "type": "NonTerminalParam",
                            "conditional": false,
                            "negated": false,
                            "name": "P"
                          },
                          {
                            "type": "NonTerminalParam",
                            "conditional": true,
                            "negated": false,
                            "name": "Q"
                          }
                        ]
                      },
                      "isList": true,
                      "isOptional": true
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Constraints"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Any token can be followed by “but not” or “but not one of” to place a further constraint on the previous token:"
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": false,
                  "counter": false,
                  "code": "Example : A B but not foo or bar\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Produces the following:"
                    }
                  ]
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "Example",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "A",
                        "params": null
                      },
                      {
                        "type": "Constrained",
                        "token": {
                          "type": "NonTerminal",
                          "name": "B",
                          "params": null
                        },
                        "constraint": {
                          "type": "ButNot",
                          "tokens": [
                            {
                              "type": "Terminal",
                              "value": "foo"
                            },
                            {
                              "type": "Terminal",
                              "value": "bar"
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Optionally can mention “one of”, this will be omitted when rendered. Commas can be used instead of “or”."
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": false,
                  "counter": false,
                  "code": "Example : A B but not one of foo, bar\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Produces the following:"
                    }
                  ]
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "Example",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "A",
                        "params": null
                      },
                      {
                        "type": "Constrained",
                        "token": {
                          "type": "NonTerminal",
                          "name": "B",
                          "params": null
                        },
                        "constraint": {
                          "type": "ButNot",
                          "tokens": [
                            {
                              "type": "Terminal",
                              "value": "foo"
                            },
                            {
                              "type": "Terminal",
                              "value": "bar"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Meta Tokens"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Spec Markdown can specify some tokens which do not consume any characters."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "The empty set, written "
                    },
                    {
                      "type": "InlineCode",
                      "code": "[empty]"
                    },
                    {
                      "type": "Text",
                      "value": " appears as "
                    },
                    {
                      "type": "Empty"
                    },
                    {
                      "type": "Text",
                      "value": " can be used to define a non-terminal as matching no terminal or non-terminal tokens."
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": false,
                  "counter": false,
                  "code": "Example : [empty]\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Produces the following:"
                    }
                  ]
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "Example",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Empty"
                      }
                    ]
                  }
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Lookaheads can appear anywhere in a sequence of tokens, and describe additional constraints on the following token."
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": false,
                  "counter": false,
                  "code": "Example :\n  - [lookahead token] Token\n  - [lookahead ! token] Token\n  - [lookahead != token] Token\n  - [lookahead NonTerminal] Token\n  - [lookahead ! NonTerminal] Token\n  - [lookahead != NonTerminal] Token\n  - [lookahead {token, set}] Token\n  - [lookahead ! {token, set}] Token\n  - [lookahead != {token, set}] Token\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Produces the following:"
                    }
                  ]
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "Example",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "ListRHS",
                    "defs": [
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "Lookahead",
                            "not": false,
                            "nt": false,
                            "set": [
                              {
                                "type": "Terminal",
                                "value": "token"
                              }
                            ]
                          },
                          {
                            "type": "NonTerminal",
                            "name": "Token",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "Lookahead",
                            "not": true,
                            "nt": false,
                            "set": [
                              {
                                "type": "Terminal",
                                "value": "token"
                              }
                            ]
                          },
                          {
                            "type": "NonTerminal",
                            "name": "Token",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "Lookahead",
                            "not": true,
                            "nt": false,
                            "set": [
                              {
                                "type": "Terminal",
                                "value": "token"
                              }
                            ]
                          },
                          {
                            "type": "NonTerminal",
                            "name": "Token",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "Lookahead",
                            "not": false,
                            "nt": true,
                            "set": [
                              {
                                "type": "NonTerminal",
                                "name": "NonTerminal",
                                "params": null
                              }
                            ]
                          },
                          {
                            "type": "NonTerminal",
                            "name": "Token",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "Lookahead",
                            "not": true,
                            "nt": true,
                            "set": [
                              {
                                "type": "NonTerminal",
                                "name": "NonTerminal",
                                "params": null
                              }
                            ]
                          },
                          {
                            "type": "NonTerminal",
                            "name": "Token",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "Lookahead",
                            "not": true,
                            "nt": true,
                            "set": [
                              {
                                "type": "NonTerminal",
                                "name": "NonTerminal",
                                "params": null
                              }
                            ]
                          },
                          {
                            "type": "NonTerminal",
                            "name": "Token",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "Lookahead",
                            "not": false,
                            "nt": false,
                            "set": [
                              {
                                "type": "Terminal",
                                "value": "token"
                              },
                              {
                                "type": "Terminal",
                                "value": "set"
                              }
                            ]
                          },
                          {
                            "type": "NonTerminal",
                            "name": "Token",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "Lookahead",
                            "not": true,
                            "nt": false,
                            "set": [
                              {
                                "type": "Terminal",
                                "value": "token"
                              },
                              {
                                "type": "Terminal",
                                "value": "set"
                              }
                            ]
                          },
                          {
                            "type": "NonTerminal",
                            "name": "Token",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "Lookahead",
                            "not": true,
                            "nt": false,
                            "set": [
                              {
                                "type": "Terminal",
                                "value": "token"
                              },
                              {
                                "type": "Terminal",
                                "value": "set"
                              }
                            ]
                          },
                          {
                            "type": "NonTerminal",
                            "name": "Token",
                            "params": null
                          }
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Grammar Semantics"
          },
          "contents": [
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Once grammar is defined, it can be useful to define the semantics of the grammar in terms of algorithm steps. A single grammar definition followed by a list is interpretted as a grammar semantic:"
                }
              ]
            },
            {
              "type": "Code",
              "raw": false,
              "lang": null,
              "example": false,
              "counter": false,
              "code": "PBJ : Bread PeanutButter Jelly Bread\n\n* Let {bottomBread} be the result of placing the first {Bread} on the plate.\n* Let {pbSpread} be the result of getting {PeanutButter} from the jar.\n* Spread {pbSpread} onto {bottomBread}.\n* Let {topBread} be the result of placing the last {Bread} on the plate.\n* Let {jamSpread} be the result of getting {Jelly} from the jar.\n* Spread {jamSpread} onto {topBread}.\n* Let {sandwich} be the result of rotating {topBread} 180&deg; and placing on {bottomBread}.\n* Return {sandwich}.\n"
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Produces the following:"
                }
              ]
            },
            {
              "type": "Semantic",
              "name": {
                "type": "NonTerminal",
                "name": "PBJ",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "tokens": [
                  {
                    "type": "NonTerminal",
                    "name": "Bread",
                    "params": null
                  },
                  {
                    "type": "NonTerminal",
                    "name": "PeanutButter",
                    "params": null
                  },
                  {
                    "type": "NonTerminal",
                    "name": "Jelly",
                    "params": null
                  },
                  {
                    "type": "NonTerminal",
                    "name": "Bread",
                    "params": null
                  }
                ]
              },
              "steps": {
                "type": "List",
                "ordered": true,
                "items": [
                  {
                    "type": "ListItem",
                    "contents": [
                      {
                        "type": "Text",
                        "value": "Let "
                      },
                      {
                        "type": "Variable",
                        "name": "bottomBread"
                      },
                      {
                        "type": "Text",
                        "value": " be the result of placing the first "
                      },
                      {
                        "type": "NonTerminal",
                        "name": "Bread",
                        "params": null
                      },
                      {
                        "type": "Text",
                        "value": " on the plate."
                      }
                    ]
                  },
                  {
                    "type": "ListItem",
                    "contents": [
                      {
                        "type": "Text",
                        "value": "Let "
                      },
                      {
                        "type": "Variable",
                        "name": "pbSpread"
                      },
                      {
                        "type": "Text",
                        "value": " be the result of "
                      },
                      {
                        "type": "NonTerminal",
                        "name": "PeanutButter",
                        "params": null
                      },
                      {
                        "type": "Text",
                        "value": "."
                      }
                    ]
                  },
                  {
                    "type": "ListItem",
                    "contents": [
                      {
                        "type": "Text",
                        "value": "Spread "
                      },
                      {
                        "type": "Variable",
                        "name": "pbSpread"
                      },
                      {
                        "type": "Text",
                        "value": " onto "
                      },
                      {
                        "type": "Variable",
                        "name": "bottomBread"
                      },
                      {
                        "type": "Text",
                        "value": "."
                      }
                    ]
                  },
                  {
                    "type": "ListItem",
                    "contents": [
                      {
                        "type": "Text",
                        "value": "Let "
                      },
                      {
                        "type": "Variable",
                        "name": "topBread"
                      },
                      {
                        "type": "Text",
                        "value": " be the result of placing the last "
                      },
                      {
                        "type": "NonTerminal",
                        "name": "Bread",
                        "params": null
                      },
                      {
                        "type": "Text",
                        "value": " on the plate."
                      }
                    ]
                  },
                  {
                    "type": "ListItem",
                    "contents": [
                      {
                        "type": "Text",
                        "value": "Let "
                      },
                      {
                        "type": "Variable",
                        "name": "jamSpread"
                      },
                      {
                        "type": "Text",
                        "value": " be the result of "
                      },
                      {
                        "type": "NonTerminal",
                        "name": "Jelly",
                        "params": null
                      },
                      {
                        "type": "Text",
                        "value": "."
                      }
                    ]
                  },
                  {
                    "type": "ListItem",
                    "contents": [
                      {
                        "type": "Text",
                        "value": "Spread "
                      },
                      {
                        "type": "Variable",
                        "name": "jamSpread"
                      },
                      {
                        "type": "Text",
                        "value": " onto "
                      },
                      {
                        "type": "Variable",
                        "name": "topBread"
                      },
                      {
                        "type": "Text",
                        "value": "."
                      }
                    ]
                  },
                  {
                    "type": "ListItem",
                    "contents": [
                      {
                        "type": "Text",
                        "value": "Let "
                      },
                      {
                        "type": "Variable",
                        "name": "sandwich"
                      },
                      {
                        "type": "Text",
                        "value": " be the result of rotating "
                      },
                      {
                        "type": "Variable",
                        "name": "topBread"
                      },
                      {
                        "type": "Text",
                        "value": " 180&deg; and placing on "
                      },
                      {
                        "type": "Variable",
                        "name": "bottomBread"
                      },
                      {
                        "type": "Text",
                        "value": "."
                      }
                    ]
                  },
                  {
                    "type": "ListItem",
                    "contents": [
                      {
                        "type": "Text",
                        "value": "Return "
                      },
                      {
                        "type": "Variable",
                        "name": "sandwich"
                      },
                      {
                        "type": "Text",
                        "value": "."
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Value Literals"
          },
          "contents": [
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Value literals allow any text to refer to a value which has semantic meaning in the specification by wrapping it in "
                },
                {
                  "type": "InlineCode",
                  "code": "{ }"
                },
                {
                  "type": "Text",
                  "value": " curly brace characters."
                }
              ]
            },
            {
              "type": "Code",
              "raw": false,
              "lang": null,
              "example": false,
              "counter": false,
              "code": "I can reference {foo}, {\"foo\"}, {null}, {true}.\n"
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Produces the following:"
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "I can reference "
                },
                {
                  "type": "Variable",
                  "name": "foo"
                },
                {
                  "type": "Text",
                  "value": ", "
                },
                {
                  "type": "StringLiteral",
                  "value": "\"foo\""
                },
                {
                  "type": "Text",
                  "value": ", "
                },
                {
                  "type": "Keyword",
                  "value": "null"
                },
                {
                  "type": "Text",
                  "value": ", "
                },
                {
                  "type": "Keyword",
                  "value": "true"
                },
                {
                  "type": "Text",
                  "value": "."
                }
              ]
            },
            {
              "type": "Subsection",
              "header": {
                "type": "Subheader",
                "title": "Variables"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Write "
                    },
                    {
                      "type": "InlineCode",
                      "code": "{foo}"
                    },
                    {
                      "type": "Text",
                      "value": " to produce a variable (represented by a <var> tag) like "
                    },
                    {
                      "type": "Variable",
                      "name": "foo"
                    },
                    {
                      "type": "Text",
                      "value": "."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Subsection",
              "header": {
                "type": "Subheader",
                "title": "Keywords"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Some known keywords like "
                    },
                    {
                      "type": "Keyword",
                      "value": "null"
                    },
                    {
                      "type": "Text",
                      "value": ", "
                    },
                    {
                      "type": "Keyword",
                      "value": "undefined"
                    },
                    {
                      "type": "Text",
                      "value": ", "
                    },
                    {
                      "type": "Keyword",
                      "value": "true"
                    },
                    {
                      "type": "Text",
                      "value": " and "
                    },
                    {
                      "type": "Keyword",
                      "value": "false"
                    },
                    {
                      "type": "Text",
                      "value": " are rendered as constants instead of variables."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Subsection",
              "header": {
                "type": "Subheader",
                "title": "String literal"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Write "
                    },
                    {
                      "type": "InlineCode",
                      "code": "{\"foo\"}"
                    },
                    {
                      "type": "Text",
                      "value": " to produce a string literal like "
                    },
                    {
                      "type": "StringLiteral",
                      "value": "\"foo\""
                    },
                    {
                      "type": "Text",
                      "value": "."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Subsection",
              "header": {
                "type": "Subheader",
                "title": "Grammar tokens"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Any grammar token can be written inline, like "
                    },
                    {
                      "type": "InlineCode",
                      "code": "{Example}"
                    },
                    {
                      "type": "Text",
                      "value": " to represent the non-terminal token "
                    },
                    {
                      "type": "NonTerminal",
                      "name": "Example",
                      "params": null
                    },
                    {
                      "type": "Text",
                      "value": ", "
                    },
                    {
                      "type": "HTMLTag",
                      "tag": "<code>"
                    },
                    {
                      "type": "Text",
                      "value": "{`terminal`}"
                    },
                    {
                      "type": "HTMLTag",
                      "tag": "</code>"
                    },
                    {
                      "type": "Text",
                      "value": " to represent the terminal token "
                    },
                    {
                      "type": "Terminal",
                      "value": "terminal"
                    },
                    {
                      "type": "Text",
                      "value": ". Even meta tokens like "
                    },
                    {
                      "type": "InlineCode",
                      "code": "{[empty]}"
                    },
                    {
                      "type": "Text",
                      "value": " for "
                    },
                    {
                      "type": "Empty"
                    },
                    {
                      "type": "Text",
                      "value": " and "
                    },
                    {
                      "type": "InlineCode",
                      "code": "{[lookahead !{ x, y }]}"
                    },
                    {
                      "type": "Text",
                      "value": " for "
                    },
                    {
                      "type": "Lookahead",
                      "not": true,
                      "nt": false,
                      "set": [
                        {
                          "type": "Terminal",
                          "value": "x"
                        },
                        {
                          "type": "Terminal",
                          "value": "y"
                        }
                      ]
                    },
                    {
                      "type": "Text",
                      "value": "."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Subsection",
              "header": {
                "type": "Subheader",
                "title": "Algorithm calls"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "A call to an algorithm can be expressed as a value literal:"
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": false,
                  "counter": false,
                  "code": "{Algorithm(foo, \"string\", null)}\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Produces the following:"
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Call",
                      "name": "Algorithm",
                      "args": [
                        {
                          "type": "Variable",
                          "name": "foo"
                        },
                        {
                          "type": "StringLiteral",
                          "value": "\"string\""
                        },
                        {
                          "type": "Keyword",
                          "value": "null"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Biblio"
          },
          "contents": [
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "By supplying a "
                },
                {
                  "type": "InlineCode",
                  "code": "\"biblio\""
                },
                {
                  "type": "Text",
                  "value": " key in a metadata file, you can have Algorithm calls and Non-terminal tokens which are not defined in this spec to link to where they are defined."
                }
              ]
            },
            {
              "type": "Code",
              "raw": false,
              "lang": null,
              "example": false,
              "counter": false,
              "code": "spec-md -m metadata.json myspec.md\n"
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Where metadata.json includes:"
                }
              ]
            },
            {
              "type": "Code",
              "raw": false,
              "lang": null,
              "example": false,
              "counter": false,
              "code": "{\n  \"biblio\": {\n    \"http://people.mozilla.org/~jorendorff/es6-draft.html\": {\n      \"Identifier\": \"#sec-names-and-keywords\",\n      \"PrimaryExpression\": \"#sec-primary-expression\",\n      \"ReturnIfAbrupt()\": \"#sec-returnifabrupt\",\n      \"Get()\": \"#sec-get-o-p\"\n    }\n  }\n}\n"
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Then referring to these tokens will link out to that page."
                }
              ]
            },
            {
              "type": "Code",
              "raw": false,
              "lang": null,
              "example": false,
              "counter": false,
              "code": "MemberExpression : PrimaryExpression . Identifier\n\n  * Let {reference} be the result of evaluating {PrimaryExpression}.\n  * Let {propName} be the string value of {Identifier}.\n  * Let {value} be {Get(reference, propName)}.\n  * {ReturnIfAbrupt(value)}.\n  * Return {value}.\n"
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Produces the following:"
                }
              ]
            },
            {
              "type": "Semantic",
              "name": {
                "type": "NonTerminal",
                "name": "MemberExpression",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "tokens": [
                  {
                    "type": "NonTerminal",
                    "name": "PrimaryExpression",
                    "params": null
                  },
                  {
                    "type": "Terminal",
                    "value": "."
                  },
                  {
                    "type": "NonTerminal",
                    "name": "Identifier",
                    "params": null
                  }
                ]
              },
              "steps": {
                "type": "List",
                "ordered": true,
                "items": [
                  {
                    "type": "ListItem",
                    "contents": [
                      {
                        "type": "Text",
                        "value": "Let "
                      },
                      {
                        "type": "Variable",
                        "name": "reference"
                      },
                      {
                        "type": "Text",
                        "value": " be the result of evaluating "
                      },
                      {
                        "type": "NonTerminal",
                        "name": "PrimaryExpression",
                        "params": null
                      },
                      {
                        "type": "Text",
                        "value": "."
                      }
                    ]
                  },
                  {
                    "type": "ListItem",
                    "contents": [
                      {
                        "type": "Text",
                        "value": "Let "
                      },
                      {
                        "type": "Variable",
                        "name": "propName"
                      },
                      {
                        "type": "Text",
                        "value": " be the string value of "
                      },
                      {
                        "type": "NonTerminal",
                        "name": "Identifier",
                        "params": null
                      },
                      {
                        "type": "Text",
                        "value": "."
                      }
                    ]
                  },
                  {
                    "type": "ListItem",
                    "contents": [
                      {
                        "type": "Text",
                        "value": "Let "
                      },
                      {
                        "type": "Variable",
                        "name": "value"
                      },
                      {
                        "type": "Text",
                        "value": " be "
                      },
                      {
                        "type": "Call",
                        "name": "Get",
                        "args": [
                          {
                            "type": "Variable",
                            "name": "reference"
                          },
                          {
                            "type": "Variable",
                            "name": "propName"
                          }
                        ]
                      },
                      {
                        "type": "Text",
                        "value": "."
                      }
                    ]
                  },
                  {
                    "type": "ListItem",
                    "contents": [
                      {
                        "type": "Call",
                        "name": "ReturnIfAbrupt",
                        "args": [
                          {
                            "type": "Variable",
                            "name": "value"
                          }
                        ]
                      },
                      {
                        "type": "Text",
                        "value": "."
                      }
                    ]
                  },
                  {
                    "type": "ListItem",
                    "contents": [
                      {
                        "type": "Text",
                        "value": "Return "
                      },
                      {
                        "type": "Variable",
                        "name": "value"
                      },
                      {
                        "type": "Text",
                        "value": ". "
                      }
                    ]
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "type": "Section",
      "header": {
        "type": "Header",
        "level": 1,
        "secID": [
          "A"
        ],
        "title": "Using Spec Markdown"
      },
      "contents": [
        {
          "type": "Paragraph",
          "contents": [
            {
              "type": "Text",
              "value": "If installed globally, using "
            },
            {
              "type": "InlineCode",
              "code": "spec-md"
            },
            {
              "type": "Text",
              "value": " as a shell executable is the easiest way to use Spec Markdown. The "
            },
            {
              "type": "InlineCode",
              "code": "spec-md"
            },
            {
              "type": "Text",
              "value": " executable expects a filepath to a Markdown document as input and outputs HTML on stdout. Use "
            },
            {
              "type": "InlineCode",
              "code": ">"
            },
            {
              "type": "Text",
              "value": " to write stdout to a file."
            }
          ]
        },
        {
          "type": "Code",
          "raw": false,
          "lang": "sh",
          "example": false,
          "counter": false,
          "code": "npm install -g spec-md\nspec-md ./path/to/markdown.md > ./path/to/output.html\n"
        },
        {
          "type": "Paragraph",
          "contents": [
            {
              "type": "Text",
              "value": "You can also require "
            },
            {
              "type": "InlineCode",
              "code": "spec-md"
            },
            {
              "type": "Text",
              "value": " as a node module, after which you might add the "
            },
            {
              "type": "InlineCode",
              "code": "spec-md"
            },
            {
              "type": "Text",
              "value": " command as a "
            },
            {
              "type": "Link",
              "contents": [
                {
                  "type": "Text",
                  "value": "node script"
                }
              ],
              "url": "https://docs.npmjs.com/cli/run-script",
              "title": null
            },
            {
              "type": "Text",
              "value": "."
            }
          ]
        },
        {
          "type": "Code",
          "raw": false,
          "lang": "sh",
          "example": false,
          "counter": false,
          "code": "npm install --save-dev spec-md\n"
        },
        {
          "type": "Code",
          "raw": false,
          "lang": "js",
          "example": false,
          "counter": false,
          "code": "const fs = require('fs');\nconst specMarkdown = require('spec-md');\nconst html = specMarkdown.html('./path/to/markdown.md');\nfs.writeFileSync('./path/to/output.html', html);\n"
        },
        {
          "type": "Paragraph",
          "contents": [
            {
              "type": "Text",
              "value": "The "
            },
            {
              "type": "InlineCode",
              "code": "spec-md"
            },
            {
              "type": "Text",
              "value": " node module provides a few functions:"
            }
          ]
        },
        {
          "type": "List",
          "ordered": false,
          "items": [
            {
              "type": "ListItem",
              "contents": [
                {
                  "type": "Call",
                  "name": "html",
                  "args": [
                    {
                      "type": "Variable",
                      "name": "filePath"
                    },
                    {
                      "type": "Variable",
                      "name": "options"
                    }
                  ]
                },
                {
                  "type": "Text",
                  "value": " takes a "
                },
                {
                  "type": "Variable",
                  "name": "filepath"
                },
                {
                  "type": "Text",
                  "value": " to a Markdown file and returns an HTML string. This function is the primary usage of the "
                },
                {
                  "type": "InlineCode",
                  "code": "spec-md"
                },
                {
                  "type": "Text",
                  "value": " module."
                }
              ]
            },
            {
              "type": "ListItem",
              "contents": [
                {
                  "type": "Call",
                  "name": "parse",
                  "args": [
                    {
                      "type": "Variable",
                      "name": "filePath"
                    }
                  ]
                },
                {
                  "type": "Text",
                  "value": " takes a filepath and returns an AST "
                },
                {
                  "type": "Italic",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "(Abstract Syntax Tree)"
                    }
                  ]
                },
                {
                  "type": "Text",
                  "value": " representing the contents of the Spec Markdown file, with all imports already inlined."
                }
              ]
            },
            {
              "type": "ListItem",
              "contents": [
                {
                  "type": "Call",
                  "name": "print",
                  "args": [
                    {
                      "type": "Variable",
                      "name": "ast"
                    },
                    {
                      "type": "Variable",
                      "name": "options"
                    }
                  ]
                },
                {
                  "type": "Text",
                  "value": " takes an "
                },
                {
                  "type": "Variable",
                  "name": "ast"
                },
                {
                  "type": "Text",
                  "value": " produced by parse() and returns an HTML string."
                }
              ]
            },
            {
              "type": "ListItem",
              "contents": [
                {
                  "type": "Call",
                  "name": "visit",
                  "args": [
                    {
                      "type": "Variable",
                      "name": "ast"
                    },
                    {
                      "type": "Variable",
                      "name": "visitor"
                    }
                  ]
                },
                {
                  "type": "Text",
                  "value": " takes an "
                },
                {
                  "type": "Variable",
                  "name": "ast"
                },
                {
                  "type": "Text",
                  "value": " and a "
                },
                {
                  "type": "Variable",
                  "name": "visitor"
                },
                {
                  "type": "Text",
                  "value": ". It walks over the "
                },
                {
                  "type": "Variable",
                  "name": "ast"
                },
                {
                  "type": "Text",
                  "value": " in a depth-first-traversal calling the "
                },
                {
                  "type": "Variable",
                  "name": "visitor"
                },
                {
                  "type": "Text",
                  "value": " along the way."
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Print Options"
          },
          "contents": [
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "The "
                },
                {
                  "type": "Call",
                  "name": "html",
                  "args": [
                    {
                      "type": "Variable",
                      "name": "filePath"
                    },
                    {
                      "type": "Variable",
                      "name": "options"
                    }
                  ]
                },
                {
                  "type": "Text",
                  "value": " and "
                },
                {
                  "type": "Call",
                  "name": "print",
                  "args": [
                    {
                      "type": "Variable",
                      "name": "filePath"
                    }
                  ]
                },
                {
                  "type": "Text",
                  "value": " functions both take "
                },
                {
                  "type": "Variable",
                  "name": "options"
                },
                {
                  "type": "Text",
                  "value": " as an optional second argument. These options allow for customization control over the returned HTML, more options may be added in the future."
                }
              ]
            },
            {
              "type": "List",
              "ordered": false,
              "items": [
                {
                  "type": "ListItem",
                  "contents": [
                    {
                      "type": "Bold",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "githubSource"
                        }
                      ]
                    },
                    {
                      "type": "Text",
                      "value": " - a base URL, that if provided will be used to construct Github source links to the original Markdown files throughout the returned HTML. (example: “https://github.com/leebyron/spec-md/blame/main/”)"
                    }
                  ]
                },
                {
                  "type": "ListItem",
                  "contents": [
                    {
                      "type": "Bold",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "highlight"
                        }
                      ]
                    },
                    {
                      "type": "Text",
                      "value": " - a function which is called when blocks of code are encountered, with the first argument as the string of code, the second argument being the language specified. This function should return well formed HTML, complete with escaped special characters."
                    }
                  ]
                },
                {
                  "type": "ListItem",
                  "contents": [
                    {
                      "type": "Bold",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "head"
                        }
                      ]
                    },
                    {
                      "type": "Text",
                      "value": " - a string which is inserted in the "
                    },
                    {
                      "type": "InlineCode",
                      "code": "<head>"
                    },
                    {
                      "type": "Text",
                      "value": " tag in the returned HTML. Use this to introduce additional meta tags and scripts."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Note",
              "contents": [
                {
                  "type": "Text",
                  "value": "When using "
                },
                {
                  "type": "Bold",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "githubSource"
                    }
                  ]
                },
                {
                  "type": "Text",
                  "value": " take note that normal Github view (eg. “blob” instead of “blame”) show rendered instead of source markdown and cannot link to specific lines."
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Hot rebuilding with nodemon"
          },
          "contents": [
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "The "
                },
                {
                  "type": "InlineCode",
                  "code": "spec-md"
                },
                {
                  "type": "Text",
                  "value": " shell executable follows the "
                },
                {
                  "type": "Link",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Unix Philosophy"
                    }
                  ],
                  "url": "http://www.faqs.org/docs/artu/ch01s06.html",
                  "title": null
                },
                {
                  "type": "Text",
                  "value": " of doing one thing and doing it well. Try out "
                },
                {
                  "type": "InlineCode",
                  "code": "nodemon"
                },
                {
                  "type": "Text",
                  "value": " to continuously rebuild the HTML output as you edit the markdown specification:"
                }
              ]
            },
            {
              "type": "Code",
              "raw": false,
              "lang": "sh",
              "example": false,
              "counter": false,
              "code": "npm install -g nodemon\nnodemon --exec \"spec-md > ./path/to/output.html\" ./path/to/markdown.md\n"
            }
          ]
        }
      ]
    },
    {
      "type": "Section",
      "header": {
        "type": "Header",
        "level": 1,
        "secID": null,
        "title": "Contributing to Spec Markdown"
      },
      "contents": [
        {
          "type": "Paragraph",
          "contents": [
            {
              "type": "Text",
              "value": "We want to make contributing to this project as easy and transparent as possible. Hopefully this document makes the process for contributing clear and answers any questions you may have. If not, feel free to open an "
            },
            {
              "type": "Link",
              "contents": [
                {
                  "type": "Text",
                  "value": "Issue"
                }
              ],
              "url": "https://github.com/leebyron/spec-md/issues",
              "title": null
            },
            {
              "type": "Text",
              "value": "."
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Pull Requests"
          },
          "contents": [
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "All active development of Spec Markdown happens on GitHub. We actively welcome your "
                },
                {
                  "type": "Link",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "pull requests"
                    }
                  ],
                  "url": "https://help.github.com/articles/creating-a-pull-request",
                  "title": null
                },
                {
                  "type": "Text",
                  "value": "."
                }
              ]
            },
            {
              "type": "List",
              "ordered": true,
              "items": [
                {
                  "type": "ListItem",
                  "contents": [
                    {
                      "type": "Link",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Fork the repo"
                        }
                      ],
                      "url": "https://github.com/leebyron/spec-md/",
                      "title": null
                    },
                    {
                      "type": "Text",
                      "value": " and create your branch from "
                    },
                    {
                      "type": "InlineCode",
                      "code": "main"
                    },
                    {
                      "type": "Text",
                      "value": "."
                    }
                  ]
                },
                {
                  "type": "ListItem",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Install all dependencies. ("
                    },
                    {
                      "type": "InlineCode",
                      "code": "npm install"
                    },
                    {
                      "type": "Text",
                      "value": ")"
                    }
                  ]
                },
                {
                  "type": "ListItem",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "If you’ve added code, add tests."
                    }
                  ]
                },
                {
                  "type": "ListItem",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "If you’ve changed APIs, update the documentation."
                    }
                  ]
                },
                {
                  "type": "ListItem",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Run tests and ensure your code passes lint. ("
                    },
                    {
                      "type": "InlineCode",
                      "code": "npm test"
                    },
                    {
                      "type": "Text",
                      "value": ")"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "`main` is unsafe"
          },
          "contents": [
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "We will do our best to keep "
                },
                {
                  "type": "InlineCode",
                  "code": "main"
                },
                {
                  "type": "Text",
                  "value": " in good shape, with tests passing at all times. But in order to move fast, we might make API changes that your application might not be compatible with. We will do our best to communicate these changes and always "
                },
                {
                  "type": "Link",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "version"
                    }
                  ],
                  "url": "http://semver.org/",
                  "title": null
                },
                {
                  "type": "Text",
                  "value": " appropriately so you can lock into a specific version if need be. If any of this is worrysome to you, just use "
                },
                {
                  "type": "Link",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "npm"
                    }
                  ],
                  "url": "https://www.npmjs.org/package/spec-md",
                  "title": null
                },
                {
                  "type": "Text",
                  "value": "."
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Issues"
          },
          "contents": [
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "We use GitHub issues to track public bugs and requests. Please ensure your bug description is clear and has sufficient instructions to be able to reproduce the issue. The best way is to provide a reduced test case on jsFiddle or jsBin."
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Coding Style"
          },
          "contents": [
            {
              "type": "List",
              "ordered": false,
              "items": [
                {
                  "type": "ListItem",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "2 spaces for indentation (no tabs)"
                    }
                  ]
                },
                {
                  "type": "ListItem",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "80 character line length strongly preferred."
                    }
                  ]
                },
                {
                  "type": "ListItem",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Prefer "
                    },
                    {
                      "type": "InlineCode",
                      "code": "'"
                    },
                    {
                      "type": "Text",
                      "value": " over "
                    },
                    {
                      "type": "InlineCode",
                      "code": "\""
                    }
                  ]
                },
                {
                  "type": "ListItem",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Use semicolons;"
                    }
                  ]
                },
                {
                  "type": "ListItem",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Trailing commas,"
                    }
                  ]
                },
                {
                  "type": "ListItem",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Avd abbr wrds."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "License"
          },
          "contents": [
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "By contributing to Spec Markdown, you agree that your contributions will be licensed under its MIT license. "
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}