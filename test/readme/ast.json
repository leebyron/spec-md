{
  "type": "Document",
  "title": {
    "type": "DocumentTitle",
    "value": "Spec Markdown"
  },
  "contents": [
    {
      "type": "Paragraph",
      "contents": [
        {
          "type": "Text",
          "value": "Renders Markdown with some additions into an HTML format commonly used for\nwriting technical specification documents. Markdown additions include code\nsyntax highlighting, edit annotations, and the definition of algorithms and\ngrammar productions."
        }
      ]
    },
    {
      "type": "Subsection",
      "title": "Philosophy",
      "contents": [
        {
          "type": "Paragraph",
          "contents": [
            {
              "type": "Text",
              "value": "Spec Markdown is first and foremost Markdown. As such, it follows Markdown's\nphilosophy of intending to be as easy to read and easy to write as is feasible."
            }
          ]
        },
        {
          "type": "Paragraph",
          "contents": [
            {
              "type": "Text",
              "value": "In order to interoperate with other tools which use Markdown, Spec Markdown\ntries to add as little additional syntax as possible, instead preferring\nconventions. This means any documents written with Spec Markdown in mind should\nrender adequately by other Markdown renderers."
            }
          ]
        },
        {
          "type": "Paragraph",
          "contents": [
            {
              "type": "Text",
              "value": "To support the rendering additions of Spec Markdown, some features of Markdown\nmay be limited or removed. As an example, Spec Markdown is strict about the\norder and locations of headers in a document."
            }
          ]
        },
        {
          "type": "Note",
          "contents": [
            {
              "type": "Text",
              "value": "This is not a normative spec for Spec Markdown, but just documentation of\nthis tool. Of course, written in Spec Markdown!"
            }
          ]
        }
      ]
    },
    {
      "type": "Section",
      "secID": null,
      "title": "Getting Started",
      "contents": [
        {
          "type": "Paragraph",
          "contents": [
            {
              "type": "Text",
              "value": "To use Spec Markdown, just write Markdown files. There are some conventions used\nby Spec Markdown which you can read about in "
            },
            {
              "type": "Link",
              "contents": [
                {
                  "type": "Text",
                  "value": "Spec additions"
                }
              ],
              "url": "#sec-Spec-Additions"
            },
            {
              "type": "Text",
              "value": "."
            }
          ]
        },
        {
          "type": "Paragraph",
          "contents": [
            {
              "type": "Text",
              "value": "To convert your Markdown files into an HTML spec document, use the "
            },
            {
              "type": "InlineCode",
              "code": "spec-md"
            },
            {
              "type": "Text",
              "value": "\nutility."
            }
          ]
        },
        {
          "type": "Code",
          "raw": false,
          "lang": "sh",
          "example": false,
          "counter": false,
          "code": "npm install -g spec-md\nspec-md ./path/to/markdown.md > ./path/to/output.html\n"
        },
        {
          "type": "Paragraph",
          "contents": [
            {
              "type": "Text",
              "value": "You can also require "
            },
            {
              "type": "InlineCode",
              "code": "spec-md"
            },
            {
              "type": "Text",
              "value": " as a node module."
            }
          ]
        },
        {
          "type": "Code",
          "raw": false,
          "lang": "sh",
          "example": false,
          "counter": false,
          "code": "npm install --save-dev spec-md\n"
        },
        {
          "type": "Code",
          "raw": false,
          "lang": "js",
          "example": false,
          "counter": false,
          "code": "const fs = require('fs');\nconst specMarkdown = require('spec-md');\nspecMarkdown.html('./path/to/markdown.md').then(html => {\n  fs.writeFile('./path/to/output.html', html);\n});\n"
        },
        {
          "type": "Paragraph",
          "contents": [
            {
              "type": "Text",
              "value": "Spec Markdown also provides utilities for generating and operating on an\nintermediate representation of the markdown, which you can explore in\n"
            },
            {
              "type": "Link",
              "contents": [
                {
                  "type": "Text",
                  "value": "Using Spec Markdown"
                }
              ],
              "url": "#sec-Using-Spec-Markdown"
            },
            {
              "type": "Text",
              "value": "."
            }
          ]
        }
      ]
    },
    {
      "type": "Section",
      "secID": null,
      "title": "Markdown",
      "contents": [
        {
          "type": "Paragraph",
          "contents": [
            {
              "type": "Text",
              "value": "Spec Markdown is first and foremost "
            },
            {
              "type": "Link",
              "contents": [
                {
                  "type": "Text",
                  "value": "Markdown"
                }
              ],
              "url": "http://daringfireball.net/projects/markdown/syntax"
            },
            {
              "type": "Text",
              "value": ".\nMore specifically, it's based on "
            },
            {
              "type": "Link",
              "contents": [
                {
                  "type": "Text",
                  "value": "Github-flavored Markdown"
                }
              ],
              "url": "https://help.github.com/articles/github-flavored-markdown/"
            },
            {
              "type": "Text",
              "value": "."
            }
          ]
        },
        {
          "type": "Paragraph",
          "contents": [
            {
              "type": "Text",
              "value": "This section explains the syntax and capabilities of Markdown that Spec Markdown\nsupports and augments."
            }
          ]
        },
        {
          "type": "Section",
          "secID": null,
          "title": "Character Encoding",
          "contents": [
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Markdown allows you to write text which uses &, <, and >. The output HTML will\nautomatically use the "
                },
                {
                  "type": "InlineCode",
                  "code": "&amp;"
                },
                {
                  "type": "Text",
                  "value": ", "
                },
                {
                  "type": "InlineCode",
                  "code": "&lt;"
                },
                {
                  "type": "Text",
                  "value": ", and "
                },
                {
                  "type": "InlineCode",
                  "code": "&gt;"
                },
                {
                  "type": "Text",
                  "value": " entities."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Well formed HTML entities can be written inline directly. If you write "
                },
                {
                  "type": "InlineCode",
                  "code": "&copy;"
                },
                {
                  "type": "Text",
                  "value": ",\nit will appear in the HTML output as &copy;."
                }
              ]
            },
            {
              "type": "Section",
              "secID": null,
              "title": "Escape sequence",
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Markdown makes use of certain characters to format text, in order to render one\nexplicitly, place a backslash before it."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "You can type \\*literal asterisks\\* instead of emphasis by typing\n"
                    },
                    {
                      "type": "InlineCode",
                      "code": "\\*literal asterisks\\*"
                    },
                    {
                      "type": "Text",
                      "value": "."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Escaping does not apply within code."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Spec Markdown provides backslash escapes for the following characters:"
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": false,
                  "counter": false,
                  "code": "\\   backslash\n`   backtick\n*   asterisk\n_   underscore\n{}  curly braces\n[]  square brackets\n()  parentheses\n#   hash mark\n+   plus sign\n-   minus sign (hyphen)\n.   dot\n!   exclamation mark\n<   less-than    <-- added in Spec Markdown\n>   greater-than <-- added in Spec Markdown\n|   pipe         <-- added in Spec Markdown\n"
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "secID": null,
          "title": "Inline formatting",
          "contents": [
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Markdown allows for inline stylistic and structual formatting. Inline\nformatting is allowed in paragraphs, list items, and table cells."
                }
              ]
            },
            {
              "type": "Section",
              "secID": null,
              "title": "Inline HTML",
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Markdown is not a replacement for HTML and instead leverages HTML by allowing\nits use inline within paragraphs, links, etc."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "This code has "
                    },
                    {
                      "type": "HTMLTag",
                      "tag": "<blink>"
                    },
                    {
                      "type": "Text",
                      "value": "blinking"
                    },
                    {
                      "type": "HTMLTag",
                      "tag": "</blink>"
                    },
                    {
                      "type": "Text",
                      "value": " and "
                    },
                    {
                      "type": "HTMLTag",
                      "tag": "<em>"
                    },
                    {
                      "type": "Text",
                      "value": "emphasized"
                    },
                    {
                      "type": "HTMLTag",
                      "tag": "</em>"
                    },
                    {
                      "type": "Text",
                      "value": " formatting."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Markdown syntax can continue to be "
                    },
                    {
                      "type": "HTMLTag",
                      "tag": "<u>"
                    },
                    {
                      "type": "Text",
                      "value": "used "
                    },
                    {
                      "type": "Italic",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "within"
                        }
                      ]
                    },
                    {
                      "type": "Text",
                      "value": " inline HTML"
                    },
                    {
                      "type": "HTMLTag",
                      "tag": "</u>"
                    },
                    {
                      "type": "Text",
                      "value": "."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "secID": null,
              "title": "Links",
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Use "
                    },
                    {
                      "type": "InlineCode",
                      "code": "[ ]"
                    },
                    {
                      "type": "Text",
                      "value": " square brackets to indicate linked text followed immediately by "
                    },
                    {
                      "type": "InlineCode",
                      "code": "( )"
                    },
                    {
                      "type": "Text",
                      "value": "\nparenthesis to describe the URL the text will link to."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "The linked text can contain any other inline formatting."
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": false,
                  "counter": false,
                  "code": "This is an [-->*example*<--](https://www.facebook.com) of a link.\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Produces the following:"
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "This is an "
                    },
                    {
                      "type": "Link",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "-->"
                        },
                        {
                          "type": "Italic",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "example"
                            }
                          ]
                        },
                        {
                          "type": "Text",
                          "value": "<--"
                        }
                      ],
                      "url": "https://www.facebook.com"
                    },
                    {
                      "type": "Text",
                      "value": " of a link."
                    }
                  ]
                },
                {
                  "type": "Todo",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Links do not yet support a reference style short-form."
                    }
                  ]
                },
                {
                  "type": "Todo",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Links do not yet support a title attribute."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "secID": null,
              "title": "Emphasis",
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Wrapping asterisks "
                    },
                    {
                      "type": "Italic",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "(\\*)"
                        }
                      ]
                    },
                    {
                      "type": "Text",
                      "value": " indicate emphasis."
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": false,
                  "counter": false,
                  "code": "Example of **bold** and *italic* and ***bold italic***.\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Produces the following:"
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Example of "
                    },
                    {
                      "type": "Bold",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "bold"
                        }
                      ]
                    },
                    {
                      "type": "Text",
                      "value": " and "
                    },
                    {
                      "type": "Italic",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "italic"
                        }
                      ]
                    },
                    {
                      "type": "Text",
                      "value": " and "
                    },
                    {
                      "type": "Bold",
                      "contents": [
                        {
                          "type": "Italic",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "bold italic"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "Text",
                      "value": "."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Alternatively, use underscore "
                    },
                    {
                      "type": "Italic",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "(\\_)"
                        }
                      ]
                    },
                    {
                      "type": "Text",
                      "value": " for italic emphasis."
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": false,
                  "counter": false,
                  "code": "Example of _italic_ and **_bold italic_** or _**bold italic**_.\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Produces the following:"
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Example of "
                    },
                    {
                      "type": "Italic",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "italic"
                        }
                      ]
                    },
                    {
                      "type": "Text",
                      "value": " and "
                    },
                    {
                      "type": "Bold",
                      "contents": [
                        {
                          "type": "Italic",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "bold italic"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "Text",
                      "value": " or "
                    },
                    {
                      "type": "Italic",
                      "contents": [
                        {
                          "type": "Bold",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "bold italic"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "Text",
                      "value": "."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "secID": null,
              "title": "Inline Code",
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Wrapping back-ticks "
                    },
                    {
                      "type": "Italic",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "(\\`)"
                        }
                      ]
                    },
                    {
                      "type": "Text",
                      "value": " indicate inline code, text inside back-ticks is not\nformatted, allowing for special characters to be used in inline code without\nescapes."
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": false,
                  "counter": false,
                  "code": "This is an `example` of some inline code.\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Produces"
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "This is an "
                    },
                    {
                      "type": "InlineCode",
                      "code": "example"
                    },
                    {
                      "type": "Text",
                      "value": " of some inline code."
                    }
                  ]
                },
                {
                  "type": "Todo",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Markdown's double-back-tick syntax is not yet supported."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "secID": null,
              "title": "Images",
              "contents": [
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": false,
                  "counter": false,
                  "code": "![Specs](http://i.imgur.com/aV8o3rE.png)\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Produces the following:"
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Image",
                      "alt": "Specs",
                      "url": "http://i.imgur.com/aV8o3rE.png"
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Also, consider using images for support of more complex features like\ngraph diagrams. For example, with Graviso:"
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": false,
                  "counter": false,
                  "code": "![How spec-md works](http://g.gravizo.com/svg?\n  digraph specmd {\n    markdown [shape=box];\n    ast [shape=box];\n    html [shape=box];\n    markdown -> parse [weight=8];\n    parse -> ast;\n    ast -> print;\n    edge [color=red];\n    print -> html;\n  }\n)\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Produces the following:"
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Image",
                      "alt": "How spec-md works",
                      "url": "http://g.gravizo.com/svg?\n  digraph specmd {\n    markdown [shape=box];\n    ast [shape=box];\n    html [shape=box];\n    markdown -> parse [weight=8];\n    parse -> ast;\n    ast -> print;\n    edge [color=red];\n    print -> html;\n  }\n"
                    }
                  ]
                },
                {
                  "type": "Todo",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "the title attribute is not yet supported"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "secID": null,
          "title": "Blocks",
          "contents": [
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Markdown allows for block-level structual formatting. Every block is seperated\nby at least two new lines. Spec Markdown makes use of Markdown's blocks to\nproduce more specific structural formatting."
                }
              ]
            },
            {
              "type": "Section",
              "secID": null,
              "title": "Block HTML",
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Markdown is not a replacement for HTML and instead leverages HTML by allowing\nits use as complete blocks when separated from surrounding content by blank\nlines."
                    }
                  ]
                },
                {
                  "type": "Note",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Markdown formatting syntax is not processed within block-level HTML tags."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "For example, to add an HTML table to a Markdown article:"
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": false,
                  "counter": false,
                  "code": "Unrelated previous paragraph followed by a blank line\n\n<table>\n<tr>\n<td>Table cell</td>\n<td>\n\n<table>\n<tr>\n<td>*Tables in tables*</td>\n</tr>\n</table>\n\n</td>\n</tr>\n</table>\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Produces the following:"
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Unrelated previous paragraph followed by a blank line"
                    }
                  ]
                },
                {
                  "type": "HTMLBlock",
                  "name": "table",
                  "html": "<table>\n<tr>\n<td>Table cell</td>\n<td>\n\n<table>\n<tr>\n  <td>*Tables in tables*</td>\n</tr>\n</table>\n\n</td>\n</tr>\n</table>"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "And using "
                    },
                    {
                      "type": "InlineCode",
                      "code": "<pre>"
                    },
                    {
                      "type": "Text",
                      "value": " produces a simple code block:"
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": false,
                  "counter": false,
                  "code": "<pre>\nBuffalo Bill ’s\ndefunct\n       who used to\n       ride a watersmooth-silver\n                                stallion\nand break onetwothreefourfive pigeonsjustlikethat\n                                                 Jesus\nhe was a handsome man\n                     and what i want to know is\nhow do you like your blueeyed boy\nMister Death\n</pre>\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Produces the following:"
                    }
                  ]
                },
                {
                  "type": "HTMLBlock",
                  "name": "pre",
                  "html": "<pre>\nBuffalo Bill ’s\ndefunct\n       who used to\n       ride a watersmooth-silver\n                                stallion\nand break onetwothreefourfive pigeonsjustlikethat\n                                                 Jesus\nhe was a handsome man\n                     and what i want to know is\nhow do you like your blueeyed boy\nMister Death\n</pre>"
                }
              ]
            },
            {
              "type": "Section",
              "secID": null,
              "title": "Section Headers",
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Regular Markdown supports two styles of headers, Setext and atx, however Spec\nMarkdown generally only supports atx style headers."
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": true,
                  "counter": false,
                  "code": "# Header\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Setext headers are not supported by Spec Markdown."
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": true,
                  "counter": true,
                  "code": "Header\n------\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "The number of "
                    },
                    {
                      "type": "InlineCode",
                      "code": "#"
                    },
                    {
                      "type": "Text",
                      "value": " characters refers to the depth of the section. To produce an,\n"
                    },
                    {
                      "type": "InlineCode",
                      "code": "<h3>"
                    },
                    {
                      "type": "Text",
                      "value": ", type "
                    },
                    {
                      "type": "InlineCode",
                      "code": "###"
                    },
                    {
                      "type": "Text",
                      "value": ". Optionally, a header may be \"closed\" by any number of "
                    },
                    {
                      "type": "InlineCode",
                      "code": "#"
                    },
                    {
                      "type": "Text",
                      "value": "\ncharacters."
                    }
                  ]
                },
                {
                  "type": "Note",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Spec Markdown requires that documents start with "
                    },
                    {
                      "type": "InlineCode",
                      "code": "#"
                    },
                    {
                      "type": "Text",
                      "value": " and that each section\ncontained within is only one level deeper. An \\<h1> section may only contain\n\\<h2> sections."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "secID": null,
              "title": "Paragraphs",
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Paragraphs are the most simple Markdown blocks. Lines are appended together to\nform a single \\<p> tag. Any inline syntax is allowed within a paragraph."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "secID": null,
              "title": "Lists",
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Markdown lists are lines which each start with either a ordered bullet "
                    },
                    {
                      "type": "InlineCode",
                      "code": "1."
                    },
                    {
                      "type": "Text",
                      "value": " or\nunordered bullet, "
                    },
                    {
                      "type": "InlineCode",
                      "code": "*"
                    },
                    {
                      "type": "Text",
                      "value": ", "
                    },
                    {
                      "type": "InlineCode",
                      "code": "-"
                    },
                    {
                      "type": "Text",
                      "value": ", or "
                    },
                    {
                      "type": "InlineCode",
                      "code": "+"
                    },
                    {
                      "type": "Text",
                      "value": ". Lists are optionally indented by two spaces."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Lists can be nested within other lists by indenting by at least two spaces."
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": true,
                  "counter": false,
                  "code": "  1. this\n  2. is\n  3. a\n    - nested\n  4. list\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Produces the following:"
                    }
                  ]
                },
                {
                  "type": "List",
                  "ordered": true,
                  "items": [
                    {
                      "type": "ListItem",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "this"
                        }
                      ]
                    },
                    {
                      "type": "ListItem",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "is"
                        }
                      ]
                    },
                    {
                      "type": "ListItem",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "a"
                        },
                        {
                          "type": "List",
                          "ordered": false,
                          "items": [
                            {
                              "type": "ListItem",
                              "contents": [
                                {
                                  "type": "Text",
                                  "value": "nested"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "ListItem",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "list"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "secID": null,
              "title": "Code Block",
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "A block of code is formed by either indenting by 4 spaces, or wrapping with\n"
                    },
                    {
                      "type": "HTMLTag",
                      "tag": "<code>"
                    },
                    {
                      "type": "Text",
                      "value": "\\`\\`\\`"
                    },
                    {
                      "type": "HTMLTag",
                      "tag": "</code>"
                    },
                    {
                      "type": "Text",
                      "value": " on their own lines."
                    }
                  ]
                },
                {
                  "type": "Code",
                  "code": "```\nconst code = sample();\n```"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Produces the following:"
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": false,
                  "counter": false,
                  "code": "const code = sample();\n"
                }
              ]
            },
            {
              "type": "Section",
              "secID": null,
              "title": "Block Quotes",
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Spec markdown does not yet support Markdown's "
                    },
                    {
                      "type": "InlineCode",
                      "code": ">"
                    },
                    {
                      "type": "Text",
                      "value": " style block quotes."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "secID": null,
              "title": "Horizontal Rules",
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Spec Markdown does not yet support Markdown's "
                    },
                    {
                      "type": "InlineCode",
                      "code": "---"
                    },
                    {
                      "type": "Text",
                      "value": " style \\<hr>."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "secID": null,
              "title": "Automatic Links",
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Spec Markdown does not yet automatically link urls.\n"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "Section",
      "secID": null,
      "title": "Spec Additions",
      "contents": [
        {
          "type": "Paragraph",
          "contents": [
            {
              "type": "Text",
              "value": "Spec Markdown makes some additions to Markdown to support cases relevant to\nwriting technical specs and documentation. It attempts to be as minimally\ninvasive as possible, leveraging existing Markdown formatting features whenever\npossible so Spec Markdown documents may render adequately as regular Markdown."
            }
          ]
        },
        {
          "type": "Paragraph",
          "contents": [
            {
              "type": "Text",
              "value": "Spec Markdown also makes restrictions to the overall format of the Markdown\ndocument in order to derive a structure to the entire document."
            }
          ]
        },
        {
          "type": "Section",
          "secID": null,
          "title": "Link Anything",
          "contents": [
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Everything unique in a Spec Markdown file has a link created for it. Sections\neach have a link, as do named "
                },
                {
                  "type": "Link",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Algorithms"
                    }
                  ],
                  "url": "#sec-Algorithms"
                },
                {
                  "type": "Text",
                  "value": " and\n"
                },
                {
                  "type": "Link",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Grammar"
                    }
                  ],
                  "url": "#sec-Grammar"
                },
                {
                  "type": "Text",
                  "value": ". You'll find that "
                },
                {
                  "type": "Link",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Notes"
                    }
                  ],
                  "url": "#sec-Note"
                },
                {
                  "type": "Text",
                  "value": " and\n"
                },
                {
                  "type": "Link",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Examples"
                    }
                  ],
                  "url": "#sec-Examples"
                },
                {
                  "type": "Text",
                  "value": " are also given stable links based on their contents,\njust in case things move around."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "However, you can also link "
                },
                {
                  "type": "Italic",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "anything"
                    }
                  ]
                },
                {
                  "type": "Text",
                  "value": " in a Spec Markdown file. Just highlight\nany bit of text and a link will be created just for that selection, making\nreferencing specific parts of your document easy. Try it here!"
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "secID": null,
          "title": "Title and Introduction",
          "contents": [
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "A Spec Markdown document should start with one Setext style header which will be\nused as the title of the document. Any content before the first atx ("
                },
                {
                  "type": "InlineCode",
                  "code": "#"
                },
                {
                  "type": "Text",
                  "value": ") style\nheader will become the introduction to the document."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "A Spec Markdown document starts in this form:"
                }
              ]
            },
            {
              "type": "Code",
              "raw": false,
              "lang": null,
              "example": false,
              "counter": false,
              "code": "Spec Markdown\n-------------\n\nIntroductory paragraph.\n\n# First Section Header\n"
            }
          ]
        },
        {
          "type": "Section",
          "secID": null,
          "title": "Sections",
          "contents": [
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "A Spec Markdown document is separated into a sequence and hierarchy of sections.\nThose sections can then be used as navigation points and can be used to create\na table of contents. A section is started by a header and ends at either the\nnext header of similar or greater precedence or the end of the document. A\nsection can contain other sections if their headers are of lower precedence."
                }
              ]
            },
            {
              "type": "Section",
              "secID": null,
              "title": "Section Headers",
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Regular Markdown supports two styles of headers, Setext and atx, however Spec\nMarkdown only supports atx style headers as section headers."
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": false,
                  "counter": false,
                  "code": "# Header\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Only use Setext style headers for the title of the document."
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": true,
                  "counter": true,
                  "code": "Header\n------\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Spec Markdown also requires that only single "
                    },
                    {
                      "type": "InlineCode",
                      "code": "#"
                    },
                    {
                      "type": "Text",
                      "value": " headers appear at the top of a\ndocument, and that only a "
                    },
                    {
                      "type": "InlineCode",
                      "code": "##"
                    },
                    {
                      "type": "Text",
                      "value": " header (and not a "
                    },
                    {
                      "type": "InlineCode",
                      "code": "###"
                    },
                    {
                      "type": "Text",
                      "value": " header) can be contained\nwith the section started by a "
                    },
                    {
                      "type": "InlineCode",
                      "code": "#"
                    },
                    {
                      "type": "Text",
                      "value": " header."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "secID": null,
              "title": "Subsection Headers",
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "While sections are numbered and appear in the table of contents, a subsection\nis similar but not numbered or in the table of contents."
                    }
                  ]
                },
                {
                  "type": "Subsection",
                  "title": "This is a subsection",
                  "contents": [
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "The subsection's content appears below the subsection header."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "Subsection",
                  "title": "Another subsection",
                  "contents": [
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Sections may contain multiple subsections, but subsections cannot contain\nsections or subsections."
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "secID": null,
              "title": "Table of Contents",
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "A table of contents is automatically generated from the hierarchy of sections in\nthe Spec Markdown document."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "secID": null,
              "title": "Section Numbers",
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "A number is associated with each section, starting with 1. In a hierarchy of\nsections, the parent sections are joined with dots. This provides an unambiguous\nlocation identifier for a given section in a document."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "You can specify these section numbers directly in your Markdown documents if you\nwish by writing them directly after the "
                    },
                    {
                      "type": "InlineCode",
                      "code": "#"
                    },
                    {
                      "type": "Text",
                      "value": " and before the text of the header."
                    }
                  ]
                },
                {
                  "type": "Section",
                  "secID": [
                    "3",
                    "2",
                    "3",
                    "8"
                  ],
                  "title": "Custom Numbers",
                  "contents": [
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "If the section number is written in the document, the last number will be used\nas the number for that section. This is useful when writing a proposal against\nan existing spec and wish to reference a particular section."
                        }
                      ]
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "The header for this section was written as"
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": null,
                      "example": false,
                      "counter": false,
                      "code": "#### 3.2.3.8. Custom Numbers\n"
                    }
                  ]
                },
                {
                  "type": "Section",
                  "secID": null,
                  "title": "Appendix / Annex Sections",
                  "contents": [
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "If a top level section is written with a letter, such as "
                        },
                        {
                          "type": "InlineCode",
                          "code": "A"
                        },
                        {
                          "type": "Text",
                          "value": " instead of a\nnumber, that will begin an Appendix section."
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": null,
                      "example": false,
                      "counter": false,
                      "code": "# A. Appendix: Grammar\n"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "secID": null,
          "title": "Smart Characters",
          "contents": [
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "The Spec Markdown renderer will replace easy to type characters like quotes and\ndashes with their appropriate typographic entities. These replacements will not\noccur within blocks of code."
                }
              ]
            },
            {
              "type": "Section",
              "secID": null,
              "title": "Quotes and Dashes",
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Prose text has \"smart quotes\", hyphens, en-dashes and em-dashes--you shouldn't\nhave to think about it, they'll just work."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "For example, a quote of a quote (with an inner apostrophe and emphasis for flair):"
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "InlineCode",
                      "code": "\"She told me that 'he isn't here right *now*' - so I left.\""
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Will render as:"
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "\"She told me that 'he isn't here right "
                    },
                    {
                      "type": "Italic",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "now"
                        }
                      ]
                    },
                    {
                      "type": "Text",
                      "value": "' - so I left.\""
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "secID": null,
              "title": "Math",
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Math operators like >=, <=, and ~= can be written as "
                    },
                    {
                      "type": "InlineCode",
                      "code": ">="
                    },
                    {
                      "type": "Text",
                      "value": ", "
                    },
                    {
                      "type": "InlineCode",
                      "code": "<="
                    },
                    {
                      "type": "Text",
                      "value": ", and "
                    },
                    {
                      "type": "InlineCode",
                      "code": "~="
                    },
                    {
                      "type": "Text",
                      "value": "."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "secID": null,
              "title": "Arrows",
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Smart arrows -> and <- and <-> can be written as "
                    },
                    {
                      "type": "InlineCode",
                      "code": "->"
                    },
                    {
                      "type": "Text",
                      "value": ", "
                    },
                    {
                      "type": "InlineCode",
                      "code": "<-"
                    },
                    {
                      "type": "Text",
                      "value": " and "
                    },
                    {
                      "type": "InlineCode",
                      "code": "<->"
                    },
                    {
                      "type": "Text",
                      "value": "."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Fat smart arrows => and <== and <=> can be written as "
                    },
                    {
                      "type": "InlineCode",
                      "code": "=>"
                    },
                    {
                      "type": "Text",
                      "value": ", "
                    },
                    {
                      "type": "InlineCode",
                      "code": "<=="
                    },
                    {
                      "type": "Text",
                      "value": " and "
                    },
                    {
                      "type": "InlineCode",
                      "code": "<=>"
                    },
                    {
                      "type": "Text",
                      "value": "."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "secID": null,
              "title": "Additional escape sequence",
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Spec Markdown allows escaping \\< \\> and \\| character with "
                    },
                    {
                      "type": "InlineCode",
                      "code": "\\>"
                    },
                    {
                      "type": "Text",
                      "value": ", "
                    },
                    {
                      "type": "InlineCode",
                      "code": "\\<"
                    },
                    {
                      "type": "Text",
                      "value": ",\nand "
                    },
                    {
                      "type": "InlineCode",
                      "code": "\\|"
                    },
                    {
                      "type": "Text",
                      "value": "."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "secID": null,
              "title": "Tables",
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Similar to Github flavored Markdown"
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": false,
                  "counter": false,
                  "code": "| This | is a | table |\n| ---- | ---- | ----- |\n| key  | val  | etc   |\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Produces the following:"
                    }
                  ]
                },
                {
                  "type": "Table",
                  "headers": [
                    [
                      {
                        "type": "Text",
                        "value": "This "
                      }
                    ],
                    [
                      {
                        "type": "Text",
                        "value": "is a "
                      }
                    ],
                    [
                      {
                        "type": "Text",
                        "value": "table "
                      }
                    ]
                  ],
                  "rows": [
                    [
                      [
                        {
                          "type": "Text",
                          "value": "key  "
                        }
                      ],
                      [
                        {
                          "type": "Text",
                          "value": "val  "
                        }
                      ],
                      [
                        {
                          "type": "Text",
                          "value": "etc   "
                        }
                      ]
                    ]
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Table cells can contain any content that a paragraph can contain."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "secID": null,
          "title": "Note",
          "contents": [
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Notes can be written inline with a spec document, and are often helpful to\nsupply non-normative explanatory text or caveats in a differently formatted\nstyle. Case insensitive, the "
                },
                {
                  "type": "InlineCode",
                  "code": ":"
                },
                {
                  "type": "Text",
                  "value": " is optional."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Notes automatically have short links generated for them. If the contents of the\nnote changes, so will the link URL. However if a note moves around, or content\naround the note changes the existing links will still point to the right place,\nvery useful for consistently evolving specifications!"
                }
              ]
            },
            {
              "type": "Code",
              "raw": false,
              "lang": null,
              "example": false,
              "counter": false,
              "code": "Note: Notes are awesome.\n"
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Produces the following:"
                }
              ]
            },
            {
              "type": "Note",
              "contents": [
                {
                  "type": "Text",
                  "value": "Notes are awesome."
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "secID": null,
          "title": "Todo",
          "contents": [
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "It's often helpful to write a draft of a document and leave \"to-do\" comments in\nnot-yet-completed sections. Case insensitive, the "
                },
                {
                  "type": "InlineCode",
                  "code": ":"
                },
                {
                  "type": "Text",
                  "value": " is optional."
                }
              ]
            },
            {
              "type": "Code",
              "raw": false,
              "lang": null,
              "example": false,
              "counter": false,
              "code": "TODO: finish this section\n"
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Produces the following:"
                }
              ]
            },
            {
              "type": "Todo",
              "contents": [
                {
                  "type": "Text",
                  "value": "finish this section"
                }
              ]
            },
            {
              "type": "Note",
              "contents": [
                {
                  "type": "Text",
                  "value": "You can also write "
                },
                {
                  "type": "InlineCode",
                  "code": "TK"
                },
                {
                  "type": "Text",
                  "value": " in place of "
                },
                {
                  "type": "InlineCode",
                  "code": "TODO"
                },
                {
                  "type": "Text",
                  "value": ", nerds."
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "secID": null,
          "title": "Syntax Highlighting",
          "contents": [
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Spec Markdown will apply syntax highlighting to blocks of code if a\ngithub-flavored-markdown style language is supplied."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "You may provide a "
                },
                {
                  "type": "InlineCode",
                  "code": "highlight"
                },
                {
                  "type": "Text",
                  "value": " function as an option to customize this behavior."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "To render this highlighted javascript:"
                }
              ]
            },
            {
              "type": "Code",
              "code": "```js\nconst baz = foo(\"bar\");\n```"
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Produces the following:"
                }
              ]
            },
            {
              "type": "Code",
              "raw": false,
              "lang": "js",
              "example": false,
              "counter": false,
              "code": "const baz = foo(\"bar\");\n"
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "You may also prefix your highlight function with \"raw\" if you want to avoid\nother tools, such as Prettier, from interpreting a code block."
                }
              ]
            },
            {
              "type": "Code",
              "code": "```raw js\nconst baz = foo(\"bar\");\n```"
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Produces the following:"
                }
              ]
            },
            {
              "type": "Code",
              "raw": true,
              "lang": "js",
              "example": false,
              "counter": false,
              "code": "const baz = foo(\"bar\");\n"
            },
            {
              "type": "Section",
              "secID": null,
              "title": "Examples",
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Spec Markdown helps you write examples, visually indicaticating the difference\nfrom normative code blocks, and generating permalinks to those examples. Just\nwrite "
                    },
                    {
                      "type": "InlineCode",
                      "code": "example"
                    },
                    {
                      "type": "Text",
                      "value": " after the "
                    },
                    {
                      "type": "HTMLTag",
                      "tag": "<code>"
                    },
                    {
                      "type": "Text",
                      "value": "\\`\\`\\`"
                    },
                    {
                      "type": "HTMLTag",
                      "tag": "</code>"
                    },
                    {
                      "type": "Text",
                      "value": "."
                    }
                  ]
                },
                {
                  "type": "Code",
                  "code": "```example\nconst great = useOf.example(\"code\");\n```"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Produces the following:"
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": true,
                  "counter": false,
                  "code": "const great = useOf.example(\"code\");\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Examples can also be syntax highlighted, by placing the language directly before\nwriting "
                    },
                    {
                      "type": "InlineCode",
                      "code": "example"
                    },
                    {
                      "type": "Text",
                      "value": ":"
                    }
                  ]
                },
                {
                  "type": "Code",
                  "code": "```js example\nconst great = useOf.example(\"code\");\n```"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Produces the following:"
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": "js",
                  "example": true,
                  "counter": false,
                  "code": "const great = useOf.example(\"code\");\n"
                }
              ]
            },
            {
              "type": "Section",
              "secID": null,
              "title": "Counter Examples",
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "In addition to examples, Spec Markdown helps you write "
                    },
                    {
                      "type": "Italic",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "counter-examples"
                        }
                      ]
                    },
                    {
                      "type": "Text",
                      "value": ", which\nare examples of things you should not do. These are visually indicated as\ndifferent from normative code blocks and other examples. Just write\n"
                    },
                    {
                      "type": "InlineCode",
                      "code": "counter-example"
                    },
                    {
                      "type": "Text",
                      "value": " after the "
                    },
                    {
                      "type": "HTMLTag",
                      "tag": "<code>"
                    },
                    {
                      "type": "Text",
                      "value": "\\`\\`\\`"
                    },
                    {
                      "type": "HTMLTag",
                      "tag": "</code>"
                    },
                    {
                      "type": "Text",
                      "value": " (and optional language)."
                    }
                  ]
                },
                {
                  "type": "Code",
                  "code": "```js counter-example\nconst shit = dontSwear();\n```"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Produces the following:"
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": "js",
                  "example": true,
                  "counter": true,
                  "code": "const shit = dontSwear();\n"
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "secID": null,
          "title": "Imports",
          "contents": [
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "When compiled, an import reference will be inlined into the same document. An\nimport reference looks like a link to a \".md\" file as a single paragraph."
                }
              ]
            },
            {
              "type": "Code",
              "raw": false,
              "lang": null,
              "example": false,
              "counter": false,
              "code": "[AnythingGoesHere](SomeName.md)\n"
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "You can optionally prefix the import reference with "
                },
                {
                  "type": "InlineCode",
                  "code": "#"
                },
                {
                  "type": "Text",
                  "value": " characters to describe at\nwhat section level the import should apply. By default an import reference will\nbe imported as a child of the current section."
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "secID": null,
          "title": "Inline editing",
          "contents": [
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "A portion of the "
                },
                {
                  "type": "Link",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "CriticMarkup"
                    }
                  ],
                  "url": "http://criticmarkup.com/"
                },
                {
                  "type": "Text",
                  "value": " spec is supported."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "For example, we can "
                },
                {
                  "type": "Ins",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "add"
                    }
                  ]
                },
                {
                  "type": "Text",
                  "value": " or "
                },
                {
                  "type": "Del",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "remove"
                    }
                  ]
                },
                {
                  "type": "Text",
                  "value": " text with the "
                },
                {
                  "type": "InlineCode",
                  "code": "{++add++}"
                },
                {
                  "type": "Text",
                  "value": " or\n"
                },
                {
                  "type": "InlineCode",
                  "code": "{--remove--}"
                },
                {
                  "type": "Text",
                  "value": " syntax."
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "secID": null,
          "title": "Block editing",
          "contents": [
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "We can also add and remove entire blocks of content, by using "
                },
                {
                  "type": "InlineCode",
                  "code": "{++"
                },
                {
                  "type": "Text",
                  "value": " or "
                },
                {
                  "type": "InlineCode",
                  "code": "{--"
                },
                {
                  "type": "Text",
                  "value": "\non their own line with empty lines on either side:"
                }
              ]
            },
            {
              "type": "BlockIns",
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "These paragraphs"
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "have been "
                    },
                    {
                      "type": "Italic",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "added"
                        }
                      ]
                    },
                    {
                      "type": "Text",
                      "value": "."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "And"
                }
              ]
            },
            {
              "type": "BlockDel",
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "These paragraphs"
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "have been "
                    },
                    {
                      "type": "Italic",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "removed"
                        }
                      ]
                    },
                    {
                      "type": "Text",
                      "value": "."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "By typing:"
                }
              ]
            },
            {
              "type": "Code",
              "raw": false,
              "lang": null,
              "example": false,
              "counter": false,
              "code": "{++\n\nThese paragraphs\n\nhave been *added*.\n\n++}\n\nAnd\n\n{--\n\nThese paragraphs\n\nhave been *removed*.\n\n--}\n"
            },
            {
              "type": "Note",
              "contents": [
                {
                  "type": "Text",
                  "value": "imports and section headers cannot be included in a added or removed\nsection to preserve the ability to render a table of contents."
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "secID": null,
          "title": "Algorithms",
          "contents": [
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Specifications for procedures or algorithms can be defined in terms of nested\nmarkdown lists. These lists can be of any kind, but will always have ordered\nformatting. The bullet labeling for algorithms is specific will cycle between\ndecimal, lower-alpha, and lower-roman."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "An algorithm definition also describes its arguments in terms of variables."
                }
              ]
            },
            {
              "type": "Code",
              "raw": false,
              "lang": null,
              "example": false,
              "counter": false,
              "code": "Algorithm(arg) :\n  1. first\n  1. then\n    * substep\n      * deeper substep\n      * another deep substep\n    * another step\n  1. okay\n"
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Produces the following:"
                }
              ]
            },
            {
              "type": "Algorithm",
              "call": {
                "type": "Call",
                "name": "Algorithm",
                "args": [
                  {
                    "type": "Variable",
                    "name": "arg"
                  }
                ]
              },
              "steps": {
                "type": "List",
                "ordered": true,
                "items": [
                  {
                    "type": "ListItem",
                    "contents": [
                      {
                        "type": "Text",
                        "value": "first"
                      }
                    ]
                  },
                  {
                    "type": "ListItem",
                    "contents": [
                      {
                        "type": "Text",
                        "value": "then"
                      },
                      {
                        "type": "List",
                        "ordered": true,
                        "items": [
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "substep"
                              },
                              {
                                "type": "List",
                                "ordered": true,
                                "items": [
                                  {
                                    "type": "ListItem",
                                    "contents": [
                                      {
                                        "type": "Text",
                                        "value": "deeper substep"
                                      }
                                    ]
                                  },
                                  {
                                    "type": "ListItem",
                                    "contents": [
                                      {
                                        "type": "Text",
                                        "value": "another deep substep"
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "another step"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "type": "ListItem",
                    "contents": [
                      {
                        "type": "Text",
                        "value": "okay"
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "type": "Section",
          "secID": null,
          "title": "Grammar",
          "contents": [
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Spec Markdown makes it easier to describe context-free grammatical productions."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Grammars are defined by a sequence of "
                },
                {
                  "type": "Italic",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "terminal"
                    }
                  ]
                },
                {
                  "type": "Text",
                  "value": " characters or sequence of\ncharacters, which are then referenced by "
                },
                {
                  "type": "Italic",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "non-terminal"
                    }
                  ]
                },
                {
                  "type": "Text",
                  "value": " rules. The definition\nof a non-terminal is referred to as a "
                },
                {
                  "type": "Italic",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "production"
                    }
                  ]
                },
                {
                  "type": "Text",
                  "value": "."
                }
              ]
            },
            {
              "type": "Section",
              "secID": null,
              "title": "Grammar Production",
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "The "
                    },
                    {
                      "type": "InlineCode",
                      "code": ":"
                    },
                    {
                      "type": "Text",
                      "value": " token indicates an \"is defined as\" production for a non-terminal,\nwhere a single definition can be written directly after the "
                    },
                    {
                      "type": "InlineCode",
                      "code": ":"
                    },
                    {
                      "type": "Text",
                      "value": "."
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": false,
                  "counter": false,
                  "code": "PBJ : Bread PeanutButter Jelly Bread\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Produces the following:"
                    }
                  ]
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "PBJ",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "Bread",
                        "params": null
                      },
                      {
                        "type": "NonTerminal",
                        "name": "PeanutButter",
                        "params": null
                      },
                      {
                        "type": "NonTerminal",
                        "name": "Jelly",
                        "params": null
                      },
                      {
                        "type": "NonTerminal",
                        "name": "Bread",
                        "params": null
                      }
                    ]
                  }
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Or if "
                    },
                    {
                      "type": "NonTerminal",
                      "name": "PBJ",
                      "params": null
                    },
                    {
                      "type": "Text",
                      "value": " has definition options, they are written immediately after as a\nMarkdown list."
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": false,
                  "counter": false,
                  "code": "PBJ :\n  - Bread PeanutButter Jelly Bread\n  - Bread Jelly PeanutButter Bread\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Produces the following:"
                    }
                  ]
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "PBJ",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "ListRHS",
                    "defs": [
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "Bread",
                            "params": null
                          },
                          {
                            "type": "NonTerminal",
                            "name": "PeanutButter",
                            "params": null
                          },
                          {
                            "type": "NonTerminal",
                            "name": "Jelly",
                            "params": null
                          },
                          {
                            "type": "NonTerminal",
                            "name": "Bread",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "Bread",
                            "params": null
                          },
                          {
                            "type": "NonTerminal",
                            "name": "Jelly",
                            "params": null
                          },
                          {
                            "type": "NonTerminal",
                            "name": "PeanutButter",
                            "params": null
                          },
                          {
                            "type": "NonTerminal",
                            "name": "Bread",
                            "params": null
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Each definition is a space seperated list of "
                    },
                    {
                      "type": "Italic",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "terminal"
                        }
                      ]
                    },
                    {
                      "type": "Text",
                      "value": " or "
                    },
                    {
                      "type": "Italic",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "non-terminal"
                        }
                      ]
                    },
                    {
                      "type": "Text",
                      "value": "\ntokens, and may also include conditionals and constraints."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Definition lists aren't required to be indented:"
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": false,
                  "counter": false,
                  "code": "PBJ :\n\n- Bread PeanutButter Jelly Bread\n- Bread Jelly PeanutButter Bread\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Produces the following:"
                    }
                  ]
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "PBJ",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "ListRHS",
                    "defs": [
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "Bread",
                            "params": null
                          },
                          {
                            "type": "NonTerminal",
                            "name": "PeanutButter",
                            "params": null
                          },
                          {
                            "type": "NonTerminal",
                            "name": "Jelly",
                            "params": null
                          },
                          {
                            "type": "NonTerminal",
                            "name": "Bread",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "Bread",
                            "params": null
                          },
                          {
                            "type": "NonTerminal",
                            "name": "Jelly",
                            "params": null
                          },
                          {
                            "type": "NonTerminal",
                            "name": "PeanutButter",
                            "params": null
                          },
                          {
                            "type": "NonTerminal",
                            "name": "Bread",
                            "params": null
                          }
                        ]
                      }
                    ]
                  }
                }
              ]
            },
            {
              "type": "Section",
              "secID": null,
              "title": "Production types",
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Often languages wish to specify different types of grammar productions, such as\nlexical or syntactical, or if certain characters line whitespace or newlines are\npermitted between symbols in the right-hand-side. Spec-md allows this this\ndistinction based on the number of colons:"
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": false,
                  "counter": false,
                  "code": "TypeOne : `type` `one`\n\nTypeTwo :: `type` `two`\n\nTypeThree ::: `type` `three`\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Produces the following:"
                    }
                  ]
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "TypeOne",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Terminal",
                        "value": "type"
                      },
                      {
                        "type": "Terminal",
                        "value": "one"
                      }
                    ]
                  }
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "TypeTwo",
                    "params": null
                  },
                  "defType": 2,
                  "rhs": {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Terminal",
                        "value": "type"
                      },
                      {
                        "type": "Terminal",
                        "value": "two"
                      }
                    ]
                  }
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "TypeThree",
                    "params": null
                  },
                  "defType": 3,
                  "rhs": {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Terminal",
                        "value": "type"
                      },
                      {
                        "type": "Terminal",
                        "value": "three"
                      }
                    ]
                  }
                }
              ]
            },
            {
              "type": "Section",
              "secID": null,
              "title": "One of",
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "If each definition option is a single token, it can be expressed as a \"one of\"\nexpression instead of a markdown list."
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": false,
                  "counter": false,
                  "code": "AssignmentOperator : one of *= `/=` %= += -= <<= >>= >>>= &= ^= |=\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Produces the following:"
                    }
                  ]
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "AssignmentOperator",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "OneOfRHS",
                    "rows": [
                      [
                        {
                          "type": "Terminal",
                          "value": "*="
                        },
                        {
                          "type": "Terminal",
                          "value": "/="
                        },
                        {
                          "type": "Terminal",
                          "value": "%="
                        },
                        {
                          "type": "Terminal",
                          "value": "+="
                        },
                        {
                          "type": "Terminal",
                          "value": "-="
                        },
                        {
                          "type": "Terminal",
                          "value": "<<="
                        },
                        {
                          "type": "Terminal",
                          "value": ">>="
                        },
                        {
                          "type": "Terminal",
                          "value": ">>>="
                        },
                        {
                          "type": "Terminal",
                          "value": "&="
                        },
                        {
                          "type": "Terminal",
                          "value": "^="
                        },
                        {
                          "type": "Terminal",
                          "value": "|="
                        }
                      ]
                    ]
                  }
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "\"one of\" can also be followed by a line break and multiple lines of tokens"
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": false,
                  "counter": false,
                  "code": "Keyword : one of\n  break     do        in          typeof\n  case      else      instanceof  var\n  catch     export    new         void\n  class     extends   return      while\n  const     finally   super       with\n  continue  for       switch      yield\n  debugger  function  this\n  default   if        throw\n  delete    import    try\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Produces the following:"
                    }
                  ]
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "Keyword",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "OneOfRHS",
                    "rows": [
                      [
                        {
                          "type": "Terminal",
                          "value": "break"
                        },
                        {
                          "type": "Terminal",
                          "value": "do"
                        },
                        {
                          "type": "Terminal",
                          "value": "in"
                        },
                        {
                          "type": "Terminal",
                          "value": "typeof"
                        }
                      ],
                      [
                        {
                          "type": "Terminal",
                          "value": "case"
                        },
                        {
                          "type": "Terminal",
                          "value": "else"
                        },
                        {
                          "type": "Terminal",
                          "value": "instanceof"
                        },
                        {
                          "type": "Terminal",
                          "value": "var"
                        }
                      ],
                      [
                        {
                          "type": "Terminal",
                          "value": "catch"
                        },
                        {
                          "type": "Terminal",
                          "value": "export"
                        },
                        {
                          "type": "Terminal",
                          "value": "new"
                        },
                        {
                          "type": "Terminal",
                          "value": "void"
                        }
                      ],
                      [
                        {
                          "type": "Terminal",
                          "value": "class"
                        },
                        {
                          "type": "Terminal",
                          "value": "extends"
                        },
                        {
                          "type": "Terminal",
                          "value": "return"
                        },
                        {
                          "type": "Terminal",
                          "value": "while"
                        }
                      ],
                      [
                        {
                          "type": "Terminal",
                          "value": "const"
                        },
                        {
                          "type": "Terminal",
                          "value": "finally"
                        },
                        {
                          "type": "Terminal",
                          "value": "super"
                        },
                        {
                          "type": "Terminal",
                          "value": "with"
                        }
                      ],
                      [
                        {
                          "type": "Terminal",
                          "value": "continue"
                        },
                        {
                          "type": "Terminal",
                          "value": "for"
                        },
                        {
                          "type": "Terminal",
                          "value": "switch"
                        },
                        {
                          "type": "Terminal",
                          "value": "yield"
                        }
                      ],
                      [
                        {
                          "type": "Terminal",
                          "value": "debugger"
                        },
                        {
                          "type": "Terminal",
                          "value": "function"
                        },
                        {
                          "type": "Terminal",
                          "value": "this"
                        }
                      ],
                      [
                        {
                          "type": "Terminal",
                          "value": "default"
                        },
                        {
                          "type": "Terminal",
                          "value": "if"
                        },
                        {
                          "type": "Terminal",
                          "value": "throw"
                        }
                      ],
                      [
                        {
                          "type": "Terminal",
                          "value": "delete"
                        },
                        {
                          "type": "Terminal",
                          "value": "import"
                        },
                        {
                          "type": "Terminal",
                          "value": "try"
                        }
                      ]
                    ]
                  }
                }
              ]
            },
            {
              "type": "Section",
              "secID": null,
              "title": "Non Terminal Token",
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Non-terminal tokens with a defined as a grammar production can be referred to\nin other grammar productions. Non-terminals must match the regular expression\n"
                    },
                    {
                      "type": "RegExp",
                      "value": "/[A-Z][_a-zA-Z]*/"
                    },
                    {
                      "type": "Text",
                      "value": ". That is, they must start with an uppercase letter, followed\nby any number of letters or underscores."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "secID": null,
              "title": "Prose",
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Grammars can describe arbitrary rules by using prose within a grammar\ndefinition by using "
                    },
                    {
                      "type": "InlineCode",
                      "code": "\"quotes\""
                    },
                    {
                      "type": "Text",
                      "value": "."
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": false,
                  "counter": false,
                  "code": "Sandwich : Bread \"Any kind of topping\" Bread\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Produces the following:"
                    }
                  ]
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "Sandwich",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "Bread",
                        "params": null
                      },
                      {
                        "type": "Prose",
                        "text": "Any kind of topping"
                      },
                      {
                        "type": "NonTerminal",
                        "name": "Bread",
                        "params": null
                      }
                    ]
                  }
                }
              ]
            },
            {
              "type": "Section",
              "secID": null,
              "title": "Terminal Token",
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Terminal tokens refer to a character or sequence of characters. They can be\nwritten unadorned in the grammar definition."
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": false,
                  "counter": false,
                  "code": "BalancedParens : ( BalancedParens )\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Produces the following:"
                    }
                  ]
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "BalancedParens",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Terminal",
                        "value": "("
                      },
                      {
                        "type": "NonTerminal",
                        "name": "BalancedParens",
                        "params": null
                      },
                      {
                        "type": "Terminal",
                        "value": ")"
                      }
                    ]
                  }
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Any sequence of characters can be written to indicate a terminal token:"
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": false,
                  "counter": false,
                  "code": "WhileStatement : while ( Expression ) { Statements }\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Produces"
                    }
                  ]
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "WhileStatement",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Terminal",
                        "value": "while"
                      },
                      {
                        "type": "Terminal",
                        "value": "("
                      },
                      {
                        "type": "NonTerminal",
                        "name": "Expression",
                        "params": null
                      },
                      {
                        "type": "Terminal",
                        "value": ")"
                      },
                      {
                        "type": "Terminal",
                        "value": "{"
                      },
                      {
                        "type": "NonTerminal",
                        "name": "Statements",
                        "params": null
                      },
                      {
                        "type": "Terminal",
                        "value": "}"
                      }
                    ]
                  }
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Terminals can also be quoted with back-ticks "
                    },
                    {
                      "type": "HTMLTag",
                      "tag": "<code>"
                    },
                    {
                      "type": "Text",
                      "value": "\\`"
                    },
                    {
                      "type": "HTMLTag",
                      "tag": "</code>"
                    },
                    {
                      "type": "Text",
                      "value": " to remove any\nambiguity from other meanings, for example to allow a terminal token to start\nwith an uppercase letter, or a slash "
                    },
                    {
                      "type": "InlineCode",
                      "code": "/"
                    },
                    {
                      "type": "Text",
                      "value": " or backslash "
                    },
                    {
                      "type": "InlineCode",
                      "code": "\\"
                    },
                    {
                      "type": "Text",
                      "value": ", or later\ncontain a "
                    },
                    {
                      "type": "InlineCode",
                      "code": "]"
                    },
                    {
                      "type": "Text",
                      "value": " or "
                    },
                    {
                      "type": "InlineCode",
                      "code": "}"
                    },
                    {
                      "type": "Text",
                      "value": "."
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": false,
                  "counter": false,
                  "code": "DivisionExpression : Expression `/` Expression\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Produces"
                    }
                  ]
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "DivisionExpression",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "Expression",
                        "params": null
                      },
                      {
                        "type": "Terminal",
                        "value": "/"
                      },
                      {
                        "type": "NonTerminal",
                        "name": "Expression",
                        "params": null
                      }
                    ]
                  }
                }
              ]
            },
            {
              "type": "Section",
              "secID": null,
              "title": "Regular Expression",
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "When a grammar is intended to be interpretted as a single token and can be\nclearly written as a regular expression, you can do so directly."
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": false,
                  "counter": false,
                  "code": "UppercaseWord : /[A-Z][a-z]*/\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Produces the following:"
                    }
                  ]
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "UppercaseWord",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "RegExp",
                        "value": "/[A-Z][a-z]*/"
                      }
                    ]
                  }
                }
              ]
            },
            {
              "type": "Section",
              "secID": null,
              "title": "Quantifiers",
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Tokens can be followed by quantifiers to alter their meaning and as a short-hand\nfor common patterns of optionality and repetition."
                    }
                  ]
                },
                {
                  "type": "Subsection",
                  "title": "Optional Tokens",
                  "contents": [
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "A subscript suffix "
                        },
                        {
                          "type": "InlineCode",
                          "code": "Token?"
                        },
                        {
                          "type": "Text",
                          "value": " renders as "
                        },
                        {
                          "type": "Quantified",
                          "token": {
                            "type": "NonTerminal",
                            "name": "Token",
                            "params": null
                          },
                          "isList": false,
                          "isOptional": true
                        },
                        {
                          "type": "Text",
                          "value": " and is a shorthand for two\npossible definitions, one including that token and one excluding it."
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": null,
                      "example": false,
                      "counter": false,
                      "code": "Sentence : Noun Verb Adverb?\n"
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Produces the following:"
                        }
                      ]
                    },
                    {
                      "type": "Production",
                      "token": {
                        "type": "NonTerminal",
                        "name": "Sentence",
                        "params": null
                      },
                      "defType": 1,
                      "rhs": {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "Noun",
                            "params": null
                          },
                          {
                            "type": "NonTerminal",
                            "name": "Verb",
                            "params": null
                          },
                          {
                            "type": "Quantified",
                            "token": {
                              "type": "NonTerminal",
                              "name": "Adverb",
                              "params": null
                            },
                            "isList": false,
                            "isOptional": true
                          }
                        ]
                      }
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Which is shorthand for:"
                        }
                      ]
                    },
                    {
                      "type": "Production",
                      "token": {
                        "type": "NonTerminal",
                        "name": "Sentence",
                        "params": null
                      },
                      "defType": 1,
                      "rhs": {
                        "type": "ListRHS",
                        "defs": [
                          {
                            "type": "RHS",
                            "condition": null,
                            "tokens": [
                              {
                                "type": "NonTerminal",
                                "name": "Noun",
                                "params": null
                              },
                              {
                                "type": "NonTerminal",
                                "name": "Verb",
                                "params": null
                              },
                              {
                                "type": "NonTerminal",
                                "name": "Adverb",
                                "params": null
                              }
                            ]
                          },
                          {
                            "type": "RHS",
                            "condition": null,
                            "tokens": [
                              {
                                "type": "NonTerminal",
                                "name": "Noun",
                                "params": null
                              },
                              {
                                "type": "NonTerminal",
                                "name": "Verb",
                                "params": null
                              }
                            ]
                          }
                        ]
                      }
                    }
                  ]
                },
                {
                  "type": "Subsection",
                  "title": "Token Lists",
                  "contents": [
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "A subscript suffix "
                        },
                        {
                          "type": "InlineCode",
                          "code": "Token+"
                        },
                        {
                          "type": "Text",
                          "value": " renders as "
                        },
                        {
                          "type": "Quantified",
                          "token": {
                            "type": "NonTerminal",
                            "name": "Token",
                            "params": null
                          },
                          "isList": true,
                          "isOptional": false
                        },
                        {
                          "type": "Text",
                          "value": " and is shorthand for a list\nof one or more of that token."
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": null,
                      "example": false,
                      "counter": false,
                      "code": "Book : Cover Page+ Cover\n"
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Produces the following:"
                        }
                      ]
                    },
                    {
                      "type": "Production",
                      "token": {
                        "type": "NonTerminal",
                        "name": "Book",
                        "params": null
                      },
                      "defType": 1,
                      "rhs": {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "Cover",
                            "params": null
                          },
                          {
                            "type": "Quantified",
                            "token": {
                              "type": "NonTerminal",
                              "name": "Page",
                              "params": null
                            },
                            "isList": true,
                            "isOptional": false
                          },
                          {
                            "type": "NonTerminal",
                            "name": "Cover",
                            "params": null
                          }
                        ]
                      }
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Which, unless your specification document declares otherwise, is shorthand for:"
                        }
                      ]
                    },
                    {
                      "type": "Production",
                      "token": {
                        "type": "NonTerminal",
                        "name": "Book",
                        "params": null
                      },
                      "defType": 1,
                      "rhs": {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "Cover",
                            "params": null
                          },
                          {
                            "type": "NonTerminal",
                            "name": "Page_list",
                            "params": null
                          },
                          {
                            "type": "NonTerminal",
                            "name": "Cover",
                            "params": null
                          }
                        ]
                      }
                    },
                    {
                      "type": "Production",
                      "token": {
                        "type": "NonTerminal",
                        "name": "Page_list",
                        "params": null
                      },
                      "defType": 1,
                      "rhs": {
                        "type": "ListRHS",
                        "defs": [
                          {
                            "type": "RHS",
                            "condition": null,
                            "tokens": [
                              {
                                "type": "NonTerminal",
                                "name": "Page_list",
                                "params": null
                              },
                              {
                                "type": "NonTerminal",
                                "name": "Page",
                                "params": null
                              }
                            ]
                          },
                          {
                            "type": "RHS",
                            "condition": null,
                            "tokens": [
                              {
                                "type": "NonTerminal",
                                "name": "Page",
                                "params": null
                              }
                            ]
                          }
                        ]
                      }
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Some specifications may wish to declare "
                        },
                        {
                          "type": "Quantified",
                          "token": {
                            "type": "NonTerminal",
                            "name": "Token",
                            "params": null
                          },
                          "isList": true,
                          "isOptional": false
                        },
                        {
                          "type": "Text",
                          "value": " as a shorthand for a\ncomma-separated list, in which case the previous example would be shorthand for:"
                        }
                      ]
                    },
                    {
                      "type": "Production",
                      "token": {
                        "type": "NonTerminal",
                        "name": "Book",
                        "params": null
                      },
                      "defType": 1,
                      "rhs": {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "Cover",
                            "params": null
                          },
                          {
                            "type": "NonTerminal",
                            "name": "Page_list",
                            "params": null
                          },
                          {
                            "type": "NonTerminal",
                            "name": "Cover",
                            "params": null
                          }
                        ]
                      }
                    },
                    {
                      "type": "Production",
                      "token": {
                        "type": "NonTerminal",
                        "name": "Page_list",
                        "params": null
                      },
                      "defType": 1,
                      "rhs": {
                        "type": "ListRHS",
                        "defs": [
                          {
                            "type": "RHS",
                            "condition": null,
                            "tokens": [
                              {
                                "type": "NonTerminal",
                                "name": "Page_list",
                                "params": null
                              },
                              {
                                "type": "Terminal",
                                "value": ","
                              },
                              {
                                "type": "NonTerminal",
                                "name": "Page",
                                "params": null
                              }
                            ]
                          },
                          {
                            "type": "RHS",
                            "condition": null,
                            "tokens": [
                              {
                                "type": "NonTerminal",
                                "name": "Page",
                                "params": null
                              }
                            ]
                          }
                        ]
                      }
                    }
                  ]
                },
                {
                  "type": "Subsection",
                  "title": "Optional Lists",
                  "contents": [
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "A subscript suffix "
                        },
                        {
                          "type": "InlineCode",
                          "code": "Token*"
                        },
                        {
                          "type": "Text",
                          "value": " renders as "
                        },
                        {
                          "type": "Quantified",
                          "token": {
                            "type": "NonTerminal",
                            "name": "Token",
                            "params": null
                          },
                          "isList": true,
                          "isOptional": true
                        },
                        {
                          "type": "Text",
                          "value": " and is shorthand for an\noptional list, which describes zero or more of that token."
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": null,
                      "example": false,
                      "counter": false,
                      "code": "Sandwich : Bread Topping* Bread\n"
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Produces the following:"
                        }
                      ]
                    },
                    {
                      "type": "Production",
                      "token": {
                        "type": "NonTerminal",
                        "name": "Sandwich",
                        "params": null
                      },
                      "defType": 1,
                      "rhs": {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "Bread",
                            "params": null
                          },
                          {
                            "type": "Quantified",
                            "token": {
                              "type": "NonTerminal",
                              "name": "Topping",
                              "params": null
                            },
                            "isList": true,
                            "isOptional": true
                          },
                          {
                            "type": "NonTerminal",
                            "name": "Bread",
                            "params": null
                          }
                        ]
                      }
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Which is shorthand for:"
                        }
                      ]
                    },
                    {
                      "type": "Production",
                      "token": {
                        "type": "NonTerminal",
                        "name": "Sandwich",
                        "params": null
                      },
                      "defType": 1,
                      "rhs": {
                        "type": "ListRHS",
                        "defs": [
                          {
                            "type": "RHS",
                            "condition": null,
                            "tokens": [
                              {
                                "type": "NonTerminal",
                                "name": "Bread",
                                "params": null
                              },
                              {
                                "type": "NonTerminal",
                                "name": "Topping_list",
                                "params": null
                              },
                              {
                                "type": "NonTerminal",
                                "name": "Bread",
                                "params": null
                              }
                            ]
                          },
                          {
                            "type": "RHS",
                            "condition": null,
                            "tokens": [
                              {
                                "type": "NonTerminal",
                                "name": "Bread",
                                "params": null
                              },
                              {
                                "type": "NonTerminal",
                                "name": "Bread",
                                "params": null
                              }
                            ]
                          }
                        ]
                      }
                    },
                    {
                      "type": "Production",
                      "token": {
                        "type": "NonTerminal",
                        "name": "Topping_list",
                        "params": null
                      },
                      "defType": 1,
                      "rhs": {
                        "type": "ListRHS",
                        "defs": [
                          {
                            "type": "RHS",
                            "condition": null,
                            "tokens": [
                              {
                                "type": "NonTerminal",
                                "name": "Topping_list",
                                "params": null
                              },
                              {
                                "type": "NonTerminal",
                                "name": "Topping",
                                "params": null
                              }
                            ]
                          },
                          {
                            "type": "RHS",
                            "condition": null,
                            "tokens": [
                              {
                                "type": "NonTerminal",
                                "name": "Topping",
                                "params": null
                              }
                            ]
                          }
                        ]
                      }
                    }
                  ]
                },
                {
                  "type": "Subsection",
                  "title": "Use with Non-Terminals",
                  "contents": [
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Quantifiers also apply to non-terminal tokens with the same rules. For example:"
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": "markdown",
                      "example": false,
                      "counter": false,
                      "code": "UnionMembers :\n  - UnionMembers | NamedType\n  - `|`? NamedType\n"
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Produces the following:"
                        }
                      ]
                    },
                    {
                      "type": "Production",
                      "token": {
                        "type": "NonTerminal",
                        "name": "UnionMembers",
                        "params": null
                      },
                      "defType": 1,
                      "rhs": {
                        "type": "ListRHS",
                        "defs": [
                          {
                            "type": "RHS",
                            "condition": null,
                            "tokens": [
                              {
                                "type": "NonTerminal",
                                "name": "UnionMembers",
                                "params": null
                              },
                              {
                                "type": "Terminal",
                                "value": "|"
                              },
                              {
                                "type": "NonTerminal",
                                "name": "NamedType",
                                "params": null
                              }
                            ]
                          },
                          {
                            "type": "RHS",
                            "condition": null,
                            "tokens": [
                              {
                                "type": "Quantified",
                                "token": {
                                  "type": "Terminal",
                                  "value": "|"
                                },
                                "isList": false,
                                "isOptional": true
                              },
                              {
                                "type": "NonTerminal",
                                "name": "NamedType",
                                "params": null
                              }
                            ]
                          }
                        ]
                      }
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "However, unquoted non-terminals may use the "
                        },
                        {
                          "type": "InlineCode",
                          "code": "*"
                        },
                        {
                          "type": "Text",
                          "value": ", "
                        },
                        {
                          "type": "InlineCode",
                          "code": "?"
                        },
                        {
                          "type": "Text",
                          "value": " and "
                        },
                        {
                          "type": "InlineCode",
                          "code": "+"
                        },
                        {
                          "type": "Text",
                          "value": " characters, so\nalways quote the terminal if the intent is to apply a quantifer."
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": "markdown",
                      "example": true,
                      "counter": true,
                      "code": "UnionMembers :\n  - UnionMembers | NamedType\n  - |? NamedType\n"
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Produces the terminal "
                        },
                        {
                          "type": "InlineCode",
                          "code": "|?"
                        },
                        {
                          "type": "Text",
                          "value": ", not an optional "
                        },
                        {
                          "type": "InlineCode",
                          "code": "|"
                        },
                        {
                          "type": "Text",
                          "value": ":"
                        }
                      ]
                    },
                    {
                      "type": "Production",
                      "token": {
                        "type": "NonTerminal",
                        "name": "UnionMembers",
                        "params": null
                      },
                      "defType": 1,
                      "rhs": {
                        "type": "ListRHS",
                        "defs": [
                          {
                            "type": "RHS",
                            "condition": null,
                            "tokens": [
                              {
                                "type": "NonTerminal",
                                "name": "UnionMembers",
                                "params": null
                              },
                              {
                                "type": "Terminal",
                                "value": "|"
                              },
                              {
                                "type": "NonTerminal",
                                "name": "NamedType",
                                "params": null
                              }
                            ]
                          },
                          {
                            "type": "RHS",
                            "condition": null,
                            "tokens": [
                              {
                                "type": "Terminal",
                                "value": "|?"
                              },
                              {
                                "type": "NonTerminal",
                                "name": "NamedType",
                                "params": null
                              }
                            ]
                          }
                        ]
                      }
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "secID": null,
              "title": "Conditional Parameters",
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "It can be a useful short-hand to provide conditional parameters when defining a\nnon-terminal token rather than defining two very similar non-terminals."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "A conditional parameter is written in braces "
                    },
                    {
                      "type": "InlineCode",
                      "code": "Token[Param]"
                    },
                    {
                      "type": "Text",
                      "value": " and renders\nas "
                    },
                    {
                      "type": "NonTerminal",
                      "name": "Token",
                      "params": [
                        {
                          "type": "NonTerminalParam",
                          "conditional": false,
                          "negated": false,
                          "name": "Param"
                        }
                      ]
                    },
                    {
                      "type": "Text",
                      "value": ". When used in definitions is shorthand for two symbol\ndefinitions: one appended with that parameter name, the other without."
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": false,
                  "counter": false,
                  "code": "Example[WithCondition] : \"Definition TBD\"\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Produces the following:"
                    }
                  ]
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "Example",
                    "params": [
                      {
                        "type": "NonTerminalParam",
                        "conditional": false,
                        "negated": false,
                        "name": "WithCondition"
                      }
                    ]
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Prose",
                        "text": "Definition TBD"
                      }
                    ]
                  }
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Which is shorthand for:"
                    }
                  ]
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "Example",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Prose",
                        "text": "Definition TBD"
                      }
                    ]
                  }
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "Example_WithCondition",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Prose",
                        "text": "Definition TBD"
                      }
                    ]
                  }
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "The conditions are applied at the beginning of a definition for the\nnon-terminal by prefixing with "
                    },
                    {
                      "type": "InlineCode",
                      "code": "[if Param]"
                    },
                    {
                      "type": "Text",
                      "value": " (alternatively "
                    },
                    {
                      "type": "InlineCode",
                      "code": "[+Param]"
                    },
                    {
                      "type": "Text",
                      "value": ") or\n"
                    },
                    {
                      "type": "InlineCode",
                      "code": "[if not Param]"
                    },
                    {
                      "type": "Text",
                      "value": " (alternatively "
                    },
                    {
                      "type": "InlineCode",
                      "code": "[~Param]"
                    },
                    {
                      "type": "Text",
                      "value": ") to only include the definition when\nthe variant with the conditional parameter is or is not used, respectively."
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": false,
                  "counter": false,
                  "code": "Example[WithCondition] :\n  - A\n  - [if WithCondition] B\n  - [if not WithCondition] C\n  - [+WithCondition] D\n  - [~WithCondition] E\n\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Produces the following:"
                    }
                  ]
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "Example",
                    "params": [
                      {
                        "type": "NonTerminalParam",
                        "conditional": false,
                        "negated": false,
                        "name": "WithCondition"
                      }
                    ]
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "ListRHS",
                    "defs": [
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "A",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": {
                          "type": "Condition",
                          "param": "WithCondition",
                          "not": false
                        },
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "B",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": {
                          "type": "Condition",
                          "param": "WithCondition",
                          "not": true
                        },
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "C",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": {
                          "type": "Condition",
                          "param": "WithCondition",
                          "not": false
                        },
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "D",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": {
                          "type": "Condition",
                          "param": "WithCondition",
                          "not": true
                        },
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "E",
                            "params": null
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Which is shorthand for:"
                    }
                  ]
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "Example",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "ListRHS",
                    "defs": [
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "A",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "C",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "E",
                            "params": null
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "Example_WithCondition",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "ListRHS",
                    "defs": [
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "A",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "B",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "D",
                            "params": null
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "The same bracket suffix on a non-terminal within a rule is shorthand for\nusing that variant of the rule. If the parameter starts with "
                    },
                    {
                      "type": "InlineCode",
                      "code": "?"
                    },
                    {
                      "type": "Text",
                      "value": ",\nthat form of the symbol is conditionally used only in the derived production\nwith the same parameter. If the parameter starts with "
                    },
                    {
                      "type": "InlineCode",
                      "code": "!"
                    },
                    {
                      "type": "Text",
                      "value": ", that form of the\nsymbol is only used when in the derived production "
                    },
                    {
                      "type": "Italic",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "without"
                        }
                      ]
                    },
                    {
                      "type": "Text",
                      "value": " that parameter."
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": false,
                  "counter": false,
                  "code": "Example[WithCondition] :\n  - Example\n  - Example[WithCondition]\n  - Example[?WithCondition]\n  - Example[!WithCondition]\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Produces the following:"
                    }
                  ]
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "Example",
                    "params": [
                      {
                        "type": "NonTerminalParam",
                        "conditional": false,
                        "negated": false,
                        "name": "WithCondition"
                      }
                    ]
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "ListRHS",
                    "defs": [
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "Example",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "Example",
                            "params": [
                              {
                                "type": "NonTerminalParam",
                                "conditional": false,
                                "negated": false,
                                "name": "WithCondition"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "Example",
                            "params": [
                              {
                                "type": "NonTerminalParam",
                                "conditional": true,
                                "negated": false,
                                "name": "WithCondition"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "Example",
                            "params": [
                              {
                                "type": "NonTerminalParam",
                                "conditional": false,
                                "negated": true,
                                "name": "WithCondition"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Which is shorthand for:"
                    }
                  ]
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "Example",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "ListRHS",
                    "defs": [
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "Example",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "Example_WithCondition",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "Example",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "Example_WithCondition",
                            "params": null
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "Example_WithCondition",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "ListRHS",
                    "defs": [
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "Example",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "Example_WithCondition",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "Example_WithCondition",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "Example",
                            "params": null
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Multiple conditional parameters can be used on both the production definition\nand on non-terminals within a rule, in which case it is short form for the\npermutation of all conditions:"
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": false,
                  "counter": false,
                  "code": "Example[P, Q] :\n  - [if P] `p`\n  - [if Q] `q`\n  - Example[!P, ?Q]\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Produces the following:"
                    }
                  ]
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "Example",
                    "params": [
                      {
                        "type": "NonTerminalParam",
                        "conditional": false,
                        "negated": false,
                        "name": "P"
                      },
                      {
                        "type": "NonTerminalParam",
                        "conditional": false,
                        "negated": false,
                        "name": "Q"
                      }
                    ]
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "ListRHS",
                    "defs": [
                      {
                        "type": "RHS",
                        "condition": {
                          "type": "Condition",
                          "param": "P",
                          "not": false
                        },
                        "tokens": [
                          {
                            "type": "Terminal",
                            "value": "p"
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": {
                          "type": "Condition",
                          "param": "Q",
                          "not": false
                        },
                        "tokens": [
                          {
                            "type": "Terminal",
                            "value": "q"
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "Example",
                            "params": [
                              {
                                "type": "NonTerminalParam",
                                "conditional": false,
                                "negated": true,
                                "name": "P"
                              },
                              {
                                "type": "NonTerminalParam",
                                "conditional": true,
                                "negated": false,
                                "name": "Q"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Which is shorthand for:"
                    }
                  ]
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "Example",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "ListRHS",
                    "defs": [
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "Example_P",
                            "params": null
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "Example_P",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "ListRHS",
                    "defs": [
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "Terminal",
                            "value": "p"
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "Example",
                            "params": null
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "Example_Q",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "ListRHS",
                    "defs": [
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "Terminal",
                            "value": "q"
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "Example_P_Q",
                            "params": null
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "Example_P_Q",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "ListRHS",
                    "defs": [
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "Terminal",
                            "value": "p"
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "Terminal",
                            "value": "q"
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "Example_Q",
                            "params": null
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Conditional parameters on a usage can be followed by a quantifier."
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": false,
                  "counter": false,
                  "code": "Example[P, ?Q]*\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Produces the following:"
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Quantified",
                      "token": {
                        "type": "NonTerminal",
                        "name": "Example",
                        "params": [
                          {
                            "type": "NonTerminalParam",
                            "conditional": false,
                            "negated": false,
                            "name": "P"
                          },
                          {
                            "type": "NonTerminalParam",
                            "conditional": true,
                            "negated": false,
                            "name": "Q"
                          }
                        ]
                      },
                      "isList": true,
                      "isOptional": true
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "secID": null,
              "title": "Constraints",
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Any token can be followed by \"but not\" or \"but not one of\" to place a further\nconstraint on the previous token:"
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": false,
                  "counter": false,
                  "code": "Example : A B but not foo or bar\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Produces the following:"
                    }
                  ]
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "Example",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "A",
                        "params": null
                      },
                      {
                        "type": "Constrained",
                        "token": {
                          "type": "NonTerminal",
                          "name": "B",
                          "params": null
                        },
                        "constraint": {
                          "type": "ButNot",
                          "tokens": [
                            {
                              "type": "Terminal",
                              "value": "foo"
                            },
                            {
                              "type": "Terminal",
                              "value": "bar"
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Optionally can mention \"one of\", this will be omitted when rendered. Commas can\nbe used instead of \"or\"."
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": false,
                  "counter": false,
                  "code": "Example : A B but not one of foo, bar\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Produces the following:"
                    }
                  ]
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "Example",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "A",
                        "params": null
                      },
                      {
                        "type": "Constrained",
                        "token": {
                          "type": "NonTerminal",
                          "name": "B",
                          "params": null
                        },
                        "constraint": {
                          "type": "ButNot",
                          "tokens": [
                            {
                              "type": "Terminal",
                              "value": "foo"
                            },
                            {
                              "type": "Terminal",
                              "value": "bar"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            {
              "type": "Section",
              "secID": null,
              "title": "Meta Tokens",
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Spec Markdown can specify some tokens which do not consume any characters."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "The empty set, written "
                    },
                    {
                      "type": "InlineCode",
                      "code": "[empty]"
                    },
                    {
                      "type": "Text",
                      "value": " appears as "
                    },
                    {
                      "type": "Empty"
                    },
                    {
                      "type": "Text",
                      "value": " can be used to define\na non-terminal as matching no terminal or non-terminal tokens."
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": false,
                  "counter": false,
                  "code": "Example : [empty]\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Produces the following:"
                    }
                  ]
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "Example",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Empty"
                      }
                    ]
                  }
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Lookaheads can appear anywhere in a sequence of tokens, and describe additional\nconstraints on the following token."
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": false,
                  "counter": false,
                  "code": "Example :\n  - [lookahead token] Token\n  - [lookahead ! token] Token\n  - [lookahead != token] Token\n  - [lookahead NonTerminal] Token\n  - [lookahead ! NonTerminal] Token\n  - [lookahead != NonTerminal] Token\n  - [lookahead {token, set}] Token\n  - [lookahead ! {token, set}] Token\n  - [lookahead != {token, set}] Token\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Produces the following:"
                    }
                  ]
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "Example",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "ListRHS",
                    "defs": [
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "Lookahead",
                            "not": false,
                            "nt": false,
                            "set": [
                              {
                                "type": "Terminal",
                                "value": "token"
                              }
                            ]
                          },
                          {
                            "type": "NonTerminal",
                            "name": "Token",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "Lookahead",
                            "not": true,
                            "nt": false,
                            "set": [
                              {
                                "type": "Terminal",
                                "value": "token"
                              }
                            ]
                          },
                          {
                            "type": "NonTerminal",
                            "name": "Token",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "Lookahead",
                            "not": true,
                            "nt": false,
                            "set": [
                              {
                                "type": "Terminal",
                                "value": "token"
                              }
                            ]
                          },
                          {
                            "type": "NonTerminal",
                            "name": "Token",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "Lookahead",
                            "not": false,
                            "nt": true,
                            "set": [
                              {
                                "type": "NonTerminal",
                                "name": "NonTerminal",
                                "params": null
                              }
                            ]
                          },
                          {
                            "type": "NonTerminal",
                            "name": "Token",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "Lookahead",
                            "not": true,
                            "nt": true,
                            "set": [
                              {
                                "type": "NonTerminal",
                                "name": "NonTerminal",
                                "params": null
                              }
                            ]
                          },
                          {
                            "type": "NonTerminal",
                            "name": "Token",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "Lookahead",
                            "not": true,
                            "nt": true,
                            "set": [
                              {
                                "type": "NonTerminal",
                                "name": "NonTerminal",
                                "params": null
                              }
                            ]
                          },
                          {
                            "type": "NonTerminal",
                            "name": "Token",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "Lookahead",
                            "not": false,
                            "nt": false,
                            "set": [
                              {
                                "type": "Terminal",
                                "value": "token"
                              },
                              {
                                "type": "Terminal",
                                "value": "set"
                              }
                            ]
                          },
                          {
                            "type": "NonTerminal",
                            "name": "Token",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "Lookahead",
                            "not": true,
                            "nt": false,
                            "set": [
                              {
                                "type": "Terminal",
                                "value": "token"
                              },
                              {
                                "type": "Terminal",
                                "value": "set"
                              }
                            ]
                          },
                          {
                            "type": "NonTerminal",
                            "name": "Token",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "Lookahead",
                            "not": true,
                            "nt": false,
                            "set": [
                              {
                                "type": "Terminal",
                                "value": "token"
                              },
                              {
                                "type": "Terminal",
                                "value": "set"
                              }
                            ]
                          },
                          {
                            "type": "NonTerminal",
                            "name": "Token",
                            "params": null
                          }
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "secID": null,
          "title": "Grammar Semantics",
          "contents": [
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Once grammar is defined, it can be useful to define the semantics of the grammar\nin terms of algorithm steps. A single grammar definition followed by a list\nis interpretted as a grammar semantic:"
                }
              ]
            },
            {
              "type": "Code",
              "raw": false,
              "lang": null,
              "example": false,
              "counter": false,
              "code": "PBJ : Bread PeanutButter Jelly Bread\n\n* Let {bottomBread} be the result of placing the first {Bread} on the plate.\n* Let {pbSpread} be the result of getting {PeanutButter} from the jar.\n* Spread {pbSpread} onto {bottomBread}.\n* Let {topBread} be the result of placing the last {Bread} on the plate.\n* Let {jamSpread} be the result of getting {Jelly} from the jar.\n* Spread {jamSpread} onto {topBread}.\n* Let {sandwich} be the result of rotating {topBread} 180&deg; and placing on {bottomBread}.\n* Return {sandwich}.\n"
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Produces the following:"
                }
              ]
            },
            {
              "type": "Semantic",
              "name": {
                "type": "NonTerminal",
                "name": "PBJ",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "tokens": [
                  {
                    "type": "NonTerminal",
                    "name": "Bread",
                    "params": null
                  },
                  {
                    "type": "NonTerminal",
                    "name": "PeanutButter",
                    "params": null
                  },
                  {
                    "type": "NonTerminal",
                    "name": "Jelly",
                    "params": null
                  },
                  {
                    "type": "NonTerminal",
                    "name": "Bread",
                    "params": null
                  }
                ]
              },
              "steps": {
                "type": "List",
                "ordered": true,
                "items": [
                  {
                    "type": "ListItem",
                    "contents": [
                      {
                        "type": "Text",
                        "value": "Let "
                      },
                      {
                        "type": "Variable",
                        "name": "bottomBread"
                      },
                      {
                        "type": "Text",
                        "value": " be the result of placing the first "
                      },
                      {
                        "type": "NonTerminal",
                        "name": "Bread",
                        "params": null
                      },
                      {
                        "type": "Text",
                        "value": " on the plate."
                      }
                    ]
                  },
                  {
                    "type": "ListItem",
                    "contents": [
                      {
                        "type": "Text",
                        "value": "Let "
                      },
                      {
                        "type": "Variable",
                        "name": "pbSpread"
                      },
                      {
                        "type": "Text",
                        "value": " be the result of "
                      },
                      {
                        "type": "NonTerminal",
                        "name": "PeanutButter",
                        "params": null
                      },
                      {
                        "type": "Text",
                        "value": "."
                      }
                    ]
                  },
                  {
                    "type": "ListItem",
                    "contents": [
                      {
                        "type": "Text",
                        "value": "Spread "
                      },
                      {
                        "type": "Variable",
                        "name": "pbSpread"
                      },
                      {
                        "type": "Text",
                        "value": " onto "
                      },
                      {
                        "type": "Variable",
                        "name": "bottomBread"
                      },
                      {
                        "type": "Text",
                        "value": "."
                      }
                    ]
                  },
                  {
                    "type": "ListItem",
                    "contents": [
                      {
                        "type": "Text",
                        "value": "Let "
                      },
                      {
                        "type": "Variable",
                        "name": "topBread"
                      },
                      {
                        "type": "Text",
                        "value": " be the result of placing the last "
                      },
                      {
                        "type": "NonTerminal",
                        "name": "Bread",
                        "params": null
                      },
                      {
                        "type": "Text",
                        "value": " on the plate."
                      }
                    ]
                  },
                  {
                    "type": "ListItem",
                    "contents": [
                      {
                        "type": "Text",
                        "value": "Let "
                      },
                      {
                        "type": "Variable",
                        "name": "jamSpread"
                      },
                      {
                        "type": "Text",
                        "value": " be the result of "
                      },
                      {
                        "type": "NonTerminal",
                        "name": "Jelly",
                        "params": null
                      },
                      {
                        "type": "Text",
                        "value": "."
                      }
                    ]
                  },
                  {
                    "type": "ListItem",
                    "contents": [
                      {
                        "type": "Text",
                        "value": "Spread "
                      },
                      {
                        "type": "Variable",
                        "name": "jamSpread"
                      },
                      {
                        "type": "Text",
                        "value": " onto "
                      },
                      {
                        "type": "Variable",
                        "name": "topBread"
                      },
                      {
                        "type": "Text",
                        "value": "."
                      }
                    ]
                  },
                  {
                    "type": "ListItem",
                    "contents": [
                      {
                        "type": "Text",
                        "value": "Let "
                      },
                      {
                        "type": "Variable",
                        "name": "sandwich"
                      },
                      {
                        "type": "Text",
                        "value": " be the result of rotating "
                      },
                      {
                        "type": "Variable",
                        "name": "topBread"
                      },
                      {
                        "type": "Text",
                        "value": " 180&deg; and placing on "
                      },
                      {
                        "type": "Variable",
                        "name": "bottomBread"
                      },
                      {
                        "type": "Text",
                        "value": "."
                      }
                    ]
                  },
                  {
                    "type": "ListItem",
                    "contents": [
                      {
                        "type": "Text",
                        "value": "Return "
                      },
                      {
                        "type": "Variable",
                        "name": "sandwich"
                      },
                      {
                        "type": "Text",
                        "value": "."
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "type": "Section",
          "secID": null,
          "title": "Value Literals",
          "contents": [
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Value literals allow any text to refer to a value which has semantic meaning\nin the specification by wrapping it in "
                },
                {
                  "type": "InlineCode",
                  "code": "{ }"
                },
                {
                  "type": "Text",
                  "value": " curly brace characters."
                }
              ]
            },
            {
              "type": "Code",
              "raw": false,
              "lang": null,
              "example": false,
              "counter": false,
              "code": "I can reference {foo}, {\"foo\"}, {null}, {true}.\n"
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Produces the following:"
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "I can reference "
                },
                {
                  "type": "Variable",
                  "name": "foo"
                },
                {
                  "type": "Text",
                  "value": ", "
                },
                {
                  "type": "StringLiteral",
                  "value": "\"foo\""
                },
                {
                  "type": "Text",
                  "value": ", "
                },
                {
                  "type": "Keyword",
                  "value": "null"
                },
                {
                  "type": "Text",
                  "value": ", "
                },
                {
                  "type": "Keyword",
                  "value": "true"
                },
                {
                  "type": "Text",
                  "value": "."
                }
              ]
            },
            {
              "type": "Subsection",
              "title": "Variables",
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Write "
                    },
                    {
                      "type": "InlineCode",
                      "code": "{foo}"
                    },
                    {
                      "type": "Text",
                      "value": " to produce a variable (represented by a \\<var> tag) like "
                    },
                    {
                      "type": "Variable",
                      "name": "foo"
                    },
                    {
                      "type": "Text",
                      "value": "."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Subsection",
              "title": "Keywords",
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Some known keywords like "
                    },
                    {
                      "type": "Keyword",
                      "value": "null"
                    },
                    {
                      "type": "Text",
                      "value": ", "
                    },
                    {
                      "type": "Keyword",
                      "value": "undefined"
                    },
                    {
                      "type": "Text",
                      "value": ", "
                    },
                    {
                      "type": "Keyword",
                      "value": "true"
                    },
                    {
                      "type": "Text",
                      "value": " and "
                    },
                    {
                      "type": "Keyword",
                      "value": "false"
                    },
                    {
                      "type": "Text",
                      "value": " are rendered\nas constants instead of variables."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Subsection",
              "title": "String literal",
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Write "
                    },
                    {
                      "type": "InlineCode",
                      "code": "{\"foo\"}"
                    },
                    {
                      "type": "Text",
                      "value": " to produce a string literal like "
                    },
                    {
                      "type": "StringLiteral",
                      "value": "\"foo\""
                    },
                    {
                      "type": "Text",
                      "value": "."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Subsection",
              "title": "Grammar tokens",
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Any grammar token can be written inline, like "
                    },
                    {
                      "type": "InlineCode",
                      "code": "{Example}"
                    },
                    {
                      "type": "Text",
                      "value": " to represent the\nnon-terminal token "
                    },
                    {
                      "type": "NonTerminal",
                      "name": "Example",
                      "params": null
                    },
                    {
                      "type": "Text",
                      "value": ", "
                    },
                    {
                      "type": "HTMLTag",
                      "tag": "<code>"
                    },
                    {
                      "type": "Text",
                      "value": "\\{\\`terminal\\`\\}"
                    },
                    {
                      "type": "HTMLTag",
                      "tag": "</code>"
                    },
                    {
                      "type": "Text",
                      "value": " to represent the\nterminal token "
                    },
                    {
                      "type": "Terminal",
                      "value": "terminal"
                    },
                    {
                      "type": "Text",
                      "value": ". Even meta tokens like "
                    },
                    {
                      "type": "InlineCode",
                      "code": "{[empty]}"
                    },
                    {
                      "type": "Text",
                      "value": " for "
                    },
                    {
                      "type": "Empty"
                    },
                    {
                      "type": "Text",
                      "value": " and\n"
                    },
                    {
                      "type": "InlineCode",
                      "code": "{[lookahead !{ x, y }]}"
                    },
                    {
                      "type": "Text",
                      "value": " for "
                    },
                    {
                      "type": "Lookahead",
                      "not": true,
                      "nt": false,
                      "set": [
                        {
                          "type": "Terminal",
                          "value": "x"
                        },
                        {
                          "type": "Terminal",
                          "value": "y"
                        }
                      ]
                    },
                    {
                      "type": "Text",
                      "value": "."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Subsection",
              "title": "Algorithm calls",
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "A call to an algorithm can be expressed as a value literal:"
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": null,
                  "example": false,
                  "counter": false,
                  "code": "{Algorithm(foo, \"string\", null)}\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Produces the following:"
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Call",
                      "name": "Algorithm",
                      "args": [
                        {
                          "type": "Variable",
                          "name": "foo"
                        },
                        {
                          "type": "StringLiteral",
                          "value": "\"string\""
                        },
                        {
                          "type": "Keyword",
                          "value": "null"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "secID": null,
          "title": "Biblio",
          "contents": [
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "By supplying a "
                },
                {
                  "type": "InlineCode",
                  "code": "\"biblio\""
                },
                {
                  "type": "Text",
                  "value": " key in a metadata file, you can have Algorithm calls\nand Non-terminal tokens which are not defined in this spec to link to where they\nare defined."
                }
              ]
            },
            {
              "type": "Code",
              "raw": false,
              "lang": null,
              "example": false,
              "counter": false,
              "code": "spec-md -m metadata.json myspec.md\n"
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Where metadata.json includes:"
                }
              ]
            },
            {
              "type": "Code",
              "raw": false,
              "lang": null,
              "example": false,
              "counter": false,
              "code": "{\n  \"biblio\": {\n    \"http://people.mozilla.org/~jorendorff/es6-draft.html\": {\n      \"Identifier\": \"#sec-names-and-keywords\",\n      \"PrimaryExpression\": \"#sec-primary-expression\",\n      \"ReturnIfAbrupt()\": \"#sec-returnifabrupt\",\n      \"Get()\": \"#sec-get-o-p\"\n    }\n  }\n}\n"
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Then referring to these tokens will link out to that page."
                }
              ]
            },
            {
              "type": "Code",
              "raw": false,
              "lang": null,
              "example": false,
              "counter": false,
              "code": "MemberExpression : PrimaryExpression . Identifier\n\n  * Let {reference} be the result of evaluating {PrimaryExpression}.\n  * Let {propName} be the string value of {Identifier}.\n  * Let {value} be {Get(reference, propName)}.\n  * {ReturnIfAbrupt(value)}.\n  * Return {value}.\n"
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Produces the following:"
                }
              ]
            },
            {
              "type": "Semantic",
              "name": {
                "type": "NonTerminal",
                "name": "MemberExpression",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "tokens": [
                  {
                    "type": "NonTerminal",
                    "name": "PrimaryExpression",
                    "params": null
                  },
                  {
                    "type": "Terminal",
                    "value": "."
                  },
                  {
                    "type": "NonTerminal",
                    "name": "Identifier",
                    "params": null
                  }
                ]
              },
              "steps": {
                "type": "List",
                "ordered": true,
                "items": [
                  {
                    "type": "ListItem",
                    "contents": [
                      {
                        "type": "Text",
                        "value": "Let "
                      },
                      {
                        "type": "Variable",
                        "name": "reference"
                      },
                      {
                        "type": "Text",
                        "value": " be the result of evaluating "
                      },
                      {
                        "type": "NonTerminal",
                        "name": "PrimaryExpression",
                        "params": null
                      },
                      {
                        "type": "Text",
                        "value": "."
                      }
                    ]
                  },
                  {
                    "type": "ListItem",
                    "contents": [
                      {
                        "type": "Text",
                        "value": "Let "
                      },
                      {
                        "type": "Variable",
                        "name": "propName"
                      },
                      {
                        "type": "Text",
                        "value": " be the string value of "
                      },
                      {
                        "type": "NonTerminal",
                        "name": "Identifier",
                        "params": null
                      },
                      {
                        "type": "Text",
                        "value": "."
                      }
                    ]
                  },
                  {
                    "type": "ListItem",
                    "contents": [
                      {
                        "type": "Text",
                        "value": "Let "
                      },
                      {
                        "type": "Variable",
                        "name": "value"
                      },
                      {
                        "type": "Text",
                        "value": " be "
                      },
                      {
                        "type": "Call",
                        "name": "Get",
                        "args": [
                          {
                            "type": "Variable",
                            "name": "reference"
                          },
                          {
                            "type": "Variable",
                            "name": "propName"
                          }
                        ]
                      },
                      {
                        "type": "Text",
                        "value": "."
                      }
                    ]
                  },
                  {
                    "type": "ListItem",
                    "contents": [
                      {
                        "type": "Call",
                        "name": "ReturnIfAbrupt",
                        "args": [
                          {
                            "type": "Variable",
                            "name": "value"
                          }
                        ]
                      },
                      {
                        "type": "Text",
                        "value": "."
                      }
                    ]
                  },
                  {
                    "type": "ListItem",
                    "contents": [
                      {
                        "type": "Text",
                        "value": "Return "
                      },
                      {
                        "type": "Variable",
                        "name": "value"
                      },
                      {
                        "type": "Text",
                        "value": ".\n"
                      }
                    ]
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "type": "Section",
      "secID": [
        "A"
      ],
      "title": "Using Spec Markdown",
      "contents": [
        {
          "type": "Paragraph",
          "contents": [
            {
              "type": "Text",
              "value": "If installed globally, using "
            },
            {
              "type": "InlineCode",
              "code": "spec-md"
            },
            {
              "type": "Text",
              "value": " as a shell executable is the easiest way\nto use Spec Markdown. The "
            },
            {
              "type": "InlineCode",
              "code": "spec-md"
            },
            {
              "type": "Text",
              "value": " executable expects a filepath to a Markdown\ndocument as input and outputs HTML on stdout. Use "
            },
            {
              "type": "InlineCode",
              "code": ">"
            },
            {
              "type": "Text",
              "value": " to write stdout to a file."
            }
          ]
        },
        {
          "type": "Code",
          "raw": false,
          "lang": "sh",
          "example": false,
          "counter": false,
          "code": "npm install -g spec-md\nspec-md ./path/to/markdown.md > ./path/to/output.html\n"
        },
        {
          "type": "Paragraph",
          "contents": [
            {
              "type": "Text",
              "value": "You can also require "
            },
            {
              "type": "InlineCode",
              "code": "spec-md"
            },
            {
              "type": "Text",
              "value": " as a node module, after which you might add the\n"
            },
            {
              "type": "InlineCode",
              "code": "spec-md"
            },
            {
              "type": "Text",
              "value": " command as a "
            },
            {
              "type": "Link",
              "contents": [
                {
                  "type": "Text",
                  "value": "node script"
                }
              ],
              "url": "https://docs.npmjs.com/cli/run-script"
            },
            {
              "type": "Text",
              "value": "."
            }
          ]
        },
        {
          "type": "Code",
          "raw": false,
          "lang": "sh",
          "example": false,
          "counter": false,
          "code": "npm install --save-dev spec-md\n"
        },
        {
          "type": "Code",
          "raw": false,
          "lang": "js",
          "example": false,
          "counter": false,
          "code": "const fs = require('fs');\nconst specMarkdown = require('spec-md');\nspecMarkdown.html('./path/to/markdown.md').then(html => {\n  fs.writeFile('./path/to/output.html', html);\n});\n"
        },
        {
          "type": "Paragraph",
          "contents": [
            {
              "type": "Text",
              "value": "The "
            },
            {
              "type": "InlineCode",
              "code": "spec-md"
            },
            {
              "type": "Text",
              "value": " node module provides a few functions:"
            }
          ]
        },
        {
          "type": "List",
          "ordered": false,
          "items": [
            {
              "type": "ListItem",
              "contents": [
                {
                  "type": "Call",
                  "name": "html",
                  "args": [
                    {
                      "type": "Variable",
                      "name": "filePath"
                    },
                    {
                      "type": "Variable",
                      "name": "options"
                    }
                  ]
                },
                {
                  "type": "Text",
                  "value": " takes a "
                },
                {
                  "type": "Variable",
                  "name": "filepath"
                },
                {
                  "type": "Text",
                  "value": " to a Markdown file and returns a\n    Promise which will resolve to a beautified HTML string. This function is the\n    primary usage of the "
                },
                {
                  "type": "InlineCode",
                  "code": "spec-md"
                },
                {
                  "type": "Text",
                  "value": " module."
                }
              ]
            },
            {
              "type": "ListItem",
              "contents": [
                {
                  "type": "Call",
                  "name": "parse",
                  "args": [
                    {
                      "type": "Variable",
                      "name": "filePath"
                    }
                  ]
                },
                {
                  "type": "Text",
                  "value": " takes a filepath and returns a Promise which will resolve\n    to an AST "
                },
                {
                  "type": "Italic",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "(Abstract Syntax Tree)"
                    }
                  ]
                },
                {
                  "type": "Text",
                  "value": " representing the contents of the Spec\n    Markdown file, with all imports already inlined."
                }
              ]
            },
            {
              "type": "ListItem",
              "contents": [
                {
                  "type": "Call",
                  "name": "print",
                  "args": [
                    {
                      "type": "Variable",
                      "name": "ast"
                    },
                    {
                      "type": "Variable",
                      "name": "options"
                    }
                  ]
                },
                {
                  "type": "Text",
                  "value": " takes an "
                },
                {
                  "type": "Variable",
                  "name": "ast"
                },
                {
                  "type": "Text",
                  "value": " produced by parse() and returns a\n    Promise which will resolve to a beautified HTML string."
                }
              ]
            },
            {
              "type": "ListItem",
              "contents": [
                {
                  "type": "Call",
                  "name": "visit",
                  "args": [
                    {
                      "type": "Variable",
                      "name": "ast"
                    },
                    {
                      "type": "Variable",
                      "name": "visitor"
                    }
                  ]
                },
                {
                  "type": "Text",
                  "value": " takes an "
                },
                {
                  "type": "Variable",
                  "name": "ast"
                },
                {
                  "type": "Text",
                  "value": " and a "
                },
                {
                  "type": "Variable",
                  "name": "visitor"
                },
                {
                  "type": "Text",
                  "value": ". It walks over the "
                },
                {
                  "type": "Variable",
                  "name": "ast"
                },
                {
                  "type": "Text",
                  "value": "\n    in a depth-first-traversal calling the "
                },
                {
                  "type": "Variable",
                  "name": "visitor"
                },
                {
                  "type": "Text",
                  "value": " along the way."
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "secID": null,
          "title": "Print Options",
          "contents": [
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "The "
                },
                {
                  "type": "Call",
                  "name": "html",
                  "args": [
                    {
                      "type": "Variable",
                      "name": "filePath"
                    },
                    {
                      "type": "Variable",
                      "name": "options"
                    }
                  ]
                },
                {
                  "type": "Text",
                  "value": " and "
                },
                {
                  "type": "Call",
                  "name": "print",
                  "args": [
                    {
                      "type": "Variable",
                      "name": "filePath"
                    }
                  ]
                },
                {
                  "type": "Text",
                  "value": " functions both take "
                },
                {
                  "type": "Variable",
                  "name": "options"
                },
                {
                  "type": "Text",
                  "value": "\nas an optional second argument. These options allow for customization control\nover the returned HTML, more options may be added in the future."
                }
              ]
            },
            {
              "type": "List",
              "ordered": false,
              "items": [
                {
                  "type": "ListItem",
                  "contents": [
                    {
                      "type": "Bold",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "highlight"
                        }
                      ]
                    },
                    {
                      "type": "Text",
                      "value": " - a function which is called when blocks of code are\n    encountered, with the first argument as the string of code, the second\n    argument being the language specified. This function should return well\n    formed HTML, complete with escaped special characters."
                    }
                  ]
                },
                {
                  "type": "ListItem",
                  "contents": [
                    {
                      "type": "Bold",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "head"
                        }
                      ]
                    },
                    {
                      "type": "Text",
                      "value": " - a string which is inserted in the "
                    },
                    {
                      "type": "InlineCode",
                      "code": "<head>"
                    },
                    {
                      "type": "Text",
                      "value": " tag in the returned\n    HTML. Use this to introduce additional meta tags and scripts."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "secID": null,
          "title": "Hot rebuilding with nodemon",
          "contents": [
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "The "
                },
                {
                  "type": "InlineCode",
                  "code": "spec-md"
                },
                {
                  "type": "Text",
                  "value": " shell executable follows the "
                },
                {
                  "type": "Link",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Unix Philosophy"
                    }
                  ],
                  "url": "http://www.faqs.org/docs/artu/ch01s06.html"
                },
                {
                  "type": "Text",
                  "value": "\nof doing one thing and doing it well. Try out "
                },
                {
                  "type": "InlineCode",
                  "code": "nodemon"
                },
                {
                  "type": "Text",
                  "value": " to continuously rebuild\nthe HTML output as you edit the markdown specification:"
                }
              ]
            },
            {
              "type": "Code",
              "raw": false,
              "lang": "sh",
              "example": false,
              "counter": false,
              "code": "npm install -g nodemon\nnodemon --exec \"spec-md > ./path/to/output.html\" ./path/to/markdown.md\n"
            }
          ]
        }
      ]
    },
    {
      "type": "Section",
      "secID": null,
      "title": "Contributing to Spec Markdown",
      "contents": [
        {
          "type": "Paragraph",
          "contents": [
            {
              "type": "Text",
              "value": "We want to make contributing to this project as easy and transparent as\npossible. Hopefully this document makes the process for contributing clear and\nanswers any questions you may have. If not, feel free to open an\n"
            },
            {
              "type": "Link",
              "contents": [
                {
                  "type": "Text",
                  "value": "Issue"
                }
              ],
              "url": "https://github.com/leebyron/spec-md/issues"
            },
            {
              "type": "Text",
              "value": "."
            }
          ]
        },
        {
          "type": "Section",
          "secID": null,
          "title": "Pull Requests",
          "contents": [
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "All active development of Spec Markdown happens on GitHub. We actively welcome\nyour "
                },
                {
                  "type": "Link",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "pull requests"
                    }
                  ],
                  "url": "https://help.github.com/articles/creating-a-pull-request"
                },
                {
                  "type": "Text",
                  "value": "."
                }
              ]
            },
            {
              "type": "List",
              "ordered": true,
              "items": [
                {
                  "type": "ListItem",
                  "contents": [
                    {
                      "type": "Link",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Fork the repo"
                        }
                      ],
                      "url": "https://github.com/leebyron/spec-md/"
                    },
                    {
                      "type": "Text",
                      "value": " and create your branch from "
                    },
                    {
                      "type": "InlineCode",
                      "code": "master"
                    },
                    {
                      "type": "Text",
                      "value": "."
                    }
                  ]
                },
                {
                  "type": "ListItem",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Install all dependencies. ("
                    },
                    {
                      "type": "InlineCode",
                      "code": "npm install"
                    },
                    {
                      "type": "Text",
                      "value": ")"
                    }
                  ]
                },
                {
                  "type": "ListItem",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "If you've added code, add tests."
                    }
                  ]
                },
                {
                  "type": "ListItem",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "If you've changed APIs, update the documentation."
                    }
                  ]
                },
                {
                  "type": "ListItem",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Run tests and ensure your code passes lint. ("
                    },
                    {
                      "type": "InlineCode",
                      "code": "npm test"
                    },
                    {
                      "type": "Text",
                      "value": ")"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "secID": null,
          "title": "`master` is unsafe",
          "contents": [
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "We will do our best to keep "
                },
                {
                  "type": "InlineCode",
                  "code": "master"
                },
                {
                  "type": "Text",
                  "value": " in good shape, with tests passing at all\ntimes. But in order to move fast, we might make API changes that your\napplication might not be compatible with. We will do our best to communicate\nthese changes and always "
                },
                {
                  "type": "Link",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "version"
                    }
                  ],
                  "url": "http://semver.org/"
                },
                {
                  "type": "Text",
                  "value": " appropriately so you can\nlock into a specific version if need be. If any of this is worrysome to you,\njust use "
                },
                {
                  "type": "Link",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "npm"
                    }
                  ],
                  "url": "https://www.npmjs.org/package/spec-md"
                },
                {
                  "type": "Text",
                  "value": "."
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "secID": null,
          "title": "Issues",
          "contents": [
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "We use GitHub issues to track public bugs and requests. Please ensure your bug\ndescription is clear and has sufficient instructions to be able to reproduce the\nissue. The best way is to provide a reduced test case on jsFiddle or jsBin."
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "secID": null,
          "title": "Coding Style",
          "contents": [
            {
              "type": "List",
              "ordered": false,
              "items": [
                {
                  "type": "ListItem",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "2 spaces for indentation (no tabs)"
                    }
                  ]
                },
                {
                  "type": "ListItem",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "80 character line length strongly preferred."
                    }
                  ]
                },
                {
                  "type": "ListItem",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Prefer "
                    },
                    {
                      "type": "InlineCode",
                      "code": "'"
                    },
                    {
                      "type": "Text",
                      "value": " over "
                    },
                    {
                      "type": "InlineCode",
                      "code": "\""
                    }
                  ]
                },
                {
                  "type": "ListItem",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Use semicolons;"
                    }
                  ]
                },
                {
                  "type": "ListItem",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Trailing commas,"
                    }
                  ]
                },
                {
                  "type": "ListItem",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Avd abbr wrds."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "secID": null,
          "title": "License",
          "contents": [
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "By contributing to Spec Markdown, you agree that your contributions will be\nlicensed under its MIT license.\n"
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}