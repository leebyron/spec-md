{
  "type": "Document",
  "title": {
    "type": "DocumentTitle",
    "value": "GraphQL"
  },
  "contents": [
    {
      "type": "Paragraph",
      "contents": [
        {
          "type": "Italic",
          "contents": [
            {
              "type": "Text",
              "value": "Current Working Draft"
            }
          ]
        }
      ]
    },
    {
      "type": "Subsection",
      "header": {
        "type": "Subheader",
        "title": "Introduction"
      },
      "contents": [
        {
          "type": "Paragraph",
          "contents": [
            {
              "type": "Text",
              "value": "This is the specification for GraphQL, a query language and execution engine originally created at Facebook in 2012 for describing the capabilities and requirements of data models for client-server applications. The development of this open standard started in 2015. This specification was licensed under OWFa 1.0 in 2017. Copyright and trademark was transferred to the GraphQL Foundation in 2019."
            }
          ]
        },
        {
          "type": "Paragraph",
          "contents": [
            {
              "type": "Text",
              "value": "GraphQL has evolved and may continue to evolve in future editions of this specification. Previous editions of the GraphQL specification can be found at permalinks that match their "
            },
            {
              "type": "Link",
              "contents": [
                {
                  "type": "Text",
                  "value": "release tag"
                }
              ],
              "url": "https://github.com/graphql/graphql-spec/releases"
            },
            {
              "type": "Text",
              "value": ". The latest working draft release can be found at "
            },
            {
              "type": "Link",
              "contents": [
                {
                  "type": "Text",
                  "value": "https://spec.graphql.org/draft"
                }
              ],
              "url": "https://spec.graphql.org/draft"
            },
            {
              "type": "Text",
              "value": "."
            }
          ]
        }
      ]
    },
    {
      "type": "Subsection",
      "header": {
        "type": "Subheader",
        "title": "Copyright notice"
      },
      "contents": [
        {
          "type": "Paragraph",
          "contents": [
            {
              "type": "Text",
              "value": "Copyright © 2015-2018, Facebook, Inc."
            }
          ]
        },
        {
          "type": "Paragraph",
          "contents": [
            {
              "type": "Text",
              "value": "Copyright © 2019-present, GraphQL Foundation"
            }
          ]
        },
        {
          "type": "Paragraph",
          "contents": [
            {
              "type": "Text",
              "value": "As of September 26, 2017, the following persons or entities have made this Specification available under the Open Web Foundation Final Specification Agreement (OWFa 1.0), which is available at "
            },
            {
              "type": "Link",
              "contents": [
                {
                  "type": "Text",
                  "value": "openwebfoundation.org"
                }
              ],
              "url": "http://www.openwebfoundation.org/legal/the-owf-1-0-agreements/owfa-1-0"
            },
            {
              "type": "Text",
              "value": "."
            }
          ]
        },
        {
          "type": "List",
          "ordered": false,
          "items": [
            {
              "type": "ListItem",
              "contents": [
                {
                  "type": "Text",
                  "value": "Facebook, Inc."
                }
              ]
            }
          ]
        },
        {
          "type": "Paragraph",
          "contents": [
            {
              "type": "Text",
              "value": "You can review the signed copies of the Open Web Foundation Final Specification Agreement Version 1.0 for this specification at "
            },
            {
              "type": "Link",
              "contents": [
                {
                  "type": "Text",
                  "value": "github.com/graphql/graphql-spec"
                }
              ],
              "url": "https://github.com/graphql/graphql-spec/tree/master/signed-agreements"
            },
            {
              "type": "Text",
              "value": ", which may also include additional parties to those listed above."
            }
          ]
        },
        {
          "type": "Paragraph",
          "contents": [
            {
              "type": "Text",
              "value": "Your use of this Specification may be subject to other third party rights. THIS SPECIFICATION IS PROVIDED “AS IS.” The contributors expressly disclaim any warranties (express, implied, or otherwise), including implied warranties of merchantability, non-infringement, fitness for a particular purpose, or title, related to the Specification. The entire risk as to implementing or otherwise using the Specification is assumed by the Specification implementer and user. IN NO EVENT WILL ANY PARTY BE LIABLE TO ANY OTHER PARTY FOR LOST PROFITS OR ANY FORM OF INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES OF ANY CHARACTER FROM ANY CAUSES OF ACTION OF ANY KIND WITH RESPECT TO THIS SPECIFICATION OR ITS GOVERNING AGREEMENT, WHETHER BASED ON BREACH OF CONTRACT, TORT (INCLUDING NEGLIGENCE), OR OTHERWISE, AND WHETHER OR NOT THE OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
            }
          ]
        }
      ]
    },
    {
      "type": "Subsection",
      "header": {
        "type": "Subheader",
        "title": "Conformance"
      },
      "contents": [
        {
          "type": "Paragraph",
          "contents": [
            {
              "type": "Text",
              "value": "A conforming implementation of GraphQL must fulfill all normative requirements. Conformance requirements are described in this document via both descriptive assertions and key words with clearly defined meanings."
            }
          ]
        },
        {
          "type": "Paragraph",
          "contents": [
            {
              "type": "Text",
              "value": "The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in the normative portions of this document are to be interpreted as described in "
            },
            {
              "type": "Link",
              "contents": [
                {
                  "type": "Text",
                  "value": "IETF RFC 2119"
                }
              ],
              "url": "https://tools.ietf.org/html/rfc2119"
            },
            {
              "type": "Text",
              "value": ". These key words may appear in lowercase and still retain their meaning unless explicitly declared as non-normative."
            }
          ]
        },
        {
          "type": "Paragraph",
          "contents": [
            {
              "type": "Text",
              "value": "A conforming implementation of GraphQL may provide additional functionality, but must not where explicitly disallowed or would otherwise result in non-conformance."
            }
          ]
        }
      ]
    },
    {
      "type": "Subsection",
      "header": {
        "type": "Subheader",
        "title": "Conforming Algorithms"
      },
      "contents": [
        {
          "type": "Paragraph",
          "contents": [
            {
              "type": "Text",
              "value": "Algorithm steps phrased in imperative grammar (e.g. “Return the result of calling resolver”) are to be interpreted with the same level of requirement as the algorithm it is contained within. Any algorithm referenced within an algorithm step (e.g. “Let completedResult be the result of calling CompleteValue()”) is to be interpreted as having at least the same level of requirement as the algorithm containing that step."
            }
          ]
        },
        {
          "type": "Paragraph",
          "contents": [
            {
              "type": "Text",
              "value": "Conformance requirements expressed as algorithms can be fulfilled by an implementation of this specification in any way as long as the perceived result is equivalent. Algorithms described in this document are written to be easy to understand. Implementers are encouraged to include equivalent but optimized implementations."
            }
          ]
        },
        {
          "type": "Paragraph",
          "contents": [
            {
              "type": "Text",
              "value": "See "
            },
            {
              "type": "Link",
              "contents": [
                {
                  "type": "Text",
                  "value": "Appendix A"
                }
              ],
              "url": "#sec-Appendix-Notation-Conventions"
            },
            {
              "type": "Text",
              "value": " for more details about the definition of algorithms and other notational conventions used in this document."
            }
          ]
        }
      ]
    },
    {
      "type": "Subsection",
      "header": {
        "type": "Subheader",
        "title": "Non-Normative Portions"
      },
      "contents": [
        {
          "type": "Paragraph",
          "contents": [
            {
              "type": "Text",
              "value": "All contents of this document are normative except portions explicitly declared as non-normative."
            }
          ]
        },
        {
          "type": "Paragraph",
          "contents": [
            {
              "type": "Text",
              "value": "Examples in this document are non-normative, and are presented to aid understanding of introduced concepts and the behavior of normative portions of the specification. Examples are either introduced explicitly in prose (e.g. “for example”) or are set apart in example or counter-example blocks, like this:"
            }
          ]
        },
        {
          "type": "Code",
          "raw": false,
          "lang": null,
          "example": true,
          "counter": false,
          "code": "This is an example of a non-normative example.\n"
        },
        {
          "type": "Code",
          "raw": false,
          "lang": null,
          "example": true,
          "counter": true,
          "code": "This is an example of a non-normative counter-example.\n"
        },
        {
          "type": "Paragraph",
          "contents": [
            {
              "type": "Text",
              "value": "Notes in this document are non-normative, and are presented to clarify intent, draw attention to potential edge-cases and pit-falls, and answer common questions that arise during implementation. Notes are either introduced explicitly in prose (e.g. “Note: “) or are set apart in a note block, like this:"
            }
          ]
        },
        {
          "type": "Note",
          "contents": [
            {
              "type": "Text",
              "value": "This is an example of a non-normative note."
            }
          ]
        }
      ]
    },
    {
      "type": "Section",
      "header": {
        "type": "Header",
        "level": 1,
        "secID": null,
        "title": "Overview"
      },
      "contents": [
        {
          "type": "Paragraph",
          "contents": [
            {
              "type": "Text",
              "value": "GraphQL is a query language designed to build client applications by providing an intuitive and flexible syntax and system for describing their data requirements and interactions."
            }
          ]
        },
        {
          "type": "Paragraph",
          "contents": [
            {
              "type": "Text",
              "value": "For example, this GraphQL request will receive the name of the user with id 4 from the Facebook implementation of GraphQL."
            }
          ]
        },
        {
          "type": "Code",
          "raw": false,
          "lang": "graphql",
          "example": true,
          "counter": false,
          "code": "{\n  user(id: 4) {\n    name\n  }\n}\n"
        },
        {
          "type": "Paragraph",
          "contents": [
            {
              "type": "Text",
              "value": "Which produces the resulting data (in JSON):"
            }
          ]
        },
        {
          "type": "Code",
          "raw": false,
          "lang": "json",
          "example": true,
          "counter": false,
          "code": "{\n  \"user\": {\n    \"name\": \"Mark Zuckerberg\"\n  }\n}\n"
        },
        {
          "type": "Paragraph",
          "contents": [
            {
              "type": "Text",
              "value": "GraphQL is not a programming language capable of arbitrary computation, but is instead a language used to query application services that have capabilities defined in this specification. GraphQL does not mandate a particular programming language or storage system for application services that implement it. Instead, application services take their capabilities and map them to a uniform language, type system, and philosophy that GraphQL encodes. This provides a unified interface friendly to product development and a powerful platform for tool-building."
            }
          ]
        },
        {
          "type": "Paragraph",
          "contents": [
            {
              "type": "Text",
              "value": "GraphQL has a number of design principles:"
            }
          ]
        },
        {
          "type": "List",
          "ordered": false,
          "items": [
            {
              "type": "ListItem",
              "contents": [
                {
                  "type": "Bold",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Hierarchical"
                    }
                  ]
                },
                {
                  "type": "Text",
                  "value": ": Most product development today involves the creation and manipulation of view hierarchies. To achieve congruence with the structure of these applications, a GraphQL query itself is structured hierarchically. The query is shaped just like the data it returns. It is a natural way for clients to describe data requirements."
                }
              ]
            },
            {
              "type": "ListItem",
              "contents": [
                {
                  "type": "Bold",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Product-centric"
                    }
                  ]
                },
                {
                  "type": "Text",
                  "value": ": GraphQL is unapologetically driven by the requirements of views and the front-end engineers that write them. GraphQL starts with their way of thinking and requirements and builds the language and runtime necessary to enable that."
                }
              ]
            },
            {
              "type": "ListItem",
              "contents": [
                {
                  "type": "Bold",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Strong-typing"
                    }
                  ]
                },
                {
                  "type": "Text",
                  "value": ": Every GraphQL service defines an application-specific type system. Queries are executed within the context of that type system. Given a query, tools can ensure that the query is both syntactically correct and valid within the GraphQL type system before execution, i.e. at development time, and the service can make certain guarantees about the shape and nature of the response."
                }
              ]
            },
            {
              "type": "ListItem",
              "contents": [
                {
                  "type": "Bold",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Client-specified queries"
                    }
                  ]
                },
                {
                  "type": "Text",
                  "value": ": Through its type system, a GraphQL service publishes the capabilities that its clients are allowed to consume. It is the client that is responsible for specifying exactly how it will consume those published capabilities. These queries are specified at field-level granularity. In the majority of client-server applications written without GraphQL, the service determines the data returned in its various scripted endpoints. A GraphQL query, on the other hand, returns exactly what a client asks for and no more."
                }
              ]
            },
            {
              "type": "ListItem",
              "contents": [
                {
                  "type": "Bold",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Introspective"
                    }
                  ]
                },
                {
                  "type": "Text",
                  "value": ": GraphQL is introspective. A GraphQL service’s type system must be queryable by the GraphQL language itself, as will be described in this specification. GraphQL introspection serves as a powerful platform for building common tools and client software libraries."
                }
              ]
            }
          ]
        },
        {
          "type": "Paragraph",
          "contents": [
            {
              "type": "Text",
              "value": "Because of these principles, GraphQL is a powerful and productive environment for building client applications. Product developers and designers building applications against working GraphQL services—supported with quality tools—can quickly become productive without reading extensive documentation and with little or no formal training. To enable that experience, there must be those that build those services and tools."
            }
          ]
        },
        {
          "type": "Paragraph",
          "contents": [
            {
              "type": "Text",
              "value": "The following formal specification serves as a reference for those builders. It describes the language and its grammar, the type system and the introspection system used to query it, and the execution and validation engines with the algorithms to power them. The goal of this specification is to provide a foundation and framework for an ecosystem of GraphQL tools, client libraries, and service implementations—spanning both organizations and platforms—that has yet to be built. We look forward to working with the community in order to do that. "
            }
          ]
        }
      ]
    },
    {
      "type": "Section",
      "header": {
        "type": "Header",
        "level": 1,
        "secID": null,
        "title": "Language"
      },
      "contents": [
        {
          "type": "Paragraph",
          "contents": [
            {
              "type": "Text",
              "value": "Clients use the GraphQL query language to make requests to a GraphQL service. We refer to these request sources as documents. A document may contain operations (queries, mutations, and subscriptions) as well as fragments, a common unit of composition allowing for query reuse."
            }
          ]
        },
        {
          "type": "Paragraph",
          "contents": [
            {
              "type": "Text",
              "value": "A GraphQL document is defined as a syntactic grammar where terminal symbols are tokens (indivisible lexical units). These tokens are defined in a lexical grammar which matches patterns of source characters. In this document, syntactic grammar productions are distinguished with a colon "
            },
            {
              "type": "InlineCode",
              "code": ":"
            },
            {
              "type": "Text",
              "value": " while lexical grammar productions are distinguished with a double-colon "
            },
            {
              "type": "InlineCode",
              "code": "::"
            },
            {
              "type": "Text",
              "value": "."
            }
          ]
        },
        {
          "type": "Paragraph",
          "contents": [
            {
              "type": "Text",
              "value": "The source text of a GraphQL document must be a sequence of "
            },
            {
              "type": "NonTerminal",
              "name": "SourceCharacter",
              "params": null
            },
            {
              "type": "Text",
              "value": ". The character sequence must be described by a sequence of "
            },
            {
              "type": "NonTerminal",
              "name": "Token",
              "params": null
            },
            {
              "type": "Text",
              "value": " and "
            },
            {
              "type": "NonTerminal",
              "name": "Ignored",
              "params": null
            },
            {
              "type": "Text",
              "value": " lexical grammars. The lexical token sequence, omitting "
            },
            {
              "type": "NonTerminal",
              "name": "Ignored",
              "params": null
            },
            {
              "type": "Text",
              "value": ", must be described by a single "
            },
            {
              "type": "NonTerminal",
              "name": "Document",
              "params": null
            },
            {
              "type": "Text",
              "value": " syntactic grammar."
            }
          ]
        },
        {
          "type": "Note",
          "contents": [
            {
              "type": "Text",
              "value": "See "
            },
            {
              "type": "Link",
              "contents": [
                {
                  "type": "Text",
                  "value": "Appendix A"
                }
              ],
              "url": "#sec-Appendix-Notation-Conventions"
            },
            {
              "type": "Text",
              "value": " for more information about the lexical and syntactic grammar and other notational conventions used throughout this document."
            }
          ]
        },
        {
          "type": "Subsection",
          "header": {
            "type": "Subheader",
            "title": "Lexical Analysis & Syntactic Parse"
          },
          "contents": [
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "The source text of a GraphQL document is first converted into a sequence of lexical tokens, "
                },
                {
                  "type": "NonTerminal",
                  "name": "Token",
                  "params": null
                },
                {
                  "type": "Text",
                  "value": ", and ignored tokens, "
                },
                {
                  "type": "NonTerminal",
                  "name": "Ignored",
                  "params": null
                },
                {
                  "type": "Text",
                  "value": ". The source text is scanned from left to right, repeatedly taking the next possible sequence of code-points allowed by the lexical grammar productions as the next token. This sequence of lexical tokens are then scanned from left to right to produce an abstract syntax tree (AST) according to the "
                },
                {
                  "type": "NonTerminal",
                  "name": "Document",
                  "params": null
                },
                {
                  "type": "Text",
                  "value": " syntactical grammar."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Lexical grammar productions in this document use "
                },
                {
                  "type": "Italic",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "lookahead restrictions"
                    }
                  ]
                },
                {
                  "type": "Text",
                  "value": " to remove ambiguity and ensure a single valid lexical analysis. A lexical token is only valid if not followed by a character in its lookahead restriction."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "For example, an "
                },
                {
                  "type": "NonTerminal",
                  "name": "IntValue",
                  "params": null
                },
                {
                  "type": "Text",
                  "value": " has the restriction "
                },
                {
                  "type": "Lookahead",
                  "not": true,
                  "nt": true,
                  "set": [
                    {
                      "type": "NonTerminal",
                      "name": "Digit",
                      "params": null
                    }
                  ]
                },
                {
                  "type": "Text",
                  "value": ", so cannot be followed by a "
                },
                {
                  "type": "NonTerminal",
                  "name": "Digit",
                  "params": null
                },
                {
                  "type": "Text",
                  "value": ". Because of this, the sequence "
                },
                {
                  "type": "Terminal",
                  "value": "123"
                },
                {
                  "type": "Text",
                  "value": " cannot represent the tokens ("
                },
                {
                  "type": "Terminal",
                  "value": "12"
                },
                {
                  "type": "Text",
                  "value": ", "
                },
                {
                  "type": "Terminal",
                  "value": "3"
                },
                {
                  "type": "Text",
                  "value": ") since "
                },
                {
                  "type": "Terminal",
                  "value": "12"
                },
                {
                  "type": "Text",
                  "value": " is followed by the "
                },
                {
                  "type": "NonTerminal",
                  "name": "Digit",
                  "params": null
                },
                {
                  "type": "Text",
                  "value": " "
                },
                {
                  "type": "Terminal",
                  "value": "3"
                },
                {
                  "type": "Text",
                  "value": " and so must only represent a single token. Use "
                },
                {
                  "type": "NonTerminal",
                  "name": "WhiteSpace",
                  "params": null
                },
                {
                  "type": "Text",
                  "value": " or other "
                },
                {
                  "type": "NonTerminal",
                  "name": "Ignored",
                  "params": null
                },
                {
                  "type": "Text",
                  "value": " between characters to represent multiple tokens."
                }
              ]
            },
            {
              "type": "Note",
              "contents": [
                {
                  "type": "Text",
                  "value": "This typically has the same behavior as a “"
                },
                {
                  "type": "Link",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "maximal munch"
                    }
                  ],
                  "url": "https://en.wikipedia.org/wiki/Maximal_munch"
                },
                {
                  "type": "Text",
                  "value": "” longest possible match, however some lookahead restrictions include additional constraints."
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Source Text"
          },
          "contents": [
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "SourceCharacter",
                "params": null
              },
              "defType": 2,
              "rhs": {
                "type": "ListRHS",
                "defs": [
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Prose",
                        "text": "U+0009"
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Prose",
                        "text": "U+000A"
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Prose",
                        "text": "U+000D"
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Prose",
                        "text": "U+0020–U+FFFF"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "GraphQL documents are expressed as a sequence of "
                },
                {
                  "type": "Link",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Unicode"
                    }
                  ],
                  "url": "https://unicode.org/standard/standard.html"
                },
                {
                  "type": "Text",
                  "value": " characters. However, with few exceptions, most of GraphQL is expressed only in the original non-control ASCII range so as to be as widely compatible with as many existing tools, languages, and serialization formats as possible and avoid display issues in text editors and source control."
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Unicode"
              },
              "contents": [
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "UnicodeBOM",
                    "params": null
                  },
                  "defType": 2,
                  "rhs": {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Prose",
                        "text": "Byte Order Mark (U+FEFF)"
                      }
                    ]
                  }
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Non-ASCII Unicode characters may freely appear within "
                    },
                    {
                      "type": "NonTerminal",
                      "name": "StringValue",
                      "params": null
                    },
                    {
                      "type": "Text",
                      "value": " and "
                    },
                    {
                      "type": "NonTerminal",
                      "name": "Comment",
                      "params": null
                    },
                    {
                      "type": "Text",
                      "value": " portions of GraphQL."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "The “Byte Order Mark” is a special Unicode character which may appear at the beginning of a file containing Unicode which programs may use to determine the fact that the text stream is Unicode, what endianness the text stream is in, and which of several Unicode encodings to interpret."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "White Space"
              },
              "contents": [
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "WhiteSpace",
                    "params": null
                  },
                  "defType": 2,
                  "rhs": {
                    "type": "ListRHS",
                    "defs": [
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "Prose",
                            "text": "Horizontal Tab (U+0009)"
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "Prose",
                            "text": "Space (U+0020)"
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "White space is used to improve legibility of source text and act as separation between tokens, and any amount of white space may appear before or after any token. White space between tokens is not significant to the semantic meaning of a GraphQL Document, however white space characters may appear within a "
                    },
                    {
                      "type": "NonTerminal",
                      "name": "String",
                      "params": null
                    },
                    {
                      "type": "Text",
                      "value": " or "
                    },
                    {
                      "type": "NonTerminal",
                      "name": "Comment",
                      "params": null
                    },
                    {
                      "type": "Text",
                      "value": " token."
                    }
                  ]
                },
                {
                  "type": "Note",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "GraphQL intentionally does not consider Unicode “Zs” category characters as white-space, avoiding misinterpretation by text editors and source control tools."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Line Terminators"
              },
              "contents": [
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "LineTerminator",
                    "params": null
                  },
                  "defType": 2,
                  "rhs": {
                    "type": "ListRHS",
                    "defs": [
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "Prose",
                            "text": "New Line (U+000A)"
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "Prose",
                            "text": "Carriage Return (U+000D)"
                          },
                          {
                            "type": "Lookahead",
                            "not": true,
                            "nt": false,
                            "set": [
                              {
                                "type": "Prose",
                                "text": "New Line (U+000A)"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "Prose",
                            "text": "Carriage Return (U+000D)"
                          },
                          {
                            "type": "Prose",
                            "text": "New Line (U+000A)"
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Like white space, line terminators are used to improve the legibility of source text, any amount may appear before or after any other token and have no significance to the semantic meaning of a GraphQL Document. Line terminators are not found within any other token."
                    }
                  ]
                },
                {
                  "type": "Note",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Any error reporting which provides the line number in the source of the offending syntax should use the preceding amount of "
                    },
                    {
                      "type": "NonTerminal",
                      "name": "LineTerminator",
                      "params": null
                    },
                    {
                      "type": "Text",
                      "value": " to produce the line number."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Comments"
              },
              "contents": [
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "Comment",
                    "params": null
                  },
                  "defType": 2,
                  "rhs": {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Terminal",
                        "value": "#"
                      },
                      {
                        "type": "Quantified",
                        "token": {
                          "type": "NonTerminal",
                          "name": "CommentChar",
                          "params": null
                        },
                        "isList": true,
                        "isOptional": true
                      },
                      {
                        "type": "Lookahead",
                        "not": true,
                        "nt": true,
                        "set": [
                          {
                            "type": "NonTerminal",
                            "name": "CommentChar",
                            "params": null
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "CommentChar",
                    "params": null
                  },
                  "defType": 2,
                  "rhs": {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Constrained",
                        "token": {
                          "type": "NonTerminal",
                          "name": "SourceCharacter",
                          "params": null
                        },
                        "constraint": {
                          "type": "ButNot",
                          "tokens": [
                            {
                              "type": "NonTerminal",
                              "name": "LineTerminator",
                              "params": null
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "GraphQL source documents may contain single-line comments, starting with the "
                    },
                    {
                      "type": "Terminal",
                      "value": "#"
                    },
                    {
                      "type": "Text",
                      "value": " marker."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "A comment can contain any Unicode code point in "
                    },
                    {
                      "type": "NonTerminal",
                      "name": "SourceCharacter",
                      "params": null
                    },
                    {
                      "type": "Text",
                      "value": " except "
                    },
                    {
                      "type": "NonTerminal",
                      "name": "LineTerminator",
                      "params": null
                    },
                    {
                      "type": "Text",
                      "value": " so a comment always consists of all code points starting with the "
                    },
                    {
                      "type": "Terminal",
                      "value": "#"
                    },
                    {
                      "type": "Text",
                      "value": " character up to but not including the "
                    },
                    {
                      "type": "NonTerminal",
                      "name": "LineTerminator",
                      "params": null
                    },
                    {
                      "type": "Text",
                      "value": " (or end of the source)."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Comments are "
                    },
                    {
                      "type": "NonTerminal",
                      "name": "Ignored",
                      "params": null
                    },
                    {
                      "type": "Text",
                      "value": " like white space and may appear after any token, or before a "
                    },
                    {
                      "type": "NonTerminal",
                      "name": "LineTerminator",
                      "params": null
                    },
                    {
                      "type": "Text",
                      "value": ", and have no significance to the semantic meaning of a GraphQL Document."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Insignificant Commas"
              },
              "contents": [
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "Comma",
                    "params": null
                  },
                  "defType": 2,
                  "rhs": {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Terminal",
                        "value": ","
                      }
                    ]
                  }
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Similar to white space and line terminators, commas ("
                    },
                    {
                      "type": "Terminal",
                      "value": ","
                    },
                    {
                      "type": "Text",
                      "value": ") are used to improve the legibility of source text and separate lexical tokens but are otherwise syntactically and semantically insignificant within GraphQL Documents."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Non-significant comma characters ensure that the absence or presence of a comma does not meaningfully alter the interpreted syntax of the document, as this can be a common user-error in other languages. It also allows for the stylistic use of either trailing commas or line-terminators as list delimiters which are both often desired for legibility and maintainability of source code."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Lexical Tokens"
              },
              "contents": [
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "Token",
                    "params": null
                  },
                  "defType": 2,
                  "rhs": {
                    "type": "ListRHS",
                    "defs": [
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "Punctuator",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "Name",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "IntValue",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "FloatValue",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "StringValue",
                            "params": null
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "A GraphQL document is comprised of several kinds of indivisible lexical tokens defined here in a lexical grammar by patterns of source Unicode characters."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Tokens are later used as terminal symbols in GraphQL syntactic grammar rules."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Ignored Tokens"
              },
              "contents": [
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "Ignored",
                    "params": null
                  },
                  "defType": 2,
                  "rhs": {
                    "type": "ListRHS",
                    "defs": [
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "UnicodeBOM",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "WhiteSpace",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "LineTerminator",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "Comment",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "Comma",
                            "params": null
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "NonTerminal",
                      "name": "Ignored",
                      "params": null
                    },
                    {
                      "type": "Text",
                      "value": " tokens are used to improve readability and provide separation between "
                    },
                    {
                      "type": "NonTerminal",
                      "name": "Token",
                      "params": null
                    },
                    {
                      "type": "Text",
                      "value": ", but are otherwise insignificant and not referenced in syntactical grammar productions."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Any amount of "
                    },
                    {
                      "type": "NonTerminal",
                      "name": "Ignored",
                      "params": null
                    },
                    {
                      "type": "Text",
                      "value": " may appear before and after every lexical token. No ignored regions of a source document are significant, however "
                    },
                    {
                      "type": "NonTerminal",
                      "name": "SourceCharacter",
                      "params": null
                    },
                    {
                      "type": "Text",
                      "value": " which appear in "
                    },
                    {
                      "type": "NonTerminal",
                      "name": "Ignored",
                      "params": null
                    },
                    {
                      "type": "Text",
                      "value": " may also appear within a lexical "
                    },
                    {
                      "type": "NonTerminal",
                      "name": "Token",
                      "params": null
                    },
                    {
                      "type": "Text",
                      "value": " in a significant way, for example a "
                    },
                    {
                      "type": "NonTerminal",
                      "name": "StringValue",
                      "params": null
                    },
                    {
                      "type": "Text",
                      "value": " may contain white space characters. No "
                    },
                    {
                      "type": "NonTerminal",
                      "name": "Ignored",
                      "params": null
                    },
                    {
                      "type": "Text",
                      "value": " may appear "
                    },
                    {
                      "type": "Italic",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "within"
                        }
                      ]
                    },
                    {
                      "type": "Text",
                      "value": " a "
                    },
                    {
                      "type": "NonTerminal",
                      "name": "Token",
                      "params": null
                    },
                    {
                      "type": "Text",
                      "value": ", for example no white space characters are permitted between the characters defining a "
                    },
                    {
                      "type": "NonTerminal",
                      "name": "FloatValue",
                      "params": null
                    },
                    {
                      "type": "Text",
                      "value": "."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Punctuators"
              },
              "contents": [
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "Punctuator",
                    "params": null
                  },
                  "defType": 2,
                  "rhs": {
                    "type": "OneOfRHS",
                    "rows": [
                      [
                        {
                          "type": "Terminal",
                          "value": "!"
                        },
                        {
                          "type": "Terminal",
                          "value": "$"
                        },
                        {
                          "type": "Terminal",
                          "value": "&"
                        },
                        {
                          "type": "Terminal",
                          "value": "("
                        },
                        {
                          "type": "Terminal",
                          "value": ")"
                        },
                        {
                          "type": "Terminal",
                          "value": "..."
                        },
                        {
                          "type": "Terminal",
                          "value": ":"
                        },
                        {
                          "type": "Terminal",
                          "value": "="
                        },
                        {
                          "type": "Terminal",
                          "value": "@"
                        },
                        {
                          "type": "Terminal",
                          "value": "["
                        },
                        {
                          "type": "Terminal",
                          "value": "]"
                        },
                        {
                          "type": "Terminal",
                          "value": "{"
                        },
                        {
                          "type": "Terminal",
                          "value": "|"
                        },
                        {
                          "type": "Terminal",
                          "value": "}"
                        }
                      ]
                    ]
                  }
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "GraphQL documents include punctuation in order to describe structure. GraphQL is a data description language and not a programming language, therefore GraphQL lacks the punctuation often used to describe mathematical expressions."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Names"
              },
              "contents": [
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "Name",
                    "params": null
                  },
                  "defType": 2,
                  "rhs": {
                    "type": "ListRHS",
                    "defs": [
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "NameStart",
                            "params": null
                          },
                          {
                            "type": "Quantified",
                            "token": {
                              "type": "NonTerminal",
                              "name": "NameContinue",
                              "params": null
                            },
                            "isList": true,
                            "isOptional": true
                          },
                          {
                            "type": "Lookahead",
                            "not": true,
                            "nt": true,
                            "set": [
                              {
                                "type": "NonTerminal",
                                "name": "NameContinue",
                                "params": null
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "NameStart",
                    "params": null
                  },
                  "defType": 2,
                  "rhs": {
                    "type": "ListRHS",
                    "defs": [
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "Letter",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "Terminal",
                            "value": "_"
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "NameContinue",
                    "params": null
                  },
                  "defType": 2,
                  "rhs": {
                    "type": "ListRHS",
                    "defs": [
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "Letter",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "Digit",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "Terminal",
                            "value": "_"
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "Letter",
                    "params": null
                  },
                  "defType": 2,
                  "rhs": {
                    "type": "OneOfRHS",
                    "rows": [
                      [
                        {
                          "type": "Terminal",
                          "value": "A"
                        },
                        {
                          "type": "Terminal",
                          "value": "B"
                        },
                        {
                          "type": "Terminal",
                          "value": "C"
                        },
                        {
                          "type": "Terminal",
                          "value": "D"
                        },
                        {
                          "type": "Terminal",
                          "value": "E"
                        },
                        {
                          "type": "Terminal",
                          "value": "F"
                        },
                        {
                          "type": "Terminal",
                          "value": "G"
                        },
                        {
                          "type": "Terminal",
                          "value": "H"
                        },
                        {
                          "type": "Terminal",
                          "value": "I"
                        },
                        {
                          "type": "Terminal",
                          "value": "J"
                        },
                        {
                          "type": "Terminal",
                          "value": "K"
                        },
                        {
                          "type": "Terminal",
                          "value": "L"
                        },
                        {
                          "type": "Terminal",
                          "value": "M"
                        }
                      ],
                      [
                        {
                          "type": "Terminal",
                          "value": "N"
                        },
                        {
                          "type": "Terminal",
                          "value": "O"
                        },
                        {
                          "type": "Terminal",
                          "value": "P"
                        },
                        {
                          "type": "Terminal",
                          "value": "Q"
                        },
                        {
                          "type": "Terminal",
                          "value": "R"
                        },
                        {
                          "type": "Terminal",
                          "value": "S"
                        },
                        {
                          "type": "Terminal",
                          "value": "T"
                        },
                        {
                          "type": "Terminal",
                          "value": "U"
                        },
                        {
                          "type": "Terminal",
                          "value": "V"
                        },
                        {
                          "type": "Terminal",
                          "value": "W"
                        },
                        {
                          "type": "Terminal",
                          "value": "X"
                        },
                        {
                          "type": "Terminal",
                          "value": "Y"
                        },
                        {
                          "type": "Terminal",
                          "value": "Z"
                        }
                      ],
                      [
                        {
                          "type": "Terminal",
                          "value": "a"
                        },
                        {
                          "type": "Terminal",
                          "value": "b"
                        },
                        {
                          "type": "Terminal",
                          "value": "c"
                        },
                        {
                          "type": "Terminal",
                          "value": "d"
                        },
                        {
                          "type": "Terminal",
                          "value": "e"
                        },
                        {
                          "type": "Terminal",
                          "value": "f"
                        },
                        {
                          "type": "Terminal",
                          "value": "g"
                        },
                        {
                          "type": "Terminal",
                          "value": "h"
                        },
                        {
                          "type": "Terminal",
                          "value": "i"
                        },
                        {
                          "type": "Terminal",
                          "value": "j"
                        },
                        {
                          "type": "Terminal",
                          "value": "k"
                        },
                        {
                          "type": "Terminal",
                          "value": "l"
                        },
                        {
                          "type": "Terminal",
                          "value": "m"
                        }
                      ],
                      [
                        {
                          "type": "Terminal",
                          "value": "n"
                        },
                        {
                          "type": "Terminal",
                          "value": "o"
                        },
                        {
                          "type": "Terminal",
                          "value": "p"
                        },
                        {
                          "type": "Terminal",
                          "value": "q"
                        },
                        {
                          "type": "Terminal",
                          "value": "r"
                        },
                        {
                          "type": "Terminal",
                          "value": "s"
                        },
                        {
                          "type": "Terminal",
                          "value": "t"
                        },
                        {
                          "type": "Terminal",
                          "value": "u"
                        },
                        {
                          "type": "Terminal",
                          "value": "v"
                        },
                        {
                          "type": "Terminal",
                          "value": "w"
                        },
                        {
                          "type": "Terminal",
                          "value": "x"
                        },
                        {
                          "type": "Terminal",
                          "value": "y"
                        },
                        {
                          "type": "Terminal",
                          "value": "z"
                        }
                      ]
                    ]
                  }
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "Digit",
                    "params": null
                  },
                  "defType": 2,
                  "rhs": {
                    "type": "OneOfRHS",
                    "rows": [
                      [
                        {
                          "type": "Terminal",
                          "value": "0"
                        },
                        {
                          "type": "Terminal",
                          "value": "1"
                        },
                        {
                          "type": "Terminal",
                          "value": "2"
                        },
                        {
                          "type": "Terminal",
                          "value": "3"
                        },
                        {
                          "type": "Terminal",
                          "value": "4"
                        },
                        {
                          "type": "Terminal",
                          "value": "5"
                        },
                        {
                          "type": "Terminal",
                          "value": "6"
                        },
                        {
                          "type": "Terminal",
                          "value": "7"
                        },
                        {
                          "type": "Terminal",
                          "value": "8"
                        },
                        {
                          "type": "Terminal",
                          "value": "9"
                        }
                      ]
                    ]
                  }
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "GraphQL Documents are full of named things: operations, fields, arguments, types, directives, fragments, and variables. All names must follow the same grammatical form."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Names in GraphQL are case-sensitive. That is to say "
                    },
                    {
                      "type": "InlineCode",
                      "code": "name"
                    },
                    {
                      "type": "Text",
                      "value": ", "
                    },
                    {
                      "type": "InlineCode",
                      "code": "Name"
                    },
                    {
                      "type": "Text",
                      "value": ", and "
                    },
                    {
                      "type": "InlineCode",
                      "code": "NAME"
                    },
                    {
                      "type": "Text",
                      "value": " all refer to different names. Underscores are significant, which means "
                    },
                    {
                      "type": "InlineCode",
                      "code": "other_name"
                    },
                    {
                      "type": "Text",
                      "value": " and "
                    },
                    {
                      "type": "InlineCode",
                      "code": "othername"
                    },
                    {
                      "type": "Text",
                      "value": " are two different names."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "A "
                    },
                    {
                      "type": "NonTerminal",
                      "name": "Name",
                      "params": null
                    },
                    {
                      "type": "Text",
                      "value": " must not be followed by a "
                    },
                    {
                      "type": "NonTerminal",
                      "name": "NameContinue",
                      "params": null
                    },
                    {
                      "type": "Text",
                      "value": ". In other words, a "
                    },
                    {
                      "type": "NonTerminal",
                      "name": "Name",
                      "params": null
                    },
                    {
                      "type": "Text",
                      "value": " token is always the longest possible valid sequence. The source characters "
                    },
                    {
                      "type": "Terminal",
                      "value": "a1"
                    },
                    {
                      "type": "Text",
                      "value": " cannot be interpreted as two tokens since "
                    },
                    {
                      "type": "Terminal",
                      "value": "a"
                    },
                    {
                      "type": "Text",
                      "value": " is followed by the "
                    },
                    {
                      "type": "NonTerminal",
                      "name": "NameContinue",
                      "params": null
                    },
                    {
                      "type": "Text",
                      "value": " "
                    },
                    {
                      "type": "Terminal",
                      "value": "1"
                    },
                    {
                      "type": "Text",
                      "value": "."
                    }
                  ]
                },
                {
                  "type": "Note",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Names in GraphQL are limited to the Latin "
                    },
                    {
                      "type": "HTMLTag",
                      "tag": "<acronym>"
                    },
                    {
                      "type": "Text",
                      "value": "ASCII"
                    },
                    {
                      "type": "HTMLTag",
                      "tag": "</acronym>"
                    },
                    {
                      "type": "Text",
                      "value": " subset of "
                    },
                    {
                      "type": "NonTerminal",
                      "name": "SourceCharacter",
                      "params": null
                    },
                    {
                      "type": "Text",
                      "value": " in order to support interoperation with as many other systems as possible."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Document"
          },
          "contents": [
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "Document",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "Definition",
                      "params": null
                    },
                    "isList": true,
                    "isOptional": false
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "Definition",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "ListRHS",
                "defs": [
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "ExecutableDefinition",
                        "params": null
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "TypeSystemDefinition",
                        "params": null
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "TypeSystemExtension",
                        "params": null
                      }
                    ]
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "ExecutableDefinition",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "ListRHS",
                "defs": [
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "OperationDefinition",
                        "params": null
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "FragmentDefinition",
                        "params": null
                      }
                    ]
                  }
                ]
              }
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "A GraphQL Document describes a complete file or request string operated on by a GraphQL service or client. A document contains multiple definitions, either executable or representative of a GraphQL type system."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Documents are only executable by a GraphQL service if they contain an "
                },
                {
                  "type": "NonTerminal",
                  "name": "OperationDefinition",
                  "params": null
                },
                {
                  "type": "Text",
                  "value": " and otherwise only contain "
                },
                {
                  "type": "NonTerminal",
                  "name": "ExecutableDefinition",
                  "params": null
                },
                {
                  "type": "Text",
                  "value": ". However documents which do not contain "
                },
                {
                  "type": "NonTerminal",
                  "name": "OperationDefinition",
                  "params": null
                },
                {
                  "type": "Text",
                  "value": " or do contain "
                },
                {
                  "type": "NonTerminal",
                  "name": "TypeSystemDefinition",
                  "params": null
                },
                {
                  "type": "Text",
                  "value": " or "
                },
                {
                  "type": "NonTerminal",
                  "name": "TypeSystemExtension",
                  "params": null
                },
                {
                  "type": "Text",
                  "value": " may still be parsed and validated to allow client tools to represent many GraphQL uses which may appear across many individual files."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "If a Document contains only one operation, that operation may be unnamed or represented in the shorthand form, which omits both the query keyword and operation name. Otherwise, if a GraphQL Document contains multiple operations, each operation must be named. When submitting a Document with multiple operations to a GraphQL service, the name of the desired operation to be executed must also be provided."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "GraphQL services which only seek to provide GraphQL query execution may choose to only include "
                },
                {
                  "type": "NonTerminal",
                  "name": "ExecutableDefinition",
                  "params": null
                },
                {
                  "type": "Text",
                  "value": " and omit the "
                },
                {
                  "type": "NonTerminal",
                  "name": "TypeSystemDefinition",
                  "params": null
                },
                {
                  "type": "Text",
                  "value": " and "
                },
                {
                  "type": "NonTerminal",
                  "name": "TypeSystemExtension",
                  "params": null
                },
                {
                  "type": "Text",
                  "value": " rules from "
                },
                {
                  "type": "NonTerminal",
                  "name": "Definition",
                  "params": null
                },
                {
                  "type": "Text",
                  "value": "."
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Operations"
          },
          "contents": [
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "OperationDefinition",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "ListRHS",
                "defs": [
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "OperationType",
                        "params": null
                      },
                      {
                        "type": "Quantified",
                        "token": {
                          "type": "NonTerminal",
                          "name": "Name",
                          "params": null
                        },
                        "isList": false,
                        "isOptional": true
                      },
                      {
                        "type": "Quantified",
                        "token": {
                          "type": "NonTerminal",
                          "name": "VariableDefinitions",
                          "params": null
                        },
                        "isList": false,
                        "isOptional": true
                      },
                      {
                        "type": "Quantified",
                        "token": {
                          "type": "NonTerminal",
                          "name": "Directives",
                          "params": null
                        },
                        "isList": false,
                        "isOptional": true
                      },
                      {
                        "type": "NonTerminal",
                        "name": "SelectionSet",
                        "params": null
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "SelectionSet",
                        "params": null
                      }
                    ]
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "OperationType",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "OneOfRHS",
                "rows": [
                  [
                    {
                      "type": "Terminal",
                      "value": "query"
                    },
                    {
                      "type": "Terminal",
                      "value": "mutation"
                    },
                    {
                      "type": "Terminal",
                      "value": "subscription"
                    }
                  ]
                ]
              }
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "There are three types of operations that GraphQL models:"
                }
              ]
            },
            {
              "type": "List",
              "ordered": false,
              "items": [
                {
                  "type": "ListItem",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "query – a read-only fetch."
                    }
                  ]
                },
                {
                  "type": "ListItem",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "mutation – a write followed by a fetch."
                    }
                  ]
                },
                {
                  "type": "ListItem",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "subscription – a long-lived request that fetches data in response to source events."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Each operation is represented by an optional operation name and a selection set."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "For example, this mutation operation might “like” a story and then retrieve the new number of likes:"
                }
              ]
            },
            {
              "type": "Code",
              "raw": false,
              "lang": "graphql",
              "example": true,
              "counter": false,
              "code": "mutation {\n  likeStory(storyID: 12345) {\n    story {\n      likeCount\n    }\n  }\n}\n"
            },
            {
              "type": "Subsection",
              "header": {
                "type": "Subheader",
                "title": "Query shorthand"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "If a document contains only one query operation, and that query defines no variables and contains no directives, that operation may be represented in a short-hand form which omits the query keyword and query name."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "For example, this unnamed query operation is written via query shorthand."
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": "graphql",
                  "example": true,
                  "counter": false,
                  "code": "{\n  field\n}\n"
                },
                {
                  "type": "Note",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "many examples below will use the query short-hand syntax."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Selection Sets"
          },
          "contents": [
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "SelectionSet",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "Terminal",
                    "value": "{"
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "Selection",
                      "params": null
                    },
                    "isList": true,
                    "isOptional": false
                  },
                  {
                    "type": "Terminal",
                    "value": "}"
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "Selection",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "ListRHS",
                "defs": [
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "Field",
                        "params": null
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "FragmentSpread",
                        "params": null
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "InlineFragment",
                        "params": null
                      }
                    ]
                  }
                ]
              }
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "An operation selects the set of information it needs, and will receive exactly that information and nothing more, avoiding over-fetching and under-fetching data."
                }
              ]
            },
            {
              "type": "Code",
              "raw": false,
              "lang": "graphql",
              "example": true,
              "counter": false,
              "code": "{\n  id\n  firstName\n  lastName\n}\n"
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "In this query, the "
                },
                {
                  "type": "InlineCode",
                  "code": "id"
                },
                {
                  "type": "Text",
                  "value": ", "
                },
                {
                  "type": "InlineCode",
                  "code": "firstName"
                },
                {
                  "type": "Text",
                  "value": ", and "
                },
                {
                  "type": "InlineCode",
                  "code": "lastName"
                },
                {
                  "type": "Text",
                  "value": " fields form a selection set. Selection sets may also contain fragment references."
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Fields"
          },
          "contents": [
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "Field",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "Alias",
                      "params": null
                    },
                    "isList": false,
                    "isOptional": true
                  },
                  {
                    "type": "NonTerminal",
                    "name": "Name",
                    "params": null
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "Arguments",
                      "params": null
                    },
                    "isList": false,
                    "isOptional": true
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "Directives",
                      "params": null
                    },
                    "isList": false,
                    "isOptional": true
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "SelectionSet",
                      "params": null
                    },
                    "isList": false,
                    "isOptional": true
                  }
                ]
              }
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "A selection set is primarily composed of fields. A field describes one discrete piece of information available to request within a selection set."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Some fields describe complex data or relationships to other data. In order to further explore this data, a field may itself contain a selection set, allowing for deeply nested requests. All GraphQL operations must specify their selections down to fields which return scalar values to ensure an unambiguously shaped response."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "For example, this operation selects fields of complex data and relationships down to scalar values."
                }
              ]
            },
            {
              "type": "Code",
              "raw": false,
              "lang": "graphql",
              "example": true,
              "counter": false,
              "code": "{\n  me {\n    id\n    firstName\n    lastName\n    birthday {\n      month\n      day\n    }\n    friends {\n      name\n    }\n  }\n}\n"
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Fields in the top-level selection set of an operation often represent some information that is globally accessible to your application and its current viewer. Some typical examples of these top fields include references to a current logged-in viewer, or accessing certain types of data referenced by a unique identifier."
                }
              ]
            },
            {
              "type": "Code",
              "raw": false,
              "lang": "graphql",
              "example": true,
              "counter": false,
              "code": "# `me` could represent the currently logged in viewer.\n{\n  me {\n    name\n  }\n}\n\n# `user` represents one of many users in a graph of data, referred to by a\n# unique identifier.\n{\n  user(id: 4) {\n    name\n  }\n}\n"
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Arguments"
          },
          "contents": [
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "Arguments",
                "params": [
                  {
                    "type": "NonTerminalParam",
                    "conditional": false,
                    "negated": false,
                    "name": "Const"
                  }
                ]
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "Terminal",
                    "value": "("
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "Argument",
                      "params": [
                        {
                          "type": "NonTerminalParam",
                          "conditional": true,
                          "negated": false,
                          "name": "Const"
                        }
                      ]
                    },
                    "isList": true,
                    "isOptional": false
                  },
                  {
                    "type": "Terminal",
                    "value": ")"
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "Argument",
                "params": [
                  {
                    "type": "NonTerminalParam",
                    "conditional": false,
                    "negated": false,
                    "name": "Const"
                  }
                ]
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "NonTerminal",
                    "name": "Name",
                    "params": null
                  },
                  {
                    "type": "Terminal",
                    "value": ":"
                  },
                  {
                    "type": "NonTerminal",
                    "name": "Value",
                    "params": [
                      {
                        "type": "NonTerminalParam",
                        "conditional": true,
                        "negated": false,
                        "name": "Const"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Fields are conceptually functions which return values, and occasionally accept arguments which alter their behavior. These arguments often map directly to function arguments within a GraphQL service’s implementation."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "In this example, we want to query a specific user (requested via the "
                },
                {
                  "type": "InlineCode",
                  "code": "id"
                },
                {
                  "type": "Text",
                  "value": " argument) and their profile picture of a specific "
                },
                {
                  "type": "InlineCode",
                  "code": "size"
                },
                {
                  "type": "Text",
                  "value": ":"
                }
              ]
            },
            {
              "type": "Code",
              "raw": false,
              "lang": "graphql",
              "example": true,
              "counter": false,
              "code": "{\n  user(id: 4) {\n    id\n    name\n    profilePic(size: 100)\n  }\n}\n"
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Many arguments can exist for a given field:"
                }
              ]
            },
            {
              "type": "Code",
              "raw": false,
              "lang": "graphql",
              "example": true,
              "counter": false,
              "code": "{\n  user(id: 4) {\n    id\n    name\n    profilePic(width: 100, height: 50)\n  }\n}\n"
            },
            {
              "type": "Subsection",
              "header": {
                "type": "Subheader",
                "title": "Arguments are unordered"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Arguments may be provided in any syntactic order and maintain identical semantic meaning."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "These two queries are semantically identical:"
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": "graphql",
                  "example": true,
                  "counter": false,
                  "code": "{\n  picture(width: 200, height: 100)\n}\n"
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": "graphql",
                  "example": true,
                  "counter": false,
                  "code": "{\n  picture(height: 100, width: 200)\n}\n"
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Field Alias"
          },
          "contents": [
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "Alias",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "NonTerminal",
                    "name": "Name",
                    "params": null
                  },
                  {
                    "type": "Terminal",
                    "value": ":"
                  }
                ]
              }
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "By default, the key in the response object will use the field name queried. However, you can define a different name by specifying an alias."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "In this example, we can fetch two profile pictures of different sizes and ensure the resulting object will not have duplicate keys:"
                }
              ]
            },
            {
              "type": "Code",
              "raw": false,
              "lang": "graphql",
              "example": true,
              "counter": false,
              "code": "{\n  user(id: 4) {\n    id\n    name\n    smallPic: profilePic(size: 64)\n    bigPic: profilePic(size: 1024)\n  }\n}\n"
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Which returns the result:"
                }
              ]
            },
            {
              "type": "Code",
              "raw": false,
              "lang": "json",
              "example": true,
              "counter": false,
              "code": "{\n  \"user\": {\n    \"id\": 4,\n    \"name\": \"Mark Zuckerberg\",\n    \"smallPic\": \"https://cdn.site.io/pic-4-64.jpg\",\n    \"bigPic\": \"https://cdn.site.io/pic-4-1024.jpg\"\n  }\n}\n"
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Since the top level of a query is a field, it also can be given an alias:"
                }
              ]
            },
            {
              "type": "Code",
              "raw": false,
              "lang": "graphql",
              "example": true,
              "counter": false,
              "code": "{\n  zuck: user(id: 4) {\n    id\n    name\n  }\n}\n"
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Returns the result:"
                }
              ]
            },
            {
              "type": "Code",
              "raw": false,
              "lang": "json",
              "example": true,
              "counter": false,
              "code": "{\n  \"zuck\": {\n    \"id\": 4,\n    \"name\": \"Mark Zuckerberg\"\n  }\n}\n"
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "A field’s response key is its alias if an alias is provided, and it is otherwise the field’s name."
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Fragments"
          },
          "contents": [
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "FragmentSpread",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "Terminal",
                    "value": "..."
                  },
                  {
                    "type": "NonTerminal",
                    "name": "FragmentName",
                    "params": null
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "Directives",
                      "params": null
                    },
                    "isList": false,
                    "isOptional": true
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "FragmentDefinition",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "Terminal",
                    "value": "fragment"
                  },
                  {
                    "type": "NonTerminal",
                    "name": "FragmentName",
                    "params": null
                  },
                  {
                    "type": "NonTerminal",
                    "name": "TypeCondition",
                    "params": null
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "Directives",
                      "params": null
                    },
                    "isList": false,
                    "isOptional": true
                  },
                  {
                    "type": "NonTerminal",
                    "name": "SelectionSet",
                    "params": null
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "FragmentName",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "Constrained",
                    "token": {
                      "type": "NonTerminal",
                      "name": "Name",
                      "params": null
                    },
                    "constraint": {
                      "type": "ButNot",
                      "tokens": [
                        {
                          "type": "Terminal",
                          "value": "on"
                        }
                      ]
                    }
                  }
                ]
              }
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Fragments are the primary unit of composition in GraphQL."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Fragments allow for the reuse of common repeated selections of fields, reducing duplicated text in the document. Inline Fragments can be used directly within a selection to condition upon a type condition when querying against an interface or union."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "For example, if we wanted to fetch some common information about mutual friends as well as friends of some user:"
                }
              ]
            },
            {
              "type": "Code",
              "raw": false,
              "lang": "graphql",
              "example": true,
              "counter": false,
              "code": "query noFragments {\n  user(id: 4) {\n    friends(first: 10) {\n      id\n      name\n      profilePic(size: 50)\n    }\n    mutualFriends(first: 10) {\n      id\n      name\n      profilePic(size: 50)\n    }\n  }\n}\n"
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "The repeated fields could be extracted into a fragment and composed by a parent fragment or query."
                }
              ]
            },
            {
              "type": "Code",
              "raw": false,
              "lang": "graphql",
              "example": true,
              "counter": false,
              "code": "query withFragments {\n  user(id: 4) {\n    friends(first: 10) {\n      ...friendFields\n    }\n    mutualFriends(first: 10) {\n      ...friendFields\n    }\n  }\n}\n\nfragment friendFields on User {\n  id\n  name\n  profilePic(size: 50)\n}\n"
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Fragments are consumed by using the spread operator ("
                },
                {
                  "type": "InlineCode",
                  "code": "..."
                },
                {
                  "type": "Text",
                  "value": "). All fields selected by the fragment will be added to the query field selection at the same level as the fragment invocation. This happens through multiple levels of fragment spreads."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "For example:"
                }
              ]
            },
            {
              "type": "Code",
              "raw": false,
              "lang": "graphql",
              "example": true,
              "counter": false,
              "code": "query withNestedFragments {\n  user(id: 4) {\n    friends(first: 10) {\n      ...friendFields\n    }\n    mutualFriends(first: 10) {\n      ...friendFields\n    }\n  }\n}\n\nfragment friendFields on User {\n  id\n  name\n  ...standardProfilePic\n}\n\nfragment standardProfilePic on User {\n  profilePic(size: 50)\n}\n"
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "The queries "
                },
                {
                  "type": "InlineCode",
                  "code": "noFragments"
                },
                {
                  "type": "Text",
                  "value": ", "
                },
                {
                  "type": "InlineCode",
                  "code": "withFragments"
                },
                {
                  "type": "Text",
                  "value": ", and "
                },
                {
                  "type": "InlineCode",
                  "code": "withNestedFragments"
                },
                {
                  "type": "Text",
                  "value": " all produce the same response object."
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Type Conditions"
              },
              "contents": [
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "TypeCondition",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Terminal",
                        "value": "on"
                      },
                      {
                        "type": "NonTerminal",
                        "name": "NamedType",
                        "params": null
                      }
                    ]
                  }
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Fragments must specify the type they apply to. In this example, "
                    },
                    {
                      "type": "InlineCode",
                      "code": "friendFields"
                    },
                    {
                      "type": "Text",
                      "value": " can be used in the context of querying a "
                    },
                    {
                      "type": "InlineCode",
                      "code": "User"
                    },
                    {
                      "type": "Text",
                      "value": "."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Fragments cannot be specified on any input value (scalar, enumeration, or input object)."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Fragments can be specified on object types, interfaces, and unions."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Selections within fragments only return values when the concrete type of the object it is operating on matches the type of the fragment."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "For example in this query on the Facebook data model:"
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": "graphql",
                  "example": true,
                  "counter": false,
                  "code": "query FragmentTyping {\n  profiles(handles: [\"zuck\", \"cocacola\"]) {\n    handle\n    ...userFragment\n    ...pageFragment\n  }\n}\n\nfragment userFragment on User {\n  friends {\n    count\n  }\n}\n\nfragment pageFragment on Page {\n  likers {\n    count\n  }\n}\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "The "
                    },
                    {
                      "type": "InlineCode",
                      "code": "profiles"
                    },
                    {
                      "type": "Text",
                      "value": " root field returns a list where each element could be a "
                    },
                    {
                      "type": "InlineCode",
                      "code": "Page"
                    },
                    {
                      "type": "Text",
                      "value": " or a "
                    },
                    {
                      "type": "InlineCode",
                      "code": "User"
                    },
                    {
                      "type": "Text",
                      "value": ". When the object in the "
                    },
                    {
                      "type": "InlineCode",
                      "code": "profiles"
                    },
                    {
                      "type": "Text",
                      "value": " result is a "
                    },
                    {
                      "type": "InlineCode",
                      "code": "User"
                    },
                    {
                      "type": "Text",
                      "value": ", "
                    },
                    {
                      "type": "InlineCode",
                      "code": "friends"
                    },
                    {
                      "type": "Text",
                      "value": " will be present and "
                    },
                    {
                      "type": "InlineCode",
                      "code": "likers"
                    },
                    {
                      "type": "Text",
                      "value": " will not. Conversely when the result is a "
                    },
                    {
                      "type": "InlineCode",
                      "code": "Page"
                    },
                    {
                      "type": "Text",
                      "value": ", "
                    },
                    {
                      "type": "InlineCode",
                      "code": "likers"
                    },
                    {
                      "type": "Text",
                      "value": " will be present and "
                    },
                    {
                      "type": "InlineCode",
                      "code": "friends"
                    },
                    {
                      "type": "Text",
                      "value": " will not."
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": "json",
                  "example": true,
                  "counter": false,
                  "code": "{\n  \"profiles\": [\n    {\n      \"handle\": \"zuck\",\n      \"friends\": { \"count\" : 1234 }\n    },\n    {\n      \"handle\": \"cocacola\",\n      \"likers\": { \"count\" : 90234512 }\n    }\n  ]\n}\n"
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Inline Fragments"
              },
              "contents": [
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "InlineFragment",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Terminal",
                        "value": "..."
                      },
                      {
                        "type": "Quantified",
                        "token": {
                          "type": "NonTerminal",
                          "name": "TypeCondition",
                          "params": null
                        },
                        "isList": false,
                        "isOptional": true
                      },
                      {
                        "type": "Quantified",
                        "token": {
                          "type": "NonTerminal",
                          "name": "Directives",
                          "params": null
                        },
                        "isList": false,
                        "isOptional": true
                      },
                      {
                        "type": "NonTerminal",
                        "name": "SelectionSet",
                        "params": null
                      }
                    ]
                  }
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Fragments can be defined inline within a selection set. This is done to conditionally include fields based on their runtime type. This feature of standard fragment inclusion was demonstrated in the "
                    },
                    {
                      "type": "InlineCode",
                      "code": "query FragmentTyping"
                    },
                    {
                      "type": "Text",
                      "value": " example. We could accomplish the same thing using inline fragments."
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": "graphql",
                  "example": true,
                  "counter": false,
                  "code": "query inlineFragmentTyping {\n  profiles(handles: [\"zuck\", \"cocacola\"]) {\n    handle\n    ... on User {\n      friends {\n        count\n      }\n    }\n    ... on Page {\n      likers {\n        count\n      }\n    }\n  }\n}\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Inline fragments may also be used to apply a directive to a group of fields. If the TypeCondition is omitted, an inline fragment is considered to be of the same type as the enclosing context."
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": "graphql",
                  "example": true,
                  "counter": false,
                  "code": "query inlineFragmentNoType($expandedInfo: Boolean) {\n  user(handle: \"zuck\") {\n    id\n    name\n    ... @include(if: $expandedInfo) {\n      firstName\n      lastName\n      birthday\n    }\n  }\n}\n"
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Input Values"
          },
          "contents": [
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "Value",
                "params": [
                  {
                    "type": "NonTerminalParam",
                    "conditional": false,
                    "negated": false,
                    "name": "Const"
                  }
                ]
              },
              "defType": 1,
              "rhs": {
                "type": "ListRHS",
                "defs": [
                  {
                    "type": "RHS",
                    "condition": {
                      "type": "Condition",
                      "param": "Const",
                      "not": true
                    },
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "Variable",
                        "params": null
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "IntValue",
                        "params": null
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "FloatValue",
                        "params": null
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "StringValue",
                        "params": null
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "BooleanValue",
                        "params": null
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "NullValue",
                        "params": null
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "EnumValue",
                        "params": null
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "ListValue",
                        "params": [
                          {
                            "type": "NonTerminalParam",
                            "conditional": true,
                            "negated": false,
                            "name": "Const"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "ObjectValue",
                        "params": [
                          {
                            "type": "NonTerminalParam",
                            "conditional": true,
                            "negated": false,
                            "name": "Const"
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Field and directive arguments accept input values of various literal primitives; input values can be scalars, enumeration values, lists, or input objects."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "If not defined as constant (for example, in "
                },
                {
                  "type": "NonTerminal",
                  "name": "DefaultValue",
                  "params": null
                },
                {
                  "type": "Text",
                  "value": "), input values can be specified as a variable. List and inputs objects may also contain variables (unless defined to be constant)."
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Int Value"
              },
              "contents": [
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "IntValue",
                    "params": null
                  },
                  "defType": 2,
                  "rhs": {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "IntegerPart",
                        "params": null
                      },
                      {
                        "type": "Lookahead",
                        "not": true,
                        "nt": false,
                        "set": [
                          {
                            "type": "NonTerminal",
                            "name": "Digit",
                            "params": null
                          },
                          {
                            "type": "Terminal",
                            "value": "."
                          },
                          {
                            "type": "NonTerminal",
                            "name": "NameStart",
                            "params": null
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "IntegerPart",
                    "params": null
                  },
                  "defType": 2,
                  "rhs": {
                    "type": "ListRHS",
                    "defs": [
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "Quantified",
                            "token": {
                              "type": "NonTerminal",
                              "name": "NegativeSign",
                              "params": null
                            },
                            "isList": false,
                            "isOptional": true
                          },
                          {
                            "type": "Terminal",
                            "value": "0"
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "Quantified",
                            "token": {
                              "type": "NonTerminal",
                              "name": "NegativeSign",
                              "params": null
                            },
                            "isList": false,
                            "isOptional": true
                          },
                          {
                            "type": "NonTerminal",
                            "name": "NonZeroDigit",
                            "params": null
                          },
                          {
                            "type": "Quantified",
                            "token": {
                              "type": "NonTerminal",
                              "name": "Digit",
                              "params": null
                            },
                            "isList": true,
                            "isOptional": true
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "NegativeSign",
                    "params": null
                  },
                  "defType": 2,
                  "rhs": {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Terminal",
                        "value": "-"
                      }
                    ]
                  }
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "NonZeroDigit",
                    "params": null
                  },
                  "defType": 2,
                  "rhs": {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Constrained",
                        "token": {
                          "type": "NonTerminal",
                          "name": "Digit",
                          "params": null
                        },
                        "constraint": {
                          "type": "ButNot",
                          "tokens": [
                            {
                              "type": "Terminal",
                              "value": "0"
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "An "
                    },
                    {
                      "type": "NonTerminal",
                      "name": "IntValue",
                      "params": null
                    },
                    {
                      "type": "Text",
                      "value": " is specified without a decimal point or exponent but may be negative (ex. "
                    },
                    {
                      "type": "Terminal",
                      "value": "-123"
                    },
                    {
                      "type": "Text",
                      "value": "). It must not have any leading "
                    },
                    {
                      "type": "Terminal",
                      "value": "0"
                    },
                    {
                      "type": "Text",
                      "value": "."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "An "
                    },
                    {
                      "type": "NonTerminal",
                      "name": "IntValue",
                      "params": null
                    },
                    {
                      "type": "Text",
                      "value": " must not be followed by a "
                    },
                    {
                      "type": "NonTerminal",
                      "name": "Digit",
                      "params": null
                    },
                    {
                      "type": "Text",
                      "value": ". In other words, an "
                    },
                    {
                      "type": "NonTerminal",
                      "name": "IntValue",
                      "params": null
                    },
                    {
                      "type": "Text",
                      "value": " token is always the longest possible valid sequence. The source characters "
                    },
                    {
                      "type": "Terminal",
                      "value": "12"
                    },
                    {
                      "type": "Text",
                      "value": " cannot be interpreted as two tokens since "
                    },
                    {
                      "type": "Terminal",
                      "value": "1"
                    },
                    {
                      "type": "Text",
                      "value": " is followed by the "
                    },
                    {
                      "type": "NonTerminal",
                      "name": "Digit",
                      "params": null
                    },
                    {
                      "type": "Text",
                      "value": " "
                    },
                    {
                      "type": "Terminal",
                      "value": "2"
                    },
                    {
                      "type": "Text",
                      "value": ". This also means the source "
                    },
                    {
                      "type": "Terminal",
                      "value": "00"
                    },
                    {
                      "type": "Text",
                      "value": " is invalid since it can neither be interpreted as a single token nor two "
                    },
                    {
                      "type": "Terminal",
                      "value": "0"
                    },
                    {
                      "type": "Text",
                      "value": " tokens."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "An "
                    },
                    {
                      "type": "NonTerminal",
                      "name": "IntValue",
                      "params": null
                    },
                    {
                      "type": "Text",
                      "value": " must not be followed by a "
                    },
                    {
                      "type": "Terminal",
                      "value": "."
                    },
                    {
                      "type": "Text",
                      "value": " or "
                    },
                    {
                      "type": "NonTerminal",
                      "name": "NameStart",
                      "params": null
                    },
                    {
                      "type": "Text",
                      "value": ". If either "
                    },
                    {
                      "type": "Terminal",
                      "value": "."
                    },
                    {
                      "type": "Text",
                      "value": " or "
                    },
                    {
                      "type": "NonTerminal",
                      "name": "ExponentIndicator",
                      "params": null
                    },
                    {
                      "type": "Text",
                      "value": " follows then the token must only be interpreted as a possible "
                    },
                    {
                      "type": "NonTerminal",
                      "name": "FloatValue",
                      "params": null
                    },
                    {
                      "type": "Text",
                      "value": ". No other "
                    },
                    {
                      "type": "NonTerminal",
                      "name": "NameStart",
                      "params": null
                    },
                    {
                      "type": "Text",
                      "value": " character can follow. For example the sequences "
                    },
                    {
                      "type": "InlineCode",
                      "code": "0x123"
                    },
                    {
                      "type": "Text",
                      "value": " and "
                    },
                    {
                      "type": "InlineCode",
                      "code": "123L"
                    },
                    {
                      "type": "Text",
                      "value": " have no valid lexical representations."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Float Value"
              },
              "contents": [
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "FloatValue",
                    "params": null
                  },
                  "defType": 2,
                  "rhs": {
                    "type": "ListRHS",
                    "defs": [
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "IntegerPart",
                            "params": null
                          },
                          {
                            "type": "NonTerminal",
                            "name": "FractionalPart",
                            "params": null
                          },
                          {
                            "type": "NonTerminal",
                            "name": "ExponentPart",
                            "params": null
                          },
                          {
                            "type": "Lookahead",
                            "not": true,
                            "nt": false,
                            "set": [
                              {
                                "type": "NonTerminal",
                                "name": "Digit",
                                "params": null
                              },
                              {
                                "type": "Terminal",
                                "value": "."
                              },
                              {
                                "type": "NonTerminal",
                                "name": "NameStart",
                                "params": null
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "IntegerPart",
                            "params": null
                          },
                          {
                            "type": "NonTerminal",
                            "name": "FractionalPart",
                            "params": null
                          },
                          {
                            "type": "Lookahead",
                            "not": true,
                            "nt": false,
                            "set": [
                              {
                                "type": "NonTerminal",
                                "name": "Digit",
                                "params": null
                              },
                              {
                                "type": "Terminal",
                                "value": "."
                              },
                              {
                                "type": "NonTerminal",
                                "name": "NameStart",
                                "params": null
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "IntegerPart",
                            "params": null
                          },
                          {
                            "type": "NonTerminal",
                            "name": "ExponentPart",
                            "params": null
                          },
                          {
                            "type": "Lookahead",
                            "not": true,
                            "nt": false,
                            "set": [
                              {
                                "type": "NonTerminal",
                                "name": "Digit",
                                "params": null
                              },
                              {
                                "type": "Terminal",
                                "value": "."
                              },
                              {
                                "type": "NonTerminal",
                                "name": "NameStart",
                                "params": null
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "FractionalPart",
                    "params": null
                  },
                  "defType": 2,
                  "rhs": {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Terminal",
                        "value": "."
                      },
                      {
                        "type": "Quantified",
                        "token": {
                          "type": "NonTerminal",
                          "name": "Digit",
                          "params": null
                        },
                        "isList": true,
                        "isOptional": false
                      }
                    ]
                  }
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "ExponentPart",
                    "params": null
                  },
                  "defType": 2,
                  "rhs": {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "ExponentIndicator",
                        "params": null
                      },
                      {
                        "type": "Quantified",
                        "token": {
                          "type": "NonTerminal",
                          "name": "Sign",
                          "params": null
                        },
                        "isList": false,
                        "isOptional": true
                      },
                      {
                        "type": "Quantified",
                        "token": {
                          "type": "NonTerminal",
                          "name": "Digit",
                          "params": null
                        },
                        "isList": true,
                        "isOptional": false
                      }
                    ]
                  }
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "ExponentIndicator",
                    "params": null
                  },
                  "defType": 2,
                  "rhs": {
                    "type": "OneOfRHS",
                    "rows": [
                      [
                        {
                          "type": "Terminal",
                          "value": "e"
                        },
                        {
                          "type": "Terminal",
                          "value": "E"
                        }
                      ]
                    ]
                  }
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "Sign",
                    "params": null
                  },
                  "defType": 2,
                  "rhs": {
                    "type": "OneOfRHS",
                    "rows": [
                      [
                        {
                          "type": "Terminal",
                          "value": "+"
                        },
                        {
                          "type": "Terminal",
                          "value": "-"
                        }
                      ]
                    ]
                  }
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "A "
                    },
                    {
                      "type": "NonTerminal",
                      "name": "FloatValue",
                      "params": null
                    },
                    {
                      "type": "Text",
                      "value": " includes either a decimal point (ex. "
                    },
                    {
                      "type": "Terminal",
                      "value": "1.0"
                    },
                    {
                      "type": "Text",
                      "value": ") or an exponent (ex. "
                    },
                    {
                      "type": "Terminal",
                      "value": "1e50"
                    },
                    {
                      "type": "Text",
                      "value": ") or both (ex. "
                    },
                    {
                      "type": "Terminal",
                      "value": "6.0221413e23"
                    },
                    {
                      "type": "Text",
                      "value": ") and may be negative. Like "
                    },
                    {
                      "type": "NonTerminal",
                      "name": "IntValue",
                      "params": null
                    },
                    {
                      "type": "Text",
                      "value": ", it also must not have any leading "
                    },
                    {
                      "type": "Terminal",
                      "value": "0"
                    },
                    {
                      "type": "Text",
                      "value": "."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "A "
                    },
                    {
                      "type": "NonTerminal",
                      "name": "FloatValue",
                      "params": null
                    },
                    {
                      "type": "Text",
                      "value": " must not be followed by a "
                    },
                    {
                      "type": "NonTerminal",
                      "name": "Digit",
                      "params": null
                    },
                    {
                      "type": "Text",
                      "value": ". In other words, a "
                    },
                    {
                      "type": "NonTerminal",
                      "name": "FloatValue",
                      "params": null
                    },
                    {
                      "type": "Text",
                      "value": " token is always the longest possible valid sequence. The source characters "
                    },
                    {
                      "type": "Terminal",
                      "value": "1.23"
                    },
                    {
                      "type": "Text",
                      "value": " cannot be interpreted as two tokens since "
                    },
                    {
                      "type": "Terminal",
                      "value": "1.2"
                    },
                    {
                      "type": "Text",
                      "value": " is followed by the "
                    },
                    {
                      "type": "NonTerminal",
                      "name": "Digit",
                      "params": null
                    },
                    {
                      "type": "Text",
                      "value": " "
                    },
                    {
                      "type": "Terminal",
                      "value": "3"
                    },
                    {
                      "type": "Text",
                      "value": "."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "A "
                    },
                    {
                      "type": "NonTerminal",
                      "name": "FloatValue",
                      "params": null
                    },
                    {
                      "type": "Text",
                      "value": " must not be followed by a "
                    },
                    {
                      "type": "Terminal",
                      "value": "."
                    },
                    {
                      "type": "Text",
                      "value": ". For example, the sequence "
                    },
                    {
                      "type": "Terminal",
                      "value": "1.23.4"
                    },
                    {
                      "type": "Text",
                      "value": " cannot be interpreted as two tokens ("
                    },
                    {
                      "type": "Terminal",
                      "value": "1.2"
                    },
                    {
                      "type": "Text",
                      "value": ", "
                    },
                    {
                      "type": "Terminal",
                      "value": "3.4"
                    },
                    {
                      "type": "Text",
                      "value": ")."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "A "
                    },
                    {
                      "type": "NonTerminal",
                      "name": "FloatValue",
                      "params": null
                    },
                    {
                      "type": "Text",
                      "value": " must not be followed by a "
                    },
                    {
                      "type": "NonTerminal",
                      "name": "NameStart",
                      "params": null
                    },
                    {
                      "type": "Text",
                      "value": ". For example the sequence "
                    },
                    {
                      "type": "InlineCode",
                      "code": "0x1.2p3"
                    },
                    {
                      "type": "Text",
                      "value": " has no valid lexical representation."
                    }
                  ]
                },
                {
                  "type": "Note",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "The numeric literals "
                    },
                    {
                      "type": "NonTerminal",
                      "name": "IntValue",
                      "params": null
                    },
                    {
                      "type": "Text",
                      "value": " and "
                    },
                    {
                      "type": "NonTerminal",
                      "name": "FloatValue",
                      "params": null
                    },
                    {
                      "type": "Text",
                      "value": " both restrict being immediately followed by a letter (or other "
                    },
                    {
                      "type": "NonTerminal",
                      "name": "NameStart",
                      "params": null
                    },
                    {
                      "type": "Text",
                      "value": ") to reduce confusion or unexpected behavior since GraphQL only supports decimal numbers."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Boolean Value"
              },
              "contents": [
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "BooleanValue",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "OneOfRHS",
                    "rows": [
                      [
                        {
                          "type": "Terminal",
                          "value": "true"
                        },
                        {
                          "type": "Terminal",
                          "value": "false"
                        }
                      ]
                    ]
                  }
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "The two keywords "
                    },
                    {
                      "type": "InlineCode",
                      "code": "true"
                    },
                    {
                      "type": "Text",
                      "value": " and "
                    },
                    {
                      "type": "InlineCode",
                      "code": "false"
                    },
                    {
                      "type": "Text",
                      "value": " represent the two boolean values."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "String Value"
              },
              "contents": [
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "StringValue",
                    "params": null
                  },
                  "defType": 2,
                  "rhs": {
                    "type": "ListRHS",
                    "defs": [
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "Terminal",
                            "value": "\"\""
                          },
                          {
                            "type": "Lookahead",
                            "not": true,
                            "nt": false,
                            "set": [
                              {
                                "type": "Terminal",
                                "value": "\""
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "Terminal",
                            "value": "\""
                          },
                          {
                            "type": "Quantified",
                            "token": {
                              "type": "NonTerminal",
                              "name": "StringCharacter",
                              "params": null
                            },
                            "isList": true,
                            "isOptional": false
                          },
                          {
                            "type": "Terminal",
                            "value": "\""
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "Terminal",
                            "value": "\"\"\""
                          },
                          {
                            "type": "Quantified",
                            "token": {
                              "type": "NonTerminal",
                              "name": "BlockStringCharacter",
                              "params": null
                            },
                            "isList": true,
                            "isOptional": true
                          },
                          {
                            "type": "Terminal",
                            "value": "\"\"\""
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "StringCharacter",
                    "params": null
                  },
                  "defType": 2,
                  "rhs": {
                    "type": "ListRHS",
                    "defs": [
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "Constrained",
                            "token": {
                              "type": "NonTerminal",
                              "name": "SourceCharacter",
                              "params": null
                            },
                            "constraint": {
                              "type": "ButNot",
                              "tokens": [
                                {
                                  "type": "Terminal",
                                  "value": "\""
                                },
                                {
                                  "type": "Terminal",
                                  "value": "\\"
                                },
                                {
                                  "type": "NonTerminal",
                                  "name": "LineTerminator",
                                  "params": null
                                }
                              ]
                            }
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "Terminal",
                            "value": "\\u"
                          },
                          {
                            "type": "NonTerminal",
                            "name": "EscapedUnicode",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "Terminal",
                            "value": "\\"
                          },
                          {
                            "type": "NonTerminal",
                            "name": "EscapedCharacter",
                            "params": null
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "EscapedUnicode",
                    "params": null
                  },
                  "defType": 2,
                  "rhs": {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "RegExp",
                        "value": "/[0-9A-Fa-f]{4}/"
                      }
                    ]
                  }
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "EscapedCharacter",
                    "params": null
                  },
                  "defType": 2,
                  "rhs": {
                    "type": "OneOfRHS",
                    "rows": [
                      [
                        {
                          "type": "Terminal",
                          "value": "\""
                        },
                        {
                          "type": "Terminal",
                          "value": "\\"
                        },
                        {
                          "type": "Terminal",
                          "value": "/"
                        },
                        {
                          "type": "Terminal",
                          "value": "b"
                        },
                        {
                          "type": "Terminal",
                          "value": "f"
                        },
                        {
                          "type": "Terminal",
                          "value": "n"
                        },
                        {
                          "type": "Terminal",
                          "value": "r"
                        },
                        {
                          "type": "Terminal",
                          "value": "t"
                        }
                      ]
                    ]
                  }
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "BlockStringCharacter",
                    "params": null
                  },
                  "defType": 2,
                  "rhs": {
                    "type": "ListRHS",
                    "defs": [
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "Constrained",
                            "token": {
                              "type": "NonTerminal",
                              "name": "SourceCharacter",
                              "params": null
                            },
                            "constraint": {
                              "type": "ButNot",
                              "tokens": [
                                {
                                  "type": "Terminal",
                                  "value": "\"\"\""
                                },
                                {
                                  "type": "Terminal",
                                  "value": "\\\"\"\""
                                }
                              ]
                            }
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "Terminal",
                            "value": "\\\"\"\""
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Strings are sequences of characters wrapped in quotation marks (U+0022). (ex. "
                    },
                    {
                      "type": "Terminal",
                      "value": "\"Hello World\""
                    },
                    {
                      "type": "Text",
                      "value": "). White space and other otherwise-ignored characters are significant within a string value."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "The empty string "
                    },
                    {
                      "type": "Terminal",
                      "value": "\"\""
                    },
                    {
                      "type": "Text",
                      "value": " must not be followed by another "
                    },
                    {
                      "type": "Terminal",
                      "value": "\""
                    },
                    {
                      "type": "Text",
                      "value": " otherwise it would be interpreted as the beginning of a block string. As an example, the source "
                    },
                    {
                      "type": "Terminal",
                      "value": "\"\"\"\"\"\""
                    },
                    {
                      "type": "Text",
                      "value": " can only be interpreted as a single empty block string and not three empty strings."
                    }
                  ]
                },
                {
                  "type": "Note",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Unicode characters are allowed within String value literals, however "
                    },
                    {
                      "type": "NonTerminal",
                      "name": "SourceCharacter",
                      "params": null
                    },
                    {
                      "type": "Text",
                      "value": " must not contain some ASCII control characters so escape sequences must be used to represent these characters."
                    }
                  ]
                },
                {
                  "type": "Subsection",
                  "header": {
                    "type": "Subheader",
                    "title": "Block Strings"
                  },
                  "contents": [
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Block strings are sequences of characters wrapped in triple-quotes ("
                        },
                        {
                          "type": "InlineCode",
                          "code": "\"\"\""
                        },
                        {
                          "type": "Text",
                          "value": "). White space, line terminators, quote, and backslash characters may all be used unescaped to enable verbatim text. Characters must all be valid "
                        },
                        {
                          "type": "NonTerminal",
                          "name": "SourceCharacter",
                          "params": null
                        },
                        {
                          "type": "Text",
                          "value": "."
                        }
                      ]
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Since block strings represent freeform text often used in indented positions, the string value semantics of a block string excludes uniform indentation and blank initial and trailing lines via "
                        },
                        {
                          "type": "Call",
                          "name": "BlockStringValue",
                          "args": []
                        },
                        {
                          "type": "Text",
                          "value": "."
                        }
                      ]
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "For example, the following operation containing a block string:"
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": "graphql",
                      "example": true,
                      "counter": false,
                      "code": "mutation {\n  sendEmail(message: \"\"\"\n    Hello,\n      World!\n\n    Yours,\n      GraphQL.\n  \"\"\")\n}\n"
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Is identical to the standard quoted string:"
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": "graphql",
                      "example": true,
                      "counter": false,
                      "code": "mutation {\n  sendEmail(message: \"Hello,\\n  World!\\n\\nYours,\\n  GraphQL.\")\n}\n"
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Since block string values strip leading and trailing empty lines, there is no single canonical printed block string for a given value. Because block strings typically represent freeform text, it is considered easier to read if they begin and end with an empty line."
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": "graphql",
                      "example": true,
                      "counter": false,
                      "code": "\"\"\"\nThis starts with and ends with an empty line,\nwhich makes it easier to read.\n\"\"\"\n"
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": "graphql",
                      "example": true,
                      "counter": true,
                      "code": "\"\"\"This does not start with or end with any empty lines,\nwhich makes it a little harder to read.\"\"\"\n"
                    },
                    {
                      "type": "Note",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "If non-printable ASCII characters are needed in a string value, a standard quoted string with appropriate escape sequences must be used instead of a block string."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "Subsection",
                  "header": {
                    "type": "Subheader",
                    "title": "Semantics"
                  },
                  "contents": [
                    {
                      "type": "Semantic",
                      "name": {
                        "type": "NonTerminal",
                        "name": "StringValue",
                        "params": null
                      },
                      "defType": 2,
                      "rhs": {
                        "type": "RHS",
                        "tokens": [
                          {
                            "type": "Terminal",
                            "value": "\"\""
                          }
                        ]
                      },
                      "steps": {
                        "type": "List",
                        "ordered": true,
                        "items": [
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "Return an empty sequence."
                              }
                            ]
                          }
                        ]
                      }
                    },
                    {
                      "type": "Semantic",
                      "name": {
                        "type": "NonTerminal",
                        "name": "StringValue",
                        "params": null
                      },
                      "defType": 2,
                      "rhs": {
                        "type": "RHS",
                        "tokens": [
                          {
                            "type": "Terminal",
                            "value": "\""
                          },
                          {
                            "type": "Quantified",
                            "token": {
                              "type": "NonTerminal",
                              "name": "StringCharacter",
                              "params": null
                            },
                            "isList": true,
                            "isOptional": false
                          },
                          {
                            "type": "Terminal",
                            "value": "\""
                          }
                        ]
                      },
                      "steps": {
                        "type": "List",
                        "ordered": true,
                        "items": [
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "Return the Unicode character sequence of all "
                              },
                              {
                                "type": "NonTerminal",
                                "name": "StringCharacter",
                                "params": null
                              },
                              {
                                "type": "Text",
                                "value": " Unicode character values."
                              }
                            ]
                          }
                        ]
                      }
                    },
                    {
                      "type": "Semantic",
                      "name": {
                        "type": "NonTerminal",
                        "name": "StringCharacter",
                        "params": null
                      },
                      "defType": 2,
                      "rhs": {
                        "type": "RHS",
                        "tokens": [
                          {
                            "type": "Constrained",
                            "token": {
                              "type": "NonTerminal",
                              "name": "SourceCharacter",
                              "params": null
                            },
                            "constraint": {
                              "type": "ButNot",
                              "tokens": [
                                {
                                  "type": "Terminal",
                                  "value": "\""
                                },
                                {
                                  "type": "Terminal",
                                  "value": "\\"
                                },
                                {
                                  "type": "NonTerminal",
                                  "name": "LineTerminator",
                                  "params": null
                                }
                              ]
                            }
                          }
                        ]
                      },
                      "steps": {
                        "type": "List",
                        "ordered": true,
                        "items": [
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "Return the character value of "
                              },
                              {
                                "type": "NonTerminal",
                                "name": "SourceCharacter",
                                "params": null
                              },
                              {
                                "type": "Text",
                                "value": "."
                              }
                            ]
                          }
                        ]
                      }
                    },
                    {
                      "type": "Semantic",
                      "name": {
                        "type": "NonTerminal",
                        "name": "StringCharacter",
                        "params": null
                      },
                      "defType": 2,
                      "rhs": {
                        "type": "RHS",
                        "tokens": [
                          {
                            "type": "Terminal",
                            "value": "\\u"
                          },
                          {
                            "type": "NonTerminal",
                            "name": "EscapedUnicode",
                            "params": null
                          }
                        ]
                      },
                      "steps": {
                        "type": "List",
                        "ordered": true,
                        "items": [
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "Return the character whose code unit value in the Unicode Basic Multilingual Plane is the 16-bit hexadecimal value "
                              },
                              {
                                "type": "NonTerminal",
                                "name": "EscapedUnicode",
                                "params": null
                              },
                              {
                                "type": "Text",
                                "value": "."
                              }
                            ]
                          }
                        ]
                      }
                    },
                    {
                      "type": "Semantic",
                      "name": {
                        "type": "NonTerminal",
                        "name": "StringCharacter",
                        "params": null
                      },
                      "defType": 2,
                      "rhs": {
                        "type": "RHS",
                        "tokens": [
                          {
                            "type": "Terminal",
                            "value": "\\"
                          },
                          {
                            "type": "NonTerminal",
                            "name": "EscapedCharacter",
                            "params": null
                          }
                        ]
                      },
                      "steps": {
                        "type": "List",
                        "ordered": true,
                        "items": [
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "Return the character value of "
                              },
                              {
                                "type": "NonTerminal",
                                "name": "EscapedCharacter",
                                "params": null
                              },
                              {
                                "type": "Text",
                                "value": " according to the table below."
                              }
                            ]
                          }
                        ]
                      }
                    },
                    {
                      "type": "Table",
                      "headers": [
                        [
                          {
                            "type": "Text",
                            "value": "Escaped Character"
                          }
                        ],
                        [
                          {
                            "type": "Text",
                            "value": "Code Unit Value"
                          }
                        ],
                        [
                          {
                            "type": "Text",
                            "value": "Character Name"
                          }
                        ]
                      ],
                      "rows": [
                        [
                          [
                            {
                              "type": "InlineCode",
                              "code": "\""
                            }
                          ],
                          [
                            {
                              "type": "Text",
                              "value": "U+0022"
                            }
                          ],
                          [
                            {
                              "type": "Text",
                              "value": "double quote"
                            }
                          ]
                        ],
                        [
                          [
                            {
                              "type": "InlineCode",
                              "code": "\\"
                            }
                          ],
                          [
                            {
                              "type": "Text",
                              "value": "U+005C"
                            }
                          ],
                          [
                            {
                              "type": "Text",
                              "value": "reverse solidus (back slash)"
                            }
                          ]
                        ],
                        [
                          [
                            {
                              "type": "InlineCode",
                              "code": "/"
                            }
                          ],
                          [
                            {
                              "type": "Text",
                              "value": "U+002F"
                            }
                          ],
                          [
                            {
                              "type": "Text",
                              "value": "solidus (forward slash)"
                            }
                          ]
                        ],
                        [
                          [
                            {
                              "type": "InlineCode",
                              "code": "b"
                            }
                          ],
                          [
                            {
                              "type": "Text",
                              "value": "U+0008"
                            }
                          ],
                          [
                            {
                              "type": "Text",
                              "value": "backspace"
                            }
                          ]
                        ],
                        [
                          [
                            {
                              "type": "InlineCode",
                              "code": "f"
                            }
                          ],
                          [
                            {
                              "type": "Text",
                              "value": "U+000C"
                            }
                          ],
                          [
                            {
                              "type": "Text",
                              "value": "form feed"
                            }
                          ]
                        ],
                        [
                          [
                            {
                              "type": "InlineCode",
                              "code": "n"
                            }
                          ],
                          [
                            {
                              "type": "Text",
                              "value": "U+000A"
                            }
                          ],
                          [
                            {
                              "type": "Text",
                              "value": "line feed (new line)"
                            }
                          ]
                        ],
                        [
                          [
                            {
                              "type": "InlineCode",
                              "code": "r"
                            }
                          ],
                          [
                            {
                              "type": "Text",
                              "value": "U+000D"
                            }
                          ],
                          [
                            {
                              "type": "Text",
                              "value": "carriage return"
                            }
                          ]
                        ],
                        [
                          [
                            {
                              "type": "InlineCode",
                              "code": "t"
                            }
                          ],
                          [
                            {
                              "type": "Text",
                              "value": "U+0009"
                            }
                          ],
                          [
                            {
                              "type": "Text",
                              "value": "horizontal tab"
                            }
                          ]
                        ]
                      ]
                    },
                    {
                      "type": "Semantic",
                      "name": {
                        "type": "NonTerminal",
                        "name": "StringValue",
                        "params": null
                      },
                      "defType": 2,
                      "rhs": {
                        "type": "RHS",
                        "tokens": [
                          {
                            "type": "Terminal",
                            "value": "\"\"\""
                          },
                          {
                            "type": "Quantified",
                            "token": {
                              "type": "NonTerminal",
                              "name": "BlockStringCharacter",
                              "params": null
                            },
                            "isList": true,
                            "isOptional": true
                          },
                          {
                            "type": "Terminal",
                            "value": "\"\"\""
                          }
                        ]
                      },
                      "steps": {
                        "type": "List",
                        "ordered": true,
                        "items": [
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "Let "
                              },
                              {
                                "type": "Variable",
                                "name": "rawValue"
                              },
                              {
                                "type": "Text",
                                "value": " be the Unicode character sequence of all "
                              },
                              {
                                "type": "NonTerminal",
                                "name": "BlockStringCharacter",
                                "params": null
                              },
                              {
                                "type": "Text",
                                "value": " Unicode character values (which may be an empty sequence)."
                              }
                            ]
                          },
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "Return the result of "
                              },
                              {
                                "type": "Call",
                                "name": "BlockStringValue",
                                "args": [
                                  {
                                    "type": "Variable",
                                    "name": "rawValue"
                                  }
                                ]
                              },
                              {
                                "type": "Text",
                                "value": "."
                              }
                            ]
                          }
                        ]
                      }
                    },
                    {
                      "type": "Semantic",
                      "name": {
                        "type": "NonTerminal",
                        "name": "BlockStringCharacter",
                        "params": null
                      },
                      "defType": 2,
                      "rhs": {
                        "type": "RHS",
                        "tokens": [
                          {
                            "type": "Constrained",
                            "token": {
                              "type": "NonTerminal",
                              "name": "SourceCharacter",
                              "params": null
                            },
                            "constraint": {
                              "type": "ButNot",
                              "tokens": [
                                {
                                  "type": "Terminal",
                                  "value": "\"\"\""
                                },
                                {
                                  "type": "Terminal",
                                  "value": "\\\"\"\""
                                }
                              ]
                            }
                          }
                        ]
                      },
                      "steps": {
                        "type": "List",
                        "ordered": true,
                        "items": [
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "Return the character value of "
                              },
                              {
                                "type": "NonTerminal",
                                "name": "SourceCharacter",
                                "params": null
                              },
                              {
                                "type": "Text",
                                "value": "."
                              }
                            ]
                          }
                        ]
                      }
                    },
                    {
                      "type": "Semantic",
                      "name": {
                        "type": "NonTerminal",
                        "name": "BlockStringCharacter",
                        "params": null
                      },
                      "defType": 2,
                      "rhs": {
                        "type": "RHS",
                        "tokens": [
                          {
                            "type": "Terminal",
                            "value": "\\\"\"\""
                          }
                        ]
                      },
                      "steps": {
                        "type": "List",
                        "ordered": true,
                        "items": [
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "Return the character sequence "
                              },
                              {
                                "type": "InlineCode",
                                "code": "\"\"\""
                              },
                              {
                                "type": "Text",
                                "value": "."
                              }
                            ]
                          }
                        ]
                      }
                    },
                    {
                      "type": "Algorithm",
                      "call": {
                        "type": "Call",
                        "name": "BlockStringValue",
                        "args": [
                          {
                            "type": "Variable",
                            "name": "rawValue"
                          }
                        ]
                      },
                      "steps": {
                        "type": "List",
                        "ordered": true,
                        "items": [
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "Let "
                              },
                              {
                                "type": "Variable",
                                "name": "lines"
                              },
                              {
                                "type": "Text",
                                "value": " be the result of splitting "
                              },
                              {
                                "type": "Variable",
                                "name": "rawValue"
                              },
                              {
                                "type": "Text",
                                "value": " by "
                              },
                              {
                                "type": "NonTerminal",
                                "name": "LineTerminator",
                                "params": null
                              },
                              {
                                "type": "Text",
                                "value": "."
                              }
                            ]
                          },
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "Let "
                              },
                              {
                                "type": "Variable",
                                "name": "commonIndent"
                              },
                              {
                                "type": "Text",
                                "value": " be "
                              },
                              {
                                "type": "Keyword",
                                "value": "null"
                              },
                              {
                                "type": "Text",
                                "value": "."
                              }
                            ]
                          },
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "For each "
                              },
                              {
                                "type": "Variable",
                                "name": "line"
                              },
                              {
                                "type": "Text",
                                "value": " in "
                              },
                              {
                                "type": "Variable",
                                "name": "lines"
                              },
                              {
                                "type": "Text",
                                "value": ":"
                              },
                              {
                                "type": "List",
                                "ordered": true,
                                "items": [
                                  {
                                    "type": "ListItem",
                                    "contents": [
                                      {
                                        "type": "Text",
                                        "value": "If "
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "line"
                                      },
                                      {
                                        "type": "Text",
                                        "value": " is the first item in "
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "lines"
                                      },
                                      {
                                        "type": "Text",
                                        "value": ", continue to the next line."
                                      }
                                    ]
                                  },
                                  {
                                    "type": "ListItem",
                                    "contents": [
                                      {
                                        "type": "Text",
                                        "value": "Let "
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "length"
                                      },
                                      {
                                        "type": "Text",
                                        "value": " be the number of characters in "
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "line"
                                      },
                                      {
                                        "type": "Text",
                                        "value": "."
                                      }
                                    ]
                                  },
                                  {
                                    "type": "ListItem",
                                    "contents": [
                                      {
                                        "type": "Text",
                                        "value": "Let "
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "indent"
                                      },
                                      {
                                        "type": "Text",
                                        "value": " be the number of leading consecutive "
                                      },
                                      {
                                        "type": "NonTerminal",
                                        "name": "WhiteSpace",
                                        "params": null
                                      },
                                      {
                                        "type": "Text",
                                        "value": " characters in "
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "line"
                                      },
                                      {
                                        "type": "Text",
                                        "value": "."
                                      }
                                    ]
                                  },
                                  {
                                    "type": "ListItem",
                                    "contents": [
                                      {
                                        "type": "Text",
                                        "value": "If "
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "indent"
                                      },
                                      {
                                        "type": "Text",
                                        "value": " is less than "
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "length"
                                      },
                                      {
                                        "type": "Text",
                                        "value": ":"
                                      },
                                      {
                                        "type": "List",
                                        "ordered": true,
                                        "items": [
                                          {
                                            "type": "ListItem",
                                            "contents": [
                                              {
                                                "type": "Text",
                                                "value": "If "
                                              },
                                              {
                                                "type": "Variable",
                                                "name": "commonIndent"
                                              },
                                              {
                                                "type": "Text",
                                                "value": " is "
                                              },
                                              {
                                                "type": "Keyword",
                                                "value": "null"
                                              },
                                              {
                                                "type": "Text",
                                                "value": " or "
                                              },
                                              {
                                                "type": "Variable",
                                                "name": "indent"
                                              },
                                              {
                                                "type": "Text",
                                                "value": " is less than "
                                              },
                                              {
                                                "type": "Variable",
                                                "name": "commonIndent"
                                              },
                                              {
                                                "type": "Text",
                                                "value": ":"
                                              },
                                              {
                                                "type": "List",
                                                "ordered": true,
                                                "items": [
                                                  {
                                                    "type": "ListItem",
                                                    "contents": [
                                                      {
                                                        "type": "Text",
                                                        "value": "Let "
                                                      },
                                                      {
                                                        "type": "Variable",
                                                        "name": "commonIndent"
                                                      },
                                                      {
                                                        "type": "Text",
                                                        "value": " be "
                                                      },
                                                      {
                                                        "type": "Variable",
                                                        "name": "indent"
                                                      },
                                                      {
                                                        "type": "Text",
                                                        "value": "."
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "If "
                              },
                              {
                                "type": "Variable",
                                "name": "commonIndent"
                              },
                              {
                                "type": "Text",
                                "value": " is not "
                              },
                              {
                                "type": "Keyword",
                                "value": "null"
                              },
                              {
                                "type": "Text",
                                "value": ":"
                              },
                              {
                                "type": "List",
                                "ordered": true,
                                "items": [
                                  {
                                    "type": "ListItem",
                                    "contents": [
                                      {
                                        "type": "Text",
                                        "value": "For each "
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "line"
                                      },
                                      {
                                        "type": "Text",
                                        "value": " in "
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "lines"
                                      },
                                      {
                                        "type": "Text",
                                        "value": ":"
                                      },
                                      {
                                        "type": "List",
                                        "ordered": true,
                                        "items": [
                                          {
                                            "type": "ListItem",
                                            "contents": [
                                              {
                                                "type": "Text",
                                                "value": "If "
                                              },
                                              {
                                                "type": "Variable",
                                                "name": "line"
                                              },
                                              {
                                                "type": "Text",
                                                "value": " is the first item in "
                                              },
                                              {
                                                "type": "Variable",
                                                "name": "lines"
                                              },
                                              {
                                                "type": "Text",
                                                "value": ", continue to the next line."
                                              }
                                            ]
                                          },
                                          {
                                            "type": "ListItem",
                                            "contents": [
                                              {
                                                "type": "Text",
                                                "value": "Remove "
                                              },
                                              {
                                                "type": "Variable",
                                                "name": "commonIndent"
                                              },
                                              {
                                                "type": "Text",
                                                "value": " characters from the beginning of "
                                              },
                                              {
                                                "type": "Variable",
                                                "name": "line"
                                              },
                                              {
                                                "type": "Text",
                                                "value": "."
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "While the first item "
                              },
                              {
                                "type": "Variable",
                                "name": "line"
                              },
                              {
                                "type": "Text",
                                "value": " in "
                              },
                              {
                                "type": "Variable",
                                "name": "lines"
                              },
                              {
                                "type": "Text",
                                "value": " contains only "
                              },
                              {
                                "type": "NonTerminal",
                                "name": "WhiteSpace",
                                "params": null
                              },
                              {
                                "type": "Text",
                                "value": ":"
                              },
                              {
                                "type": "List",
                                "ordered": true,
                                "items": [
                                  {
                                    "type": "ListItem",
                                    "contents": [
                                      {
                                        "type": "Text",
                                        "value": "Remove the first item from "
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "lines"
                                      },
                                      {
                                        "type": "Text",
                                        "value": "."
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "While the last item "
                              },
                              {
                                "type": "Variable",
                                "name": "line"
                              },
                              {
                                "type": "Text",
                                "value": " in "
                              },
                              {
                                "type": "Variable",
                                "name": "lines"
                              },
                              {
                                "type": "Text",
                                "value": " contains only "
                              },
                              {
                                "type": "NonTerminal",
                                "name": "WhiteSpace",
                                "params": null
                              },
                              {
                                "type": "Text",
                                "value": ":"
                              },
                              {
                                "type": "List",
                                "ordered": true,
                                "items": [
                                  {
                                    "type": "ListItem",
                                    "contents": [
                                      {
                                        "type": "Text",
                                        "value": "Remove the last item from "
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "lines"
                                      },
                                      {
                                        "type": "Text",
                                        "value": "."
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "Let "
                              },
                              {
                                "type": "Variable",
                                "name": "formatted"
                              },
                              {
                                "type": "Text",
                                "value": " be the empty character sequence."
                              }
                            ]
                          },
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "For each "
                              },
                              {
                                "type": "Variable",
                                "name": "line"
                              },
                              {
                                "type": "Text",
                                "value": " in "
                              },
                              {
                                "type": "Variable",
                                "name": "lines"
                              },
                              {
                                "type": "Text",
                                "value": ":"
                              },
                              {
                                "type": "List",
                                "ordered": true,
                                "items": [
                                  {
                                    "type": "ListItem",
                                    "contents": [
                                      {
                                        "type": "Text",
                                        "value": "If "
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "line"
                                      },
                                      {
                                        "type": "Text",
                                        "value": " is the first item in "
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "lines"
                                      },
                                      {
                                        "type": "Text",
                                        "value": ":"
                                      },
                                      {
                                        "type": "List",
                                        "ordered": true,
                                        "items": [
                                          {
                                            "type": "ListItem",
                                            "contents": [
                                              {
                                                "type": "Text",
                                                "value": "Append "
                                              },
                                              {
                                                "type": "Variable",
                                                "name": "formatted"
                                              },
                                              {
                                                "type": "Text",
                                                "value": " with "
                                              },
                                              {
                                                "type": "Variable",
                                                "name": "line"
                                              },
                                              {
                                                "type": "Text",
                                                "value": "."
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  {
                                    "type": "ListItem",
                                    "contents": [
                                      {
                                        "type": "Text",
                                        "value": "Otherwise:"
                                      },
                                      {
                                        "type": "List",
                                        "ordered": true,
                                        "items": [
                                          {
                                            "type": "ListItem",
                                            "contents": [
                                              {
                                                "type": "Text",
                                                "value": "Append "
                                              },
                                              {
                                                "type": "Variable",
                                                "name": "formatted"
                                              },
                                              {
                                                "type": "Text",
                                                "value": " with a line feed character (U+000A)."
                                              }
                                            ]
                                          },
                                          {
                                            "type": "ListItem",
                                            "contents": [
                                              {
                                                "type": "Text",
                                                "value": "Append "
                                              },
                                              {
                                                "type": "Variable",
                                                "name": "formatted"
                                              },
                                              {
                                                "type": "Text",
                                                "value": " with "
                                              },
                                              {
                                                "type": "Variable",
                                                "name": "line"
                                              },
                                              {
                                                "type": "Text",
                                                "value": "."
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "Return "
                              },
                              {
                                "type": "Variable",
                                "name": "formatted"
                              },
                              {
                                "type": "Text",
                                "value": "."
                              }
                            ]
                          }
                        ]
                      }
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Null Value"
              },
              "contents": [
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "NullValue",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Terminal",
                        "value": "null"
                      }
                    ]
                  }
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Null values are represented as the keyword "
                    },
                    {
                      "type": "Keyword",
                      "value": "null"
                    },
                    {
                      "type": "Text",
                      "value": "."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "GraphQL has two semantically different ways to represent the lack of a value:"
                    }
                  ]
                },
                {
                  "type": "List",
                  "ordered": false,
                  "items": [
                    {
                      "type": "ListItem",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Explicitly providing the literal value: "
                        },
                        {
                          "type": "Keyword",
                          "value": "null"
                        },
                        {
                          "type": "Text",
                          "value": "."
                        }
                      ]
                    },
                    {
                      "type": "ListItem",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Implicitly not providing a value at all."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "For example, these two field calls are similar, but are not identical:"
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": "graphql",
                  "example": true,
                  "counter": false,
                  "code": "{\n  field(arg: null)\n  field\n}\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "The first has explicitly provided "
                    },
                    {
                      "type": "Keyword",
                      "value": "null"
                    },
                    {
                      "type": "Text",
                      "value": " to the argument “arg”, while the second has implicitly not provided a value to the argument “arg”. These two forms may be interpreted differently. For example, a mutation representing deleting a field vs not altering a field, respectively. Neither form may be used for an input expecting a Non-Null type."
                    }
                  ]
                },
                {
                  "type": "Note",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "The same two methods of representing the lack of a value are possible via variables by either providing the variable value as "
                    },
                    {
                      "type": "Keyword",
                      "value": "null"
                    },
                    {
                      "type": "Text",
                      "value": " or not providing a variable value at all."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Enum Value"
              },
              "contents": [
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "EnumValue",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Constrained",
                        "token": {
                          "type": "NonTerminal",
                          "name": "Name",
                          "params": null
                        },
                        "constraint": {
                          "type": "ButNot",
                          "tokens": [
                            {
                              "type": "Terminal",
                              "value": "true"
                            },
                            {
                              "type": "Terminal",
                              "value": "false"
                            },
                            {
                              "type": "Terminal",
                              "value": "null"
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Enum values are represented as unquoted names (ex. "
                    },
                    {
                      "type": "InlineCode",
                      "code": "MOBILE_WEB"
                    },
                    {
                      "type": "Text",
                      "value": "). It is recommended that Enum values be “all caps”. Enum values are only used in contexts where the precise enumeration type is known. Therefore it’s not necessary to supply an enumeration type name in the literal."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "List Value"
              },
              "contents": [
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "ListValue",
                    "params": [
                      {
                        "type": "NonTerminalParam",
                        "conditional": false,
                        "negated": false,
                        "name": "Const"
                      }
                    ]
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "ListRHS",
                    "defs": [
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "Terminal",
                            "value": "["
                          },
                          {
                            "type": "Terminal",
                            "value": "]"
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "Terminal",
                            "value": "["
                          },
                          {
                            "type": "Quantified",
                            "token": {
                              "type": "NonTerminal",
                              "name": "Value",
                              "params": [
                                {
                                  "type": "NonTerminalParam",
                                  "conditional": true,
                                  "negated": false,
                                  "name": "Const"
                                }
                              ]
                            },
                            "isList": true,
                            "isOptional": false
                          },
                          {
                            "type": "Terminal",
                            "value": "]"
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Lists are ordered sequences of values wrapped in square-brackets "
                    },
                    {
                      "type": "InlineCode",
                      "code": "[ ]"
                    },
                    {
                      "type": "Text",
                      "value": ". The values of a List literal may be any value literal or variable (ex. "
                    },
                    {
                      "type": "InlineCode",
                      "code": "[1, 2, 3]"
                    },
                    {
                      "type": "Text",
                      "value": ")."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Commas are optional throughout GraphQL so trailing commas are allowed and repeated commas do not represent missing values."
                    }
                  ]
                },
                {
                  "type": "Subsection",
                  "header": {
                    "type": "Subheader",
                    "title": "Semantics"
                  },
                  "contents": [
                    {
                      "type": "Semantic",
                      "name": {
                        "type": "NonTerminal",
                        "name": "ListValue",
                        "params": null
                      },
                      "defType": 1,
                      "rhs": {
                        "type": "RHS",
                        "tokens": [
                          {
                            "type": "Terminal",
                            "value": "["
                          },
                          {
                            "type": "Terminal",
                            "value": "]"
                          }
                        ]
                      },
                      "steps": {
                        "type": "List",
                        "ordered": true,
                        "items": [
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "Return a new empty list value."
                              }
                            ]
                          }
                        ]
                      }
                    },
                    {
                      "type": "Semantic",
                      "name": {
                        "type": "NonTerminal",
                        "name": "ListValue",
                        "params": null
                      },
                      "defType": 1,
                      "rhs": {
                        "type": "RHS",
                        "tokens": [
                          {
                            "type": "Terminal",
                            "value": "["
                          },
                          {
                            "type": "Quantified",
                            "token": {
                              "type": "NonTerminal",
                              "name": "Value",
                              "params": null
                            },
                            "isList": true,
                            "isOptional": false
                          },
                          {
                            "type": "Terminal",
                            "value": "]"
                          }
                        ]
                      },
                      "steps": {
                        "type": "List",
                        "ordered": true,
                        "items": [
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "Let "
                              },
                              {
                                "type": "Variable",
                                "name": "inputList"
                              },
                              {
                                "type": "Text",
                                "value": " be a new empty list value."
                              }
                            ]
                          },
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "For each "
                              },
                              {
                                "type": "Quantified",
                                "token": {
                                  "type": "NonTerminal",
                                  "name": "Value",
                                  "params": null
                                },
                                "isList": true,
                                "isOptional": false
                              },
                              {
                                "type": "List",
                                "ordered": true,
                                "items": [
                                  {
                                    "type": "ListItem",
                                    "contents": [
                                      {
                                        "type": "Text",
                                        "value": "Let "
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "value"
                                      },
                                      {
                                        "type": "Text",
                                        "value": " be the result of evaluating "
                                      },
                                      {
                                        "type": "NonTerminal",
                                        "name": "Value",
                                        "params": null
                                      },
                                      {
                                        "type": "Text",
                                        "value": "."
                                      }
                                    ]
                                  },
                                  {
                                    "type": "ListItem",
                                    "contents": [
                                      {
                                        "type": "Text",
                                        "value": "Append "
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "value"
                                      },
                                      {
                                        "type": "Text",
                                        "value": " to "
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "inputList"
                                      },
                                      {
                                        "type": "Text",
                                        "value": "."
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "Return "
                              },
                              {
                                "type": "Variable",
                                "name": "inputList"
                              }
                            ]
                          }
                        ]
                      }
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Input Object Values"
              },
              "contents": [
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "ObjectValue",
                    "params": [
                      {
                        "type": "NonTerminalParam",
                        "conditional": false,
                        "negated": false,
                        "name": "Const"
                      }
                    ]
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "ListRHS",
                    "defs": [
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "Terminal",
                            "value": "{"
                          },
                          {
                            "type": "Terminal",
                            "value": "}"
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "Terminal",
                            "value": "{"
                          },
                          {
                            "type": "Quantified",
                            "token": {
                              "type": "NonTerminal",
                              "name": "ObjectField",
                              "params": [
                                {
                                  "type": "NonTerminalParam",
                                  "conditional": true,
                                  "negated": false,
                                  "name": "Const"
                                }
                              ]
                            },
                            "isList": true,
                            "isOptional": false
                          },
                          {
                            "type": "Terminal",
                            "value": "}"
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "ObjectField",
                    "params": [
                      {
                        "type": "NonTerminalParam",
                        "conditional": false,
                        "negated": false,
                        "name": "Const"
                      }
                    ]
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "Name",
                        "params": null
                      },
                      {
                        "type": "Terminal",
                        "value": ":"
                      },
                      {
                        "type": "NonTerminal",
                        "name": "Value",
                        "params": [
                          {
                            "type": "NonTerminalParam",
                            "conditional": true,
                            "negated": false,
                            "name": "Const"
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Input object literal values are unordered lists of keyed input values wrapped in curly-braces "
                    },
                    {
                      "type": "InlineCode",
                      "code": "{ }"
                    },
                    {
                      "type": "Text",
                      "value": ". The values of an object literal may be any input value literal or variable (ex. "
                    },
                    {
                      "type": "InlineCode",
                      "code": "{ name: \"Hello world\", score: 1.0 }"
                    },
                    {
                      "type": "Text",
                      "value": "). We refer to literal representation of input objects as “object literals.”"
                    }
                  ]
                },
                {
                  "type": "Subsection",
                  "header": {
                    "type": "Subheader",
                    "title": "Input object fields are unordered"
                  },
                  "contents": [
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Input object fields may be provided in any syntactic order and maintain identical semantic meaning."
                        }
                      ]
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "These two queries are semantically identical:"
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": "graphql",
                      "example": true,
                      "counter": false,
                      "code": "{\n  nearestThing(location: { lon: 12.43, lat: -53.211 })\n}\n"
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": "graphql",
                      "example": true,
                      "counter": false,
                      "code": "{\n  nearestThing(location: { lat: -53.211, lon: 12.43 })\n}\n"
                    }
                  ]
                },
                {
                  "type": "Subsection",
                  "header": {
                    "type": "Subheader",
                    "title": "Semantics"
                  },
                  "contents": [
                    {
                      "type": "Semantic",
                      "name": {
                        "type": "NonTerminal",
                        "name": "ObjectValue",
                        "params": null
                      },
                      "defType": 1,
                      "rhs": {
                        "type": "RHS",
                        "tokens": [
                          {
                            "type": "Terminal",
                            "value": "{"
                          },
                          {
                            "type": "Terminal",
                            "value": "}"
                          }
                        ]
                      },
                      "steps": {
                        "type": "List",
                        "ordered": true,
                        "items": [
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "Return a new input object value with no fields."
                              }
                            ]
                          }
                        ]
                      }
                    },
                    {
                      "type": "Semantic",
                      "name": {
                        "type": "NonTerminal",
                        "name": "ObjectValue",
                        "params": null
                      },
                      "defType": 1,
                      "rhs": {
                        "type": "RHS",
                        "tokens": [
                          {
                            "type": "Terminal",
                            "value": "{"
                          },
                          {
                            "type": "Quantified",
                            "token": {
                              "type": "NonTerminal",
                              "name": "ObjectField",
                              "params": null
                            },
                            "isList": true,
                            "isOptional": false
                          },
                          {
                            "type": "Terminal",
                            "value": "}"
                          }
                        ]
                      },
                      "steps": {
                        "type": "List",
                        "ordered": true,
                        "items": [
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "Let "
                              },
                              {
                                "type": "Variable",
                                "name": "inputObject"
                              },
                              {
                                "type": "Text",
                                "value": " be a new input object value with no fields."
                              }
                            ]
                          },
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "For each "
                              },
                              {
                                "type": "Variable",
                                "name": "field"
                              },
                              {
                                "type": "Text",
                                "value": " in "
                              },
                              {
                                "type": "Quantified",
                                "token": {
                                  "type": "NonTerminal",
                                  "name": "ObjectField",
                                  "params": null
                                },
                                "isList": true,
                                "isOptional": false
                              },
                              {
                                "type": "List",
                                "ordered": true,
                                "items": [
                                  {
                                    "type": "ListItem",
                                    "contents": [
                                      {
                                        "type": "Text",
                                        "value": "Let "
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "name"
                                      },
                                      {
                                        "type": "Text",
                                        "value": " be "
                                      },
                                      {
                                        "type": "NonTerminal",
                                        "name": "Name",
                                        "params": null
                                      },
                                      {
                                        "type": "Text",
                                        "value": " in "
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "field"
                                      },
                                      {
                                        "type": "Text",
                                        "value": "."
                                      }
                                    ]
                                  },
                                  {
                                    "type": "ListItem",
                                    "contents": [
                                      {
                                        "type": "Text",
                                        "value": "Let "
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "value"
                                      },
                                      {
                                        "type": "Text",
                                        "value": " be the result of evaluating "
                                      },
                                      {
                                        "type": "NonTerminal",
                                        "name": "Value",
                                        "params": null
                                      },
                                      {
                                        "type": "Text",
                                        "value": " in "
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "field"
                                      },
                                      {
                                        "type": "Text",
                                        "value": "."
                                      }
                                    ]
                                  },
                                  {
                                    "type": "ListItem",
                                    "contents": [
                                      {
                                        "type": "Text",
                                        "value": "Add a field to "
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "inputObject"
                                      },
                                      {
                                        "type": "Text",
                                        "value": " of name "
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "name"
                                      },
                                      {
                                        "type": "Text",
                                        "value": " containing value "
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "value"
                                      },
                                      {
                                        "type": "Text",
                                        "value": "."
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "Return "
                              },
                              {
                                "type": "Variable",
                                "name": "inputObject"
                              }
                            ]
                          }
                        ]
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Variables"
          },
          "contents": [
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "Variable",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "Terminal",
                    "value": "$"
                  },
                  {
                    "type": "NonTerminal",
                    "name": "Name",
                    "params": null
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "VariableDefinitions",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "Terminal",
                    "value": "("
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "VariableDefinition",
                      "params": null
                    },
                    "isList": true,
                    "isOptional": false
                  },
                  {
                    "type": "Terminal",
                    "value": ")"
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "VariableDefinition",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "NonTerminal",
                    "name": "Variable",
                    "params": null
                  },
                  {
                    "type": "Terminal",
                    "value": ":"
                  },
                  {
                    "type": "NonTerminal",
                    "name": "Type",
                    "params": null
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "DefaultValue",
                      "params": null
                    },
                    "isList": false,
                    "isOptional": true
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "Directives",
                      "params": [
                        {
                          "type": "NonTerminalParam",
                          "conditional": false,
                          "negated": false,
                          "name": "Const"
                        }
                      ]
                    },
                    "isList": false,
                    "isOptional": true
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "DefaultValue",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "Terminal",
                    "value": "="
                  },
                  {
                    "type": "NonTerminal",
                    "name": "Value",
                    "params": [
                      {
                        "type": "NonTerminalParam",
                        "conditional": false,
                        "negated": false,
                        "name": "Const"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "A GraphQL operation can be parameterized with variables, maximizing reuse, and avoiding costly string building in clients at runtime."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "If not defined as constant (for example, in "
                },
                {
                  "type": "NonTerminal",
                  "name": "DefaultValue",
                  "params": null
                },
                {
                  "type": "Text",
                  "value": "), a "
                },
                {
                  "type": "NonTerminal",
                  "name": "Variable",
                  "params": null
                },
                {
                  "type": "Text",
                  "value": " can be supplied for an input value."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Variables must be defined at the top of an operation and are in scope throughout the execution of that operation."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "In this example, we want to fetch a profile picture size based on the size of a particular device:"
                }
              ]
            },
            {
              "type": "Code",
              "raw": false,
              "lang": "graphql",
              "example": true,
              "counter": false,
              "code": "query getZuckProfile($devicePicSize: Int) {\n  user(id: 4) {\n    id\n    name\n    profilePic(size: $devicePicSize)\n  }\n}\n"
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Values for those variables are provided to a GraphQL service along with a request so they may be substituted during execution. If providing JSON for the variables’ values, we could run this query and request profilePic of size "
                },
                {
                  "type": "InlineCode",
                  "code": "60"
                },
                {
                  "type": "Text",
                  "value": " width:"
                }
              ]
            },
            {
              "type": "Code",
              "raw": false,
              "lang": "json",
              "example": true,
              "counter": false,
              "code": "{\n  \"devicePicSize\": 60\n}\n"
            },
            {
              "type": "Subsection",
              "header": {
                "type": "Subheader",
                "title": "Variable use within Fragments"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Query variables can be used within fragments. Query variables have global scope with a given operation, so a variable used within a fragment must be declared in any top-level operation that transitively consumes that fragment. If a variable is referenced in a fragment and is included by an operation that does not define that variable, the operation cannot be executed."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Type References"
          },
          "contents": [
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "Type",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "ListRHS",
                "defs": [
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "NamedType",
                        "params": null
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "ListType",
                        "params": null
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "NonNullType",
                        "params": null
                      }
                    ]
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "NamedType",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "NonTerminal",
                    "name": "Name",
                    "params": null
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "ListType",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "Terminal",
                    "value": "["
                  },
                  {
                    "type": "NonTerminal",
                    "name": "Type",
                    "params": null
                  },
                  {
                    "type": "Terminal",
                    "value": "]"
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "NonNullType",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "ListRHS",
                "defs": [
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "NamedType",
                        "params": null
                      },
                      {
                        "type": "Terminal",
                        "value": "!"
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "ListType",
                        "params": null
                      },
                      {
                        "type": "Terminal",
                        "value": "!"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "GraphQL describes the types of data expected by query variables. Input types may be lists of another input type, or a non-null variant of any other input type."
                }
              ]
            },
            {
              "type": "Subsection",
              "header": {
                "type": "Subheader",
                "title": "Semantics"
              },
              "contents": [
                {
                  "type": "Semantic",
                  "name": {
                    "type": "NonTerminal",
                    "name": "Type",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "RHS",
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "Name",
                        "params": null
                      }
                    ]
                  },
                  "steps": {
                    "type": "List",
                    "ordered": true,
                    "items": [
                      {
                        "type": "ListItem",
                        "contents": [
                          {
                            "type": "Text",
                            "value": "Let "
                          },
                          {
                            "type": "Variable",
                            "name": "name"
                          },
                          {
                            "type": "Text",
                            "value": " be the string value of "
                          },
                          {
                            "type": "NonTerminal",
                            "name": "Name",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "ListItem",
                        "contents": [
                          {
                            "type": "Text",
                            "value": "Let "
                          },
                          {
                            "type": "Variable",
                            "name": "type"
                          },
                          {
                            "type": "Text",
                            "value": " be the type defined in the Schema named "
                          },
                          {
                            "type": "Variable",
                            "name": "name"
                          }
                        ]
                      },
                      {
                        "type": "ListItem",
                        "contents": [
                          {
                            "type": "Variable",
                            "name": "type"
                          },
                          {
                            "type": "Text",
                            "value": " must not be "
                          },
                          {
                            "type": "Keyword",
                            "value": "null"
                          }
                        ]
                      },
                      {
                        "type": "ListItem",
                        "contents": [
                          {
                            "type": "Text",
                            "value": "Return "
                          },
                          {
                            "type": "Variable",
                            "name": "type"
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "type": "Semantic",
                  "name": {
                    "type": "NonTerminal",
                    "name": "Type",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "RHS",
                    "tokens": [
                      {
                        "type": "Terminal",
                        "value": "["
                      },
                      {
                        "type": "NonTerminal",
                        "name": "Type",
                        "params": null
                      },
                      {
                        "type": "Terminal",
                        "value": "]"
                      }
                    ]
                  },
                  "steps": {
                    "type": "List",
                    "ordered": true,
                    "items": [
                      {
                        "type": "ListItem",
                        "contents": [
                          {
                            "type": "Text",
                            "value": "Let "
                          },
                          {
                            "type": "Variable",
                            "name": "itemType"
                          },
                          {
                            "type": "Text",
                            "value": " be the result of evaluating "
                          },
                          {
                            "type": "NonTerminal",
                            "name": "Type",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "ListItem",
                        "contents": [
                          {
                            "type": "Text",
                            "value": "Let "
                          },
                          {
                            "type": "Variable",
                            "name": "type"
                          },
                          {
                            "type": "Text",
                            "value": " be a List type where "
                          },
                          {
                            "type": "Variable",
                            "name": "itemType"
                          },
                          {
                            "type": "Text",
                            "value": " is the contained type."
                          }
                        ]
                      },
                      {
                        "type": "ListItem",
                        "contents": [
                          {
                            "type": "Text",
                            "value": "Return "
                          },
                          {
                            "type": "Variable",
                            "name": "type"
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "type": "Semantic",
                  "name": {
                    "type": "NonTerminal",
                    "name": "Type",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "RHS",
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "Type",
                        "params": null
                      },
                      {
                        "type": "Terminal",
                        "value": "!"
                      }
                    ]
                  },
                  "steps": {
                    "type": "List",
                    "ordered": true,
                    "items": [
                      {
                        "type": "ListItem",
                        "contents": [
                          {
                            "type": "Text",
                            "value": "Let "
                          },
                          {
                            "type": "Variable",
                            "name": "nullableType"
                          },
                          {
                            "type": "Text",
                            "value": " be the result of evaluating "
                          },
                          {
                            "type": "NonTerminal",
                            "name": "Type",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "ListItem",
                        "contents": [
                          {
                            "type": "Text",
                            "value": "Let "
                          },
                          {
                            "type": "Variable",
                            "name": "type"
                          },
                          {
                            "type": "Text",
                            "value": " be a Non-Null type where "
                          },
                          {
                            "type": "Variable",
                            "name": "nullableType"
                          },
                          {
                            "type": "Text",
                            "value": " is the contained type."
                          }
                        ]
                      },
                      {
                        "type": "ListItem",
                        "contents": [
                          {
                            "type": "Text",
                            "value": "Return "
                          },
                          {
                            "type": "Variable",
                            "name": "type"
                          }
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Directives"
          },
          "contents": [
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "Directives",
                "params": [
                  {
                    "type": "NonTerminalParam",
                    "conditional": false,
                    "negated": false,
                    "name": "Const"
                  }
                ]
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "Directive",
                      "params": [
                        {
                          "type": "NonTerminalParam",
                          "conditional": true,
                          "negated": false,
                          "name": "Const"
                        }
                      ]
                    },
                    "isList": true,
                    "isOptional": false
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "Directive",
                "params": [
                  {
                    "type": "NonTerminalParam",
                    "conditional": false,
                    "negated": false,
                    "name": "Const"
                  }
                ]
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "Terminal",
                    "value": "@"
                  },
                  {
                    "type": "NonTerminal",
                    "name": "Name",
                    "params": null
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "Arguments",
                      "params": [
                        {
                          "type": "NonTerminalParam",
                          "conditional": true,
                          "negated": false,
                          "name": "Const"
                        }
                      ]
                    },
                    "isList": false,
                    "isOptional": true
                  }
                ]
              }
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Directives provide a way to describe alternate runtime execution and type validation behavior in a GraphQL document."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "In some cases, you need to provide options to alter GraphQL’s execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Directives have a name along with a list of arguments which may accept values of any input type."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Directives can be used to describe additional information for types, fields, fragments and operations."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "As future versions of GraphQL adopt new configurable execution capabilities, they may be exposed via directives. GraphQL services and tools may also provide additional "
                },
                {
                  "type": "Link",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "custom directives"
                    }
                  ],
                  "url": "#sec-Type-System.Directives.Custom-Directives"
                },
                {
                  "type": "Text",
                  "value": " beyond those described here."
                }
              ]
            },
            {
              "type": "Subsection",
              "header": {
                "type": "Subheader",
                "title": "Directive order is significant"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Directives may be provided in a specific syntactic order which may have semantic interpretation."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "These two type definitions may have different semantic meaning:"
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": "graphql",
                  "example": true,
                  "counter": false,
                  "code": "type Person @addExternalFields(source: \"profiles\") @excludeField(name: \"photo\") {\n  name: String\n}\n"
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": "graphql",
                  "example": true,
                  "counter": false,
                  "code": "type Person @excludeField(name: \"photo\") @addExternalFields(source: \"profiles\") {\n  name: String\n}\n"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "Section",
      "header": {
        "type": "Header",
        "level": 1,
        "secID": null,
        "title": "Type System"
      },
      "contents": [
        {
          "type": "Paragraph",
          "contents": [
            {
              "type": "Text",
              "value": "The GraphQL Type system describes the capabilities of a GraphQL service and is used to determine if a query is valid. The type system also describes the input types of query variables to determine if values provided at runtime are valid."
            }
          ]
        },
        {
          "type": "Production",
          "token": {
            "type": "NonTerminal",
            "name": "TypeSystemDefinition",
            "params": null
          },
          "defType": 1,
          "rhs": {
            "type": "ListRHS",
            "defs": [
              {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "NonTerminal",
                    "name": "SchemaDefinition",
                    "params": null
                  }
                ]
              },
              {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "NonTerminal",
                    "name": "TypeDefinition",
                    "params": null
                  }
                ]
              },
              {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "NonTerminal",
                    "name": "DirectiveDefinition",
                    "params": null
                  }
                ]
              }
            ]
          }
        },
        {
          "type": "Paragraph",
          "contents": [
            {
              "type": "Text",
              "value": "The GraphQL language includes an "
            },
            {
              "type": "Link",
              "contents": [
                {
                  "type": "Text",
                  "value": "IDL"
                }
              ],
              "url": "https://en.wikipedia.org/wiki/Interface_description_language"
            },
            {
              "type": "Text",
              "value": " used to describe a GraphQL service’s type system. Tools may use this definition language to provide utilities such as client code generation or service boot-strapping."
            }
          ]
        },
        {
          "type": "Paragraph",
          "contents": [
            {
              "type": "Text",
              "value": "GraphQL tools which only seek to provide GraphQL query execution may choose not to parse "
            },
            {
              "type": "NonTerminal",
              "name": "TypeSystemDefinition",
              "params": null
            },
            {
              "type": "Text",
              "value": "."
            }
          ]
        },
        {
          "type": "Paragraph",
          "contents": [
            {
              "type": "Text",
              "value": "A GraphQL Document which contains "
            },
            {
              "type": "NonTerminal",
              "name": "TypeSystemDefinition",
              "params": null
            },
            {
              "type": "Text",
              "value": " must not be executed; GraphQL execution services which receive a GraphQL Document containing type system definitions should return a descriptive error."
            }
          ]
        },
        {
          "type": "Note",
          "contents": [
            {
              "type": "Text",
              "value": "The type system definition language is used throughout the remainder of this specification document when illustrating example type systems."
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Type System Extensions"
          },
          "contents": [
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "TypeSystemExtension",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "ListRHS",
                "defs": [
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "SchemaExtension",
                        "params": null
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "TypeExtension",
                        "params": null
                      }
                    ]
                  }
                ]
              }
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Type system extensions are used to represent a GraphQL type system which has been extended from some original type system. For example, this might be used by a local service to represent data a GraphQL client only accesses locally, or by a GraphQL service which is itself an extension of another GraphQL service."
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Descriptions"
          },
          "contents": [
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "Description",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "NonTerminal",
                    "name": "StringValue",
                    "params": null
                  }
                ]
              }
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Documentation is a first-class feature of GraphQL type systems. To ensure the documentation of a GraphQL service remains consistent with its capabilities, descriptions of GraphQL definitions are provided alongside their definitions and made available via introspection."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "To allow GraphQL service designers to easily publish documentation alongside the capabilities of a GraphQL service, GraphQL descriptions are defined using the Markdown syntax (as specified by "
                },
                {
                  "type": "Link",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "CommonMark"
                    }
                  ],
                  "url": "https://commonmark.org/"
                },
                {
                  "type": "Text",
                  "value": "). In the type system definition language, these description strings (often "
                },
                {
                  "type": "NonTerminal",
                  "name": "BlockString",
                  "params": null
                },
                {
                  "type": "Text",
                  "value": ") occur immediately before the definition they describe."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "GraphQL schema and all other definitions (e.g. types, fields, arguments, etc.) which can be described should provide a "
                },
                {
                  "type": "NonTerminal",
                  "name": "Description",
                  "params": null
                },
                {
                  "type": "Text",
                  "value": " unless they are considered self descriptive."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "As an example, this simple GraphQL schema is well described:"
                }
              ]
            },
            {
              "type": "Code",
              "raw": false,
              "lang": "graphql",
              "example": true,
              "counter": false,
              "code": "\"\"\"\nA simple GraphQL schema which is well described.\n\"\"\"\nschema {\n  query: Query\n}\n\n\"\"\"\nRoot type for all your queries\n\"\"\"\ntype Query {\n  \"\"\"\n  Translates a string from a given language into a different language.\n  \"\"\"\n  translate(\n    \"The original language that `text` is provided in.\"\n    fromLanguage: Language\n\n    \"The translated language to be returned.\"\n    toLanguage: Language\n\n    \"The text to be translated.\"\n    text: String\n  ): String\n}\n\n\"\"\"\nThe set of languages supported by `translate`.\n\"\"\"\nenum Language {\n  \"English\"\n  EN\n\n  \"French\"\n  FR\n\n  \"Chinese\"\n  CH\n}\n"
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Schema"
          },
          "contents": [
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "SchemaDefinition",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "Description",
                      "params": null
                    },
                    "isList": false,
                    "isOptional": true
                  },
                  {
                    "type": "Terminal",
                    "value": "schema"
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "Directives",
                      "params": [
                        {
                          "type": "NonTerminalParam",
                          "conditional": false,
                          "negated": false,
                          "name": "Const"
                        }
                      ]
                    },
                    "isList": false,
                    "isOptional": true
                  },
                  {
                    "type": "Terminal",
                    "value": "{"
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "RootOperationTypeDefinition",
                      "params": null
                    },
                    "isList": true,
                    "isOptional": false
                  },
                  {
                    "type": "Terminal",
                    "value": "}"
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "RootOperationTypeDefinition",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "NonTerminal",
                    "name": "OperationType",
                    "params": null
                  },
                  {
                    "type": "Terminal",
                    "value": ":"
                  },
                  {
                    "type": "NonTerminal",
                    "name": "NamedType",
                    "params": null
                  }
                ]
              }
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "A GraphQL service’s collective type system capabilities are referred to as that service’s “schema”. A schema is defined in terms of the types and directives it supports as well as the root operation types for each kind of operation: query, mutation, and subscription; this determines the place in the type system where those operations begin."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "A GraphQL schema must itself be internally valid. This section describes the rules for this validation process where relevant."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "All types within a GraphQL schema must have unique names. No two provided types may have the same name. No provided type may have a name which conflicts with any built in types (including Scalar and Introspection types)."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "All directives within a GraphQL schema must have unique names."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "All types and directives defined within a schema must not have a name which begins with "
                },
                {
                  "type": "StringLiteral",
                  "value": "\"__\""
                },
                {
                  "type": "Text",
                  "value": " (two underscores), as this is used exclusively by GraphQL’s introspection system."
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Root Operation Types"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "A schema defines the initial root operation type for each kind of operation it supports: query, mutation, and subscription; this determines the place in the type system where those operations begin."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "The "
                    },
                    {
                      "type": "InlineCode",
                      "code": "query"
                    },
                    {
                      "type": "Text",
                      "value": " root operation type must be provided and must be an Object type."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "The "
                    },
                    {
                      "type": "InlineCode",
                      "code": "mutation"
                    },
                    {
                      "type": "Text",
                      "value": " root operation type is optional; if it is not provided, the service does not support mutations. If it is provided, it must be an Object type."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Similarly, the "
                    },
                    {
                      "type": "InlineCode",
                      "code": "subscription"
                    },
                    {
                      "type": "Text",
                      "value": " root operation type is also optional; if it is not provided, the service does not support subscriptions. If it is provided, it must be an Object type."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "The fields on the "
                    },
                    {
                      "type": "InlineCode",
                      "code": "query"
                    },
                    {
                      "type": "Text",
                      "value": " root operation type indicate what fields are available at the top level of a GraphQL query. For example, a basic GraphQL query like:"
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": "graphql",
                  "example": true,
                  "counter": false,
                  "code": "query {\n  myName\n}\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Is valid when the "
                    },
                    {
                      "type": "InlineCode",
                      "code": "query"
                    },
                    {
                      "type": "Text",
                      "value": " root operation type has a field named “myName”."
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": "graphql",
                  "example": true,
                  "counter": false,
                  "code": "type Query {\n  myName: String\n}\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Similarly, the following mutation is valid if a "
                    },
                    {
                      "type": "InlineCode",
                      "code": "mutation"
                    },
                    {
                      "type": "Text",
                      "value": " root operation type has a field named “setName”. Note that the "
                    },
                    {
                      "type": "InlineCode",
                      "code": "query"
                    },
                    {
                      "type": "Text",
                      "value": " and "
                    },
                    {
                      "type": "InlineCode",
                      "code": "mutation"
                    },
                    {
                      "type": "Text",
                      "value": " root types must be different types."
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": "graphql",
                  "example": true,
                  "counter": false,
                  "code": "mutation {\n  setName(name: \"Zuck\") {\n    newName\n  }\n}\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "When using the type system definition language, a document must include at most one "
                    },
                    {
                      "type": "InlineCode",
                      "code": "schema"
                    },
                    {
                      "type": "Text",
                      "value": " definition."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "In this example, a GraphQL schema is defined with both query and mutation root types:"
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": "graphql",
                  "example": true,
                  "counter": false,
                  "code": "schema {\n  query: MyQueryRootType\n  mutation: MyMutationRootType\n}\n\ntype MyQueryRootType {\n  someField: String\n}\n\ntype MyMutationRootType {\n  setSomeField(to: String): String\n}\n"
                },
                {
                  "type": "Subsection",
                  "header": {
                    "type": "Subheader",
                    "title": "Default Root Operation Type Names"
                  },
                  "contents": [
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "While any type can be the root operation type for a GraphQL operation, the type system definition language can omit the schema definition when the "
                        },
                        {
                          "type": "InlineCode",
                          "code": "query"
                        },
                        {
                          "type": "Text",
                          "value": ", "
                        },
                        {
                          "type": "InlineCode",
                          "code": "mutation"
                        },
                        {
                          "type": "Text",
                          "value": ", and "
                        },
                        {
                          "type": "InlineCode",
                          "code": "subscription"
                        },
                        {
                          "type": "Text",
                          "value": " root types are named "
                        },
                        {
                          "type": "InlineCode",
                          "code": "Query"
                        },
                        {
                          "type": "Text",
                          "value": ", "
                        },
                        {
                          "type": "InlineCode",
                          "code": "Mutation"
                        },
                        {
                          "type": "Text",
                          "value": ", and "
                        },
                        {
                          "type": "InlineCode",
                          "code": "Subscription"
                        },
                        {
                          "type": "Text",
                          "value": " respectively."
                        }
                      ]
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Likewise, when representing a GraphQL schema using the type system definition language, a schema definition should be omitted if it only uses the default root operation type names."
                        }
                      ]
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "This example describes a valid complete GraphQL schema, despite not explicitly including a "
                        },
                        {
                          "type": "InlineCode",
                          "code": "schema"
                        },
                        {
                          "type": "Text",
                          "value": " definition. The "
                        },
                        {
                          "type": "InlineCode",
                          "code": "Query"
                        },
                        {
                          "type": "Text",
                          "value": " type is presumed to be the "
                        },
                        {
                          "type": "InlineCode",
                          "code": "query"
                        },
                        {
                          "type": "Text",
                          "value": " root operation type of the schema."
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": "graphql",
                      "example": true,
                      "counter": false,
                      "code": "type Query {\n  someField: String\n}\n"
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Schema Extension"
              },
              "contents": [
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "SchemaExtension",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "ListRHS",
                    "defs": [
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "Terminal",
                            "value": "extend"
                          },
                          {
                            "type": "Terminal",
                            "value": "schema"
                          },
                          {
                            "type": "Quantified",
                            "token": {
                              "type": "NonTerminal",
                              "name": "Directives",
                              "params": [
                                {
                                  "type": "NonTerminalParam",
                                  "conditional": false,
                                  "negated": false,
                                  "name": "Const"
                                }
                              ]
                            },
                            "isList": false,
                            "isOptional": true
                          },
                          {
                            "type": "Terminal",
                            "value": "{"
                          },
                          {
                            "type": "Quantified",
                            "token": {
                              "type": "NonTerminal",
                              "name": "RootOperationTypeDefinition",
                              "params": null
                            },
                            "isList": true,
                            "isOptional": false
                          },
                          {
                            "type": "Terminal",
                            "value": "}"
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "Terminal",
                            "value": "extend"
                          },
                          {
                            "type": "Terminal",
                            "value": "schema"
                          },
                          {
                            "type": "NonTerminal",
                            "name": "Directives",
                            "params": [
                              {
                                "type": "NonTerminalParam",
                                "conditional": false,
                                "negated": false,
                                "name": "Const"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Schema extensions are used to represent a schema which has been extended from an original schema. For example, this might be used by a GraphQL service which adds additional operation types, or additional directives to an existing schema."
                    }
                  ]
                },
                {
                  "type": "Subsection",
                  "header": {
                    "type": "Subheader",
                    "title": "Schema Validation"
                  },
                  "contents": [
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Schema extensions have the potential to be invalid if incorrectly defined."
                        }
                      ]
                    },
                    {
                      "type": "List",
                      "ordered": true,
                      "items": [
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "The Schema must already be defined."
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "Any non-repeatable directives provided must not already apply to the original Schema."
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Types"
          },
          "contents": [
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "TypeDefinition",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "ListRHS",
                "defs": [
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "ScalarTypeDefinition",
                        "params": null
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "ObjectTypeDefinition",
                        "params": null
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "InterfaceTypeDefinition",
                        "params": null
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "UnionTypeDefinition",
                        "params": null
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "EnumTypeDefinition",
                        "params": null
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "InputObjectTypeDefinition",
                        "params": null
                      }
                    ]
                  }
                ]
              }
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "The fundamental unit of any GraphQL Schema is the type. There are six kinds of named type definitions in GraphQL, and two wrapping types."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "The most basic type is a "
                },
                {
                  "type": "InlineCode",
                  "code": "Scalar"
                },
                {
                  "type": "Text",
                  "value": ". A scalar represents a primitive value, like a string or an integer. Oftentimes, the possible responses for a scalar field are enumerable. GraphQL offers an "
                },
                {
                  "type": "InlineCode",
                  "code": "Enum"
                },
                {
                  "type": "Text",
                  "value": " type in those cases, where the type specifies the space of valid responses."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Scalars and Enums form the leaves in response trees; the intermediate levels are "
                },
                {
                  "type": "InlineCode",
                  "code": "Object"
                },
                {
                  "type": "Text",
                  "value": " types, which define a set of fields, where each field is another type in the system, allowing the definition of arbitrary type hierarchies."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "GraphQL supports two abstract types: interfaces and unions."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "An "
                },
                {
                  "type": "InlineCode",
                  "code": "Interface"
                },
                {
                  "type": "Text",
                  "value": " defines a list of fields; "
                },
                {
                  "type": "InlineCode",
                  "code": "Object"
                },
                {
                  "type": "Text",
                  "value": " types and other Interface types which implement this Interface are guaranteed to implement those fields. Whenever a field claims it will return an Interface type, it will return a valid implementing Object type during execution."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "A "
                },
                {
                  "type": "InlineCode",
                  "code": "Union"
                },
                {
                  "type": "Text",
                  "value": " defines a list of possible types; similar to interfaces, whenever the type system claims a union will be returned, one of the possible types will be returned."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Finally, oftentimes it is useful to provide complex structs as inputs to GraphQL field arguments or variables; the "
                },
                {
                  "type": "InlineCode",
                  "code": "Input Object"
                },
                {
                  "type": "Text",
                  "value": " type allows the schema to define exactly what data is expected."
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Wrapping Types"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "All of the types so far are assumed to be both nullable and singular: e.g. a scalar string returns either null or a singular string."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "A GraphQL schema may describe that a field represents a list of another type; the "
                    },
                    {
                      "type": "InlineCode",
                      "code": "List"
                    },
                    {
                      "type": "Text",
                      "value": " type is provided for this reason, and wraps another type."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Similarly, the "
                    },
                    {
                      "type": "InlineCode",
                      "code": "Non-Null"
                    },
                    {
                      "type": "Text",
                      "value": " type wraps another type, and denotes that the resulting value will never be "
                    },
                    {
                      "type": "Keyword",
                      "value": "null"
                    },
                    {
                      "type": "Text",
                      "value": " (and that an error cannot result in a "
                    },
                    {
                      "type": "Keyword",
                      "value": "null"
                    },
                    {
                      "type": "Text",
                      "value": " value)."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "These two types are referred to as “wrapping types”; non-wrapping types are referred to as “named types”. A wrapping type has an underlying named type, found by continually unwrapping the type until a named type is found."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Input and Output Types"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Types are used throughout GraphQL to describe both the values accepted as input to arguments and variables as well as the values output by fields. These two uses categorize types as "
                    },
                    {
                      "type": "Italic",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "input types"
                        }
                      ]
                    },
                    {
                      "type": "Text",
                      "value": " and "
                    },
                    {
                      "type": "Italic",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "output types"
                        }
                      ]
                    },
                    {
                      "type": "Text",
                      "value": ". Some kinds of types, like Scalar and Enum types, can be used as both input types and output types; other kinds of types can only be used in one or the other. Input Object types can only be used as input types. Object, Interface, and Union types can only be used as output types. Lists and Non-Null types may be used as input types or output types depending on how the wrapped type may be used."
                    }
                  ]
                },
                {
                  "type": "Algorithm",
                  "call": {
                    "type": "Call",
                    "name": "IsInputType",
                    "args": [
                      {
                        "type": "Variable",
                        "name": "type"
                      }
                    ]
                  },
                  "steps": {
                    "type": "List",
                    "ordered": true,
                    "items": [
                      {
                        "type": "ListItem",
                        "contents": [
                          {
                            "type": "Text",
                            "value": "If "
                          },
                          {
                            "type": "Variable",
                            "name": "type"
                          },
                          {
                            "type": "Text",
                            "value": " is a List type or Non-Null type:"
                          },
                          {
                            "type": "List",
                            "ordered": true,
                            "items": [
                              {
                                "type": "ListItem",
                                "contents": [
                                  {
                                    "type": "Text",
                                    "value": "Let "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "unwrappedType"
                                  },
                                  {
                                    "type": "Text",
                                    "value": " be the unwrapped type of "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "type"
                                  },
                                  {
                                    "type": "Text",
                                    "value": "."
                                  }
                                ]
                              },
                              {
                                "type": "ListItem",
                                "contents": [
                                  {
                                    "type": "Text",
                                    "value": "Return IsInputType("
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "unwrappedType"
                                  },
                                  {
                                    "type": "Text",
                                    "value": ")"
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "type": "ListItem",
                        "contents": [
                          {
                            "type": "Text",
                            "value": "If "
                          },
                          {
                            "type": "Variable",
                            "name": "type"
                          },
                          {
                            "type": "Text",
                            "value": " is a Scalar, Enum, or Input Object type:"
                          },
                          {
                            "type": "List",
                            "ordered": true,
                            "items": [
                              {
                                "type": "ListItem",
                                "contents": [
                                  {
                                    "type": "Text",
                                    "value": "Return "
                                  },
                                  {
                                    "type": "Keyword",
                                    "value": "true"
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "type": "ListItem",
                        "contents": [
                          {
                            "type": "Text",
                            "value": "Return "
                          },
                          {
                            "type": "Keyword",
                            "value": "false"
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "type": "Algorithm",
                  "call": {
                    "type": "Call",
                    "name": "IsOutputType",
                    "args": [
                      {
                        "type": "Variable",
                        "name": "type"
                      }
                    ]
                  },
                  "steps": {
                    "type": "List",
                    "ordered": true,
                    "items": [
                      {
                        "type": "ListItem",
                        "contents": [
                          {
                            "type": "Text",
                            "value": "If "
                          },
                          {
                            "type": "Variable",
                            "name": "type"
                          },
                          {
                            "type": "Text",
                            "value": " is a List type or Non-Null type:"
                          },
                          {
                            "type": "List",
                            "ordered": true,
                            "items": [
                              {
                                "type": "ListItem",
                                "contents": [
                                  {
                                    "type": "Text",
                                    "value": "Let "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "unwrappedType"
                                  },
                                  {
                                    "type": "Text",
                                    "value": " be the unwrapped type of "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "type"
                                  },
                                  {
                                    "type": "Text",
                                    "value": "."
                                  }
                                ]
                              },
                              {
                                "type": "ListItem",
                                "contents": [
                                  {
                                    "type": "Text",
                                    "value": "Return IsOutputType("
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "unwrappedType"
                                  },
                                  {
                                    "type": "Text",
                                    "value": ")"
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "type": "ListItem",
                        "contents": [
                          {
                            "type": "Text",
                            "value": "If "
                          },
                          {
                            "type": "Variable",
                            "name": "type"
                          },
                          {
                            "type": "Text",
                            "value": " is a Scalar, Object, Interface, Union, or Enum type:"
                          },
                          {
                            "type": "List",
                            "ordered": true,
                            "items": [
                              {
                                "type": "ListItem",
                                "contents": [
                                  {
                                    "type": "Text",
                                    "value": "Return "
                                  },
                                  {
                                    "type": "Keyword",
                                    "value": "true"
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "type": "ListItem",
                        "contents": [
                          {
                            "type": "Text",
                            "value": "Return "
                          },
                          {
                            "type": "Keyword",
                            "value": "false"
                          }
                        ]
                      }
                    ]
                  }
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Type Extensions"
              },
              "contents": [
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "TypeExtension",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "ListRHS",
                    "defs": [
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "ScalarTypeExtension",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "ObjectTypeExtension",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "InterfaceTypeExtension",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "UnionTypeExtension",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "EnumTypeExtension",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "InputObjectTypeExtension",
                            "params": null
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Type extensions are used to represent a GraphQL type which has been extended from some original type. For example, this might be used by a local service to represent additional fields a GraphQL client only accesses locally."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Scalars"
          },
          "contents": [
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "ScalarTypeDefinition",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "Description",
                      "params": null
                    },
                    "isList": false,
                    "isOptional": true
                  },
                  {
                    "type": "Terminal",
                    "value": "scalar"
                  },
                  {
                    "type": "NonTerminal",
                    "name": "Name",
                    "params": null
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "Directives",
                      "params": [
                        {
                          "type": "NonTerminalParam",
                          "conditional": false,
                          "negated": false,
                          "name": "Const"
                        }
                      ]
                    },
                    "isList": false,
                    "isOptional": true
                  }
                ]
              }
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Scalar types represent primitive leaf values in a GraphQL type system. GraphQL responses take the form of a hierarchical tree; the leaves of this tree are typically GraphQL Scalar types (but may also be Enum types or "
                },
                {
                  "type": "Keyword",
                  "value": "null"
                },
                {
                  "type": "Text",
                  "value": " values)."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "GraphQL provides a number of built-in scalars (see below), but type systems can add additional scalars with semantic meaning. For example, a GraphQL system could define a scalar called "
                },
                {
                  "type": "InlineCode",
                  "code": "Time"
                },
                {
                  "type": "Text",
                  "value": " which, while serialized as a string, promises to conform to ISO-8601. When querying a field of type "
                },
                {
                  "type": "InlineCode",
                  "code": "Time"
                },
                {
                  "type": "Text",
                  "value": ", you can then rely on the ability to parse the result with an ISO-8601 parser and use a client-specific primitive for time. Another example of a potentially useful custom scalar is "
                },
                {
                  "type": "InlineCode",
                  "code": "Url"
                },
                {
                  "type": "Text",
                  "value": ", which serializes as a string, but is guaranteed by the service to be a valid URL."
                }
              ]
            },
            {
              "type": "Code",
              "raw": false,
              "lang": "graphql",
              "example": true,
              "counter": false,
              "code": "scalar Time\nscalar Url\n"
            },
            {
              "type": "Subsection",
              "header": {
                "type": "Subheader",
                "title": "Built-in Scalars"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "GraphQL specifies a basic set of well-defined Scalar types: "
                    },
                    {
                      "type": "NonTerminal",
                      "name": "Int",
                      "params": null
                    },
                    {
                      "type": "Text",
                      "value": ", "
                    },
                    {
                      "type": "NonTerminal",
                      "name": "Float",
                      "params": null
                    },
                    {
                      "type": "Text",
                      "value": ", "
                    },
                    {
                      "type": "NonTerminal",
                      "name": "String",
                      "params": null
                    },
                    {
                      "type": "Text",
                      "value": ", "
                    },
                    {
                      "type": "NonTerminal",
                      "name": "Boolean",
                      "params": null
                    },
                    {
                      "type": "Text",
                      "value": ", and "
                    },
                    {
                      "type": "NonTerminal",
                      "name": "ID",
                      "params": null
                    },
                    {
                      "type": "Text",
                      "value": ". A GraphQL framework should support all of these types, and a GraphQL service which provides a type by these names must adhere to the behavior described for them in this document. As an example, a service must not include a type called "
                    },
                    {
                      "type": "NonTerminal",
                      "name": "Int",
                      "params": null
                    },
                    {
                      "type": "Text",
                      "value": " and use it to represent 64-bit numbers, internationalization information, or anything other than what is defined in this document."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "When returning the set of types from the "
                    },
                    {
                      "type": "InlineCode",
                      "code": "__Schema"
                    },
                    {
                      "type": "Text",
                      "value": " introspection type, all referenced built-in scalars must be included. If a built-in scalar type is not referenced anywhere in a schema (there is no field, argument, or input field of that type) then it must not be included."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "When representing a GraphQL schema using the type system definition language, all built-in scalars must be omitted for brevity."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Subsection",
              "header": {
                "type": "Subheader",
                "title": "Result Coercion and Serialization"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "A GraphQL service, when preparing a field of a given scalar type, must uphold the contract the scalar type describes, either by coercing the value or producing a field error if a value cannot be coerced or if coercion may result in data loss."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "A GraphQL service may decide to allow coercing different internal types to the expected return type. For example when coercing a field of type "
                    },
                    {
                      "type": "NonTerminal",
                      "name": "Int",
                      "params": null
                    },
                    {
                      "type": "Text",
                      "value": " a boolean "
                    },
                    {
                      "type": "Keyword",
                      "value": "true"
                    },
                    {
                      "type": "Text",
                      "value": " value may produce "
                    },
                    {
                      "type": "Terminal",
                      "value": "1"
                    },
                    {
                      "type": "Text",
                      "value": " or a string value "
                    },
                    {
                      "type": "StringLiteral",
                      "value": "\"123\""
                    },
                    {
                      "type": "Text",
                      "value": " may be parsed as base-10 "
                    },
                    {
                      "type": "Terminal",
                      "value": "123"
                    },
                    {
                      "type": "Text",
                      "value": ". However if internal type coercion cannot be reasonably performed without losing information, then it must raise a field error."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Since this coercion behavior is not observable to clients of the GraphQL service, the precise rules of coercion are left to the implementation. The only requirement is that the service must yield values which adhere to the expected Scalar type."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "GraphQL scalars are serialized according to the serialization format being used. There may be a most appropriate serialized primitive for each given scalar type, and the service should produce each primitive where appropriate."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "See "
                    },
                    {
                      "type": "Link",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Serialization Format"
                        }
                      ],
                      "url": "#sec-Serialization-Format"
                    },
                    {
                      "type": "Text",
                      "value": " for more detailed information on the serialization of scalars in common JSON and other formats."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Subsection",
              "header": {
                "type": "Subheader",
                "title": "Input Coercion"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "If a GraphQL service expects a scalar type as input to an argument, coercion is observable and the rules must be well defined. If an input value does not match a coercion rule, a query error must be raised."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "GraphQL has different constant literals to represent integer and floating-point input values, and coercion rules may apply differently depending on which type of input value is encountered. GraphQL may be parameterized by query variables, the values of which are often serialized when sent over a transport like HTTP. Since some common serializations (ex. JSON) do not discriminate between integer and floating-point values, they are interpreted as an integer input value if they have an empty fractional part (ex. "
                    },
                    {
                      "type": "InlineCode",
                      "code": "1.0"
                    },
                    {
                      "type": "Text",
                      "value": ") and otherwise as floating-point input value."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "For all types below, with the exception of Non-Null, if the explicit value "
                    },
                    {
                      "type": "Keyword",
                      "value": "null"
                    },
                    {
                      "type": "Text",
                      "value": " is provided, then the result of input coercion is "
                    },
                    {
                      "type": "Keyword",
                      "value": "null"
                    },
                    {
                      "type": "Text",
                      "value": "."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Int"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "The Int scalar type represents a signed 32-bit numeric non-fractional value. Response formats that support a 32-bit integer or a number type should use that type to represent this scalar."
                    }
                  ]
                },
                {
                  "type": "Subsection",
                  "header": {
                    "type": "Subheader",
                    "title": "Result Coercion"
                  },
                  "contents": [
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Fields returning the type "
                        },
                        {
                          "type": "NonTerminal",
                          "name": "Int",
                          "params": null
                        },
                        {
                          "type": "Text",
                          "value": " expect to encounter 32-bit integer internal values."
                        }
                      ]
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "GraphQL services may coerce non-integer internal values to integers when reasonable without losing information, otherwise they must raise a field error. Examples of this may include returning "
                        },
                        {
                          "type": "InlineCode",
                          "code": "1"
                        },
                        {
                          "type": "Text",
                          "value": " for the floating-point number "
                        },
                        {
                          "type": "InlineCode",
                          "code": "1.0"
                        },
                        {
                          "type": "Text",
                          "value": ", or returning "
                        },
                        {
                          "type": "InlineCode",
                          "code": "123"
                        },
                        {
                          "type": "Text",
                          "value": " for the string "
                        },
                        {
                          "type": "InlineCode",
                          "code": "\"123\""
                        },
                        {
                          "type": "Text",
                          "value": ". In scenarios where coercion may lose data, raising a field error is more appropriate. For example, a floating-point number "
                        },
                        {
                          "type": "InlineCode",
                          "code": "1.2"
                        },
                        {
                          "type": "Text",
                          "value": " should raise a field error instead of being truncated to "
                        },
                        {
                          "type": "InlineCode",
                          "code": "1"
                        },
                        {
                          "type": "Text",
                          "value": "."
                        }
                      ]
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "If the integer internal value represents a value less than -2"
                        },
                        {
                          "type": "HTMLTag",
                          "tag": "<sup>"
                        },
                        {
                          "type": "Text",
                          "value": "31"
                        },
                        {
                          "type": "HTMLTag",
                          "tag": "</sup>"
                        },
                        {
                          "type": "Text",
                          "value": " or greater than or equal to 2"
                        },
                        {
                          "type": "HTMLTag",
                          "tag": "<sup>"
                        },
                        {
                          "type": "Text",
                          "value": "31"
                        },
                        {
                          "type": "HTMLTag",
                          "tag": "</sup>"
                        },
                        {
                          "type": "Text",
                          "value": ", a field error should be raised."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "Subsection",
                  "header": {
                    "type": "Subheader",
                    "title": "Input Coercion"
                  },
                  "contents": [
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "When expected as an input type, only integer input values are accepted. All other input values, including strings with numeric content, must raise a query error indicating an incorrect type. If the integer input value represents a value less than -2"
                        },
                        {
                          "type": "HTMLTag",
                          "tag": "<sup>"
                        },
                        {
                          "type": "Text",
                          "value": "31"
                        },
                        {
                          "type": "HTMLTag",
                          "tag": "</sup>"
                        },
                        {
                          "type": "Text",
                          "value": " or greater than or equal to 2"
                        },
                        {
                          "type": "HTMLTag",
                          "tag": "<sup>"
                        },
                        {
                          "type": "Text",
                          "value": "31"
                        },
                        {
                          "type": "HTMLTag",
                          "tag": "</sup>"
                        },
                        {
                          "type": "Text",
                          "value": ", a query error should be raised."
                        }
                      ]
                    },
                    {
                      "type": "Note",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Numeric integer values larger than 32-bit should either use String or a custom-defined Scalar type, as not all platforms and transports support encoding integer numbers larger than 32-bit."
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Float"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "The Float scalar type represents signed double-precision fractional values as specified by "
                    },
                    {
                      "type": "Link",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "IEEE 754"
                        }
                      ],
                      "url": "https://en.wikipedia.org/wiki/IEEE_floating_point"
                    },
                    {
                      "type": "Text",
                      "value": ". Response formats that support an appropriate double-precision number type should use that type to represent this scalar."
                    }
                  ]
                },
                {
                  "type": "Subsection",
                  "header": {
                    "type": "Subheader",
                    "title": "Result Coercion"
                  },
                  "contents": [
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Fields returning the type "
                        },
                        {
                          "type": "NonTerminal",
                          "name": "Float",
                          "params": null
                        },
                        {
                          "type": "Text",
                          "value": " expect to encounter double-precision floating-point internal values."
                        }
                      ]
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "GraphQL services may coerce non-floating-point internal values to "
                        },
                        {
                          "type": "NonTerminal",
                          "name": "Float",
                          "params": null
                        },
                        {
                          "type": "Text",
                          "value": " when reasonable without losing information, otherwise they must raise a field error. Examples of this may include returning "
                        },
                        {
                          "type": "InlineCode",
                          "code": "1.0"
                        },
                        {
                          "type": "Text",
                          "value": " for the integer number "
                        },
                        {
                          "type": "InlineCode",
                          "code": "1"
                        },
                        {
                          "type": "Text",
                          "value": ", or "
                        },
                        {
                          "type": "InlineCode",
                          "code": "123.0"
                        },
                        {
                          "type": "Text",
                          "value": " for the string "
                        },
                        {
                          "type": "InlineCode",
                          "code": "\"123\""
                        },
                        {
                          "type": "Text",
                          "value": "."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "Subsection",
                  "header": {
                    "type": "Subheader",
                    "title": "Input Coercion"
                  },
                  "contents": [
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "When expected as an input type, both integer and float input values are accepted. Integer input values are coerced to Float by adding an empty fractional part, for example "
                        },
                        {
                          "type": "InlineCode",
                          "code": "1.0"
                        },
                        {
                          "type": "Text",
                          "value": " for the integer input value "
                        },
                        {
                          "type": "InlineCode",
                          "code": "1"
                        },
                        {
                          "type": "Text",
                          "value": ". All other input values, including strings with numeric content, must raise a query error indicating an incorrect type. If the integer input value represents a value not representable by IEEE 754, a query error should be raised."
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "String"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "The String scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text. All response formats must support string representations, and that representation must be used here."
                    }
                  ]
                },
                {
                  "type": "Subsection",
                  "header": {
                    "type": "Subheader",
                    "title": "Result Coercion"
                  },
                  "contents": [
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Fields returning the type "
                        },
                        {
                          "type": "NonTerminal",
                          "name": "String",
                          "params": null
                        },
                        {
                          "type": "Text",
                          "value": " expect to encounter UTF-8 string internal values."
                        }
                      ]
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "GraphQL services may coerce non-string raw values to "
                        },
                        {
                          "type": "NonTerminal",
                          "name": "String",
                          "params": null
                        },
                        {
                          "type": "Text",
                          "value": " when reasonable without losing information, otherwise they must raise a field error. Examples of this may include returning the string "
                        },
                        {
                          "type": "InlineCode",
                          "code": "\"true\""
                        },
                        {
                          "type": "Text",
                          "value": " for a boolean true value, or the string "
                        },
                        {
                          "type": "InlineCode",
                          "code": "\"1\""
                        },
                        {
                          "type": "Text",
                          "value": " for the integer "
                        },
                        {
                          "type": "InlineCode",
                          "code": "1"
                        },
                        {
                          "type": "Text",
                          "value": "."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "Subsection",
                  "header": {
                    "type": "Subheader",
                    "title": "Input Coercion"
                  },
                  "contents": [
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "When expected as an input type, only valid UTF-8 string input values are accepted. All other input values must raise a query error indicating an incorrect type."
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Boolean"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "The Boolean scalar type represents "
                    },
                    {
                      "type": "InlineCode",
                      "code": "true"
                    },
                    {
                      "type": "Text",
                      "value": " or "
                    },
                    {
                      "type": "InlineCode",
                      "code": "false"
                    },
                    {
                      "type": "Text",
                      "value": ". Response formats should use a built-in boolean type if supported; otherwise, they should use their representation of the integers "
                    },
                    {
                      "type": "InlineCode",
                      "code": "1"
                    },
                    {
                      "type": "Text",
                      "value": " and "
                    },
                    {
                      "type": "InlineCode",
                      "code": "0"
                    },
                    {
                      "type": "Text",
                      "value": "."
                    }
                  ]
                },
                {
                  "type": "Subsection",
                  "header": {
                    "type": "Subheader",
                    "title": "Result Coercion"
                  },
                  "contents": [
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Fields returning the type "
                        },
                        {
                          "type": "NonTerminal",
                          "name": "Boolean",
                          "params": null
                        },
                        {
                          "type": "Text",
                          "value": " expect to encounter boolean internal values."
                        }
                      ]
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "GraphQL services may coerce non-boolean raw values to "
                        },
                        {
                          "type": "NonTerminal",
                          "name": "Boolean",
                          "params": null
                        },
                        {
                          "type": "Text",
                          "value": " when reasonable without losing information, otherwise they must raise a field error. Examples of this may include returning "
                        },
                        {
                          "type": "InlineCode",
                          "code": "true"
                        },
                        {
                          "type": "Text",
                          "value": " for non-zero numbers."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "Subsection",
                  "header": {
                    "type": "Subheader",
                    "title": "Input Coercion"
                  },
                  "contents": [
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "When expected as an input type, only boolean input values are accepted. All other input values must raise a query error indicating an incorrect type."
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "ID"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "The ID scalar type represents a unique identifier, often used to refetch an object or as the key for a cache. The ID type is serialized in the same way as a "
                    },
                    {
                      "type": "NonTerminal",
                      "name": "String",
                      "params": null
                    },
                    {
                      "type": "Text",
                      "value": "; however, it is not intended to be human-readable. While it is often numeric, it should always serialize as a "
                    },
                    {
                      "type": "NonTerminal",
                      "name": "String",
                      "params": null
                    },
                    {
                      "type": "Text",
                      "value": "."
                    }
                  ]
                },
                {
                  "type": "Subsection",
                  "header": {
                    "type": "Subheader",
                    "title": "Result Coercion"
                  },
                  "contents": [
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "GraphQL is agnostic to ID format, and serializes to string to ensure consistency across many formats ID could represent, from small auto-increment numbers, to large 128-bit random numbers, to base64 encoded values, or string values of a format like "
                        },
                        {
                          "type": "Link",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "GUID"
                            }
                          ],
                          "url": "https://en.wikipedia.org/wiki/Globally_unique_identifier"
                        },
                        {
                          "type": "Text",
                          "value": "."
                        }
                      ]
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "GraphQL services should coerce as appropriate given the ID formats they expect. When coercion is not possible they must raise a field error."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "Subsection",
                  "header": {
                    "type": "Subheader",
                    "title": "Input Coercion"
                  },
                  "contents": [
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "When expected as an input type, any string (such as "
                        },
                        {
                          "type": "InlineCode",
                          "code": "\"4\""
                        },
                        {
                          "type": "Text",
                          "value": ") or integer (such as "
                        },
                        {
                          "type": "InlineCode",
                          "code": "4"
                        },
                        {
                          "type": "Text",
                          "value": " or "
                        },
                        {
                          "type": "InlineCode",
                          "code": "-4"
                        },
                        {
                          "type": "Text",
                          "value": ") input value should be coerced to ID as appropriate for the ID formats a given GraphQL service expects. Any other input value, including float input values (such as "
                        },
                        {
                          "type": "InlineCode",
                          "code": "4.0"
                        },
                        {
                          "type": "Text",
                          "value": "), must raise a query error indicating an incorrect type."
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Scalar Extensions"
              },
              "contents": [
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "ScalarTypeExtension",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "ListRHS",
                    "defs": [
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "Terminal",
                            "value": "extend"
                          },
                          {
                            "type": "Terminal",
                            "value": "scalar"
                          },
                          {
                            "type": "NonTerminal",
                            "name": "Name",
                            "params": null
                          },
                          {
                            "type": "NonTerminal",
                            "name": "Directives",
                            "params": [
                              {
                                "type": "NonTerminalParam",
                                "conditional": false,
                                "negated": false,
                                "name": "Const"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Scalar type extensions are used to represent a scalar type which has been extended from some original scalar type. For example, this might be used by a GraphQL tool or service which adds directives to an existing scalar."
                    }
                  ]
                },
                {
                  "type": "Subsection",
                  "header": {
                    "type": "Subheader",
                    "title": "Type Validation"
                  },
                  "contents": [
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Scalar type extensions have the potential to be invalid if incorrectly defined."
                        }
                      ]
                    },
                    {
                      "type": "List",
                      "ordered": true,
                      "items": [
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "The named type must already be defined and must be a Scalar type."
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "Any non-repeatable directives provided must not already apply to the original Scalar type."
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Objects"
          },
          "contents": [
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "ObjectTypeDefinition",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "Description",
                      "params": null
                    },
                    "isList": false,
                    "isOptional": true
                  },
                  {
                    "type": "Terminal",
                    "value": "type"
                  },
                  {
                    "type": "NonTerminal",
                    "name": "Name",
                    "params": null
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "ImplementsInterfaces",
                      "params": null
                    },
                    "isList": false,
                    "isOptional": true
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "Directives",
                      "params": [
                        {
                          "type": "NonTerminalParam",
                          "conditional": false,
                          "negated": false,
                          "name": "Const"
                        }
                      ]
                    },
                    "isList": false,
                    "isOptional": true
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "FieldsDefinition",
                      "params": null
                    },
                    "isList": false,
                    "isOptional": true
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "ImplementsInterfaces",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "ListRHS",
                "defs": [
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "ImplementsInterfaces",
                        "params": null
                      },
                      {
                        "type": "Terminal",
                        "value": "&"
                      },
                      {
                        "type": "NonTerminal",
                        "name": "NamedType",
                        "params": null
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Terminal",
                        "value": "implements"
                      },
                      {
                        "type": "Quantified",
                        "token": {
                          "type": "Terminal",
                          "value": "&"
                        },
                        "isList": false,
                        "isOptional": true
                      },
                      {
                        "type": "NonTerminal",
                        "name": "NamedType",
                        "params": null
                      }
                    ]
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "FieldsDefinition",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "Terminal",
                    "value": "{"
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "FieldDefinition",
                      "params": null
                    },
                    "isList": true,
                    "isOptional": false
                  },
                  {
                    "type": "Terminal",
                    "value": "}"
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "FieldDefinition",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "Description",
                      "params": null
                    },
                    "isList": false,
                    "isOptional": true
                  },
                  {
                    "type": "NonTerminal",
                    "name": "Name",
                    "params": null
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "ArgumentsDefinition",
                      "params": null
                    },
                    "isList": false,
                    "isOptional": true
                  },
                  {
                    "type": "Terminal",
                    "value": ":"
                  },
                  {
                    "type": "NonTerminal",
                    "name": "Type",
                    "params": null
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "Directives",
                      "params": [
                        {
                          "type": "NonTerminalParam",
                          "conditional": false,
                          "negated": false,
                          "name": "Const"
                        }
                      ]
                    },
                    "isList": false,
                    "isOptional": true
                  }
                ]
              }
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "GraphQL queries are hierarchical and composed, describing a tree of information. While Scalar types describe the leaf values of these hierarchical queries, Objects describe the intermediate levels."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "GraphQL Objects represent a list of named fields, each of which yield a value of a specific type. Object values should be serialized as ordered maps, where the queried field names (or aliases) are the keys and the result of evaluating the field is the value, ordered by the order in which they appear in the query."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "All fields defined within an Object type must not have a name which begins with "
                },
                {
                  "type": "StringLiteral",
                  "value": "\"__\""
                },
                {
                  "type": "Text",
                  "value": " (two underscores), as this is used exclusively by GraphQL’s introspection system."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "For example, a type "
                },
                {
                  "type": "InlineCode",
                  "code": "Person"
                },
                {
                  "type": "Text",
                  "value": " could be described as:"
                }
              ]
            },
            {
              "type": "Code",
              "raw": false,
              "lang": "graphql",
              "example": true,
              "counter": false,
              "code": "type Person {\n  name: String\n  age: Int\n  picture: Url\n}\n"
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Where "
                },
                {
                  "type": "InlineCode",
                  "code": "name"
                },
                {
                  "type": "Text",
                  "value": " is a field that will yield a "
                },
                {
                  "type": "NonTerminal",
                  "name": "String",
                  "params": null
                },
                {
                  "type": "Text",
                  "value": " value, and "
                },
                {
                  "type": "InlineCode",
                  "code": "age"
                },
                {
                  "type": "Text",
                  "value": " is a field that will yield an "
                },
                {
                  "type": "NonTerminal",
                  "name": "Int",
                  "params": null
                },
                {
                  "type": "Text",
                  "value": " value, and "
                },
                {
                  "type": "InlineCode",
                  "code": "picture"
                },
                {
                  "type": "Text",
                  "value": " is a field that will yield a "
                },
                {
                  "type": "InlineCode",
                  "code": "Url"
                },
                {
                  "type": "Text",
                  "value": " value."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "A query of an object value must select at least one field. This selection of fields will yield an ordered map containing exactly the subset of the object queried, which should be represented in the order in which they were queried. Only fields that are declared on the object type may validly be queried on that object."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "For example, selecting all the fields of "
                },
                {
                  "type": "InlineCode",
                  "code": "Person"
                },
                {
                  "type": "Text",
                  "value": ":"
                }
              ]
            },
            {
              "type": "Code",
              "raw": false,
              "lang": "graphql",
              "example": true,
              "counter": false,
              "code": "{\n  name\n  age\n  picture\n}\n"
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Would yield the object:"
                }
              ]
            },
            {
              "type": "Code",
              "raw": false,
              "lang": "json",
              "example": true,
              "counter": false,
              "code": "{\n  \"name\": \"Mark Zuckerberg\",\n  \"age\": 30,\n  \"picture\": \"http://some.cdn/picture.jpg\"\n}\n"
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "While selecting a subset of fields:"
                }
              ]
            },
            {
              "type": "Code",
              "raw": false,
              "lang": "graphql",
              "example": true,
              "counter": false,
              "code": "{\n  age\n  name\n}\n"
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Must only yield exactly that subset:"
                }
              ]
            },
            {
              "type": "Code",
              "raw": false,
              "lang": "json",
              "example": true,
              "counter": false,
              "code": "{\n  \"age\": 30,\n  \"name\": \"Mark Zuckerberg\"\n}\n"
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "A field of an Object type may be a Scalar, Enum, another Object type, an Interface, or a Union. Additionally, it may be any wrapping type whose underlying base type is one of those five."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "For example, the "
                },
                {
                  "type": "InlineCode",
                  "code": "Person"
                },
                {
                  "type": "Text",
                  "value": " type might include a "
                },
                {
                  "type": "InlineCode",
                  "code": "relationship"
                },
                {
                  "type": "Text",
                  "value": ":"
                }
              ]
            },
            {
              "type": "Code",
              "raw": false,
              "lang": "graphql",
              "example": true,
              "counter": false,
              "code": "type Person {\n  name: String\n  age: Int\n  picture: Url\n  relationship: Person\n}\n"
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Valid queries must supply a nested field set for a field that returns an object, so this query is not valid:"
                }
              ]
            },
            {
              "type": "Code",
              "raw": false,
              "lang": "graphql",
              "example": true,
              "counter": true,
              "code": "{\n  name\n  relationship\n}\n"
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "However, this example is valid:"
                }
              ]
            },
            {
              "type": "Code",
              "raw": false,
              "lang": "graphql",
              "example": true,
              "counter": false,
              "code": "{\n  name\n  relationship {\n    name\n  }\n}\n"
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "And will yield the subset of each object type queried:"
                }
              ]
            },
            {
              "type": "Code",
              "raw": false,
              "lang": "json",
              "example": true,
              "counter": false,
              "code": "{\n  \"name\": \"Mark Zuckerberg\",\n  \"relationship\": {\n    \"name\": \"Priscilla Chan\"\n  }\n}\n"
            },
            {
              "type": "Subsection",
              "header": {
                "type": "Subheader",
                "title": "Field Ordering"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "When querying an Object, the resulting mapping of fields are conceptually ordered in the same order in which they were encountered during query execution, excluding fragments for which the type does not apply and fields or fragments that are skipped via "
                    },
                    {
                      "type": "InlineCode",
                      "code": "@skip"
                    },
                    {
                      "type": "Text",
                      "value": " or "
                    },
                    {
                      "type": "InlineCode",
                      "code": "@include"
                    },
                    {
                      "type": "Text",
                      "value": " directives. This ordering is correctly produced when using the "
                    },
                    {
                      "type": "Call",
                      "name": "CollectFields",
                      "args": []
                    },
                    {
                      "type": "Text",
                      "value": " algorithm."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Response serialization formats capable of representing ordered maps should maintain this ordering. Serialization formats which can only represent unordered maps (such as JSON) should retain this order textually. That is, if two fields "
                    },
                    {
                      "type": "InlineCode",
                      "code": "{foo, bar}"
                    },
                    {
                      "type": "Text",
                      "value": " were queried in that order, the resulting JSON serialization should contain "
                    },
                    {
                      "type": "InlineCode",
                      "code": "{\"foo\": \"...\", \"bar\": \"...\"}"
                    },
                    {
                      "type": "Text",
                      "value": " in the same order."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Producing a response where fields are represented in the same order in which they appear in the request improves human readability during debugging and enables more efficient parsing of responses if the order of properties can be anticipated."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "If a fragment is spread before other fields, the fields that fragment specifies occur in the response before the following fields."
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": "graphql",
                  "example": true,
                  "counter": false,
                  "code": "{\n  foo\n  ...Frag\n  qux\n}\n\nfragment Frag on Query {\n  bar\n  baz\n}\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Produces the ordered result:"
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": "json",
                  "example": true,
                  "counter": false,
                  "code": "{\n  \"foo\": 1,\n  \"bar\": 2,\n  \"baz\": 3,\n  \"qux\": 4\n}\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "If a field is queried multiple times in a selection, it is ordered by the first time it is encountered. However fragments for which the type does not apply does not affect ordering."
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": "graphql",
                  "example": true,
                  "counter": false,
                  "code": "{\n  foo\n  ...Ignored\n  ...Matching\n  bar\n}\n\nfragment Ignored on UnknownType {\n  qux\n  baz\n}\n\nfragment Matching on Query {\n  bar\n  qux\n  foo\n}\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Produces the ordered result:"
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": "json",
                  "example": true,
                  "counter": false,
                  "code": "{\n  \"foo\": 1,\n  \"bar\": 2,\n  \"qux\": 3\n}\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Also, if directives result in fields being excluded, they are not considered in the ordering of fields."
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": "graphql",
                  "example": true,
                  "counter": false,
                  "code": "{\n  foo @skip(if: true)\n  bar\n  foo\n}\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Produces the ordered result:"
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": "json",
                  "example": true,
                  "counter": false,
                  "code": "{\n  \"bar\": 1,\n  \"foo\": 2\n}\n"
                }
              ]
            },
            {
              "type": "Subsection",
              "header": {
                "type": "Subheader",
                "title": "Result Coercion"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Determining the result of coercing an object is the heart of the GraphQL executor, so this is covered in that section of the spec."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Subsection",
              "header": {
                "type": "Subheader",
                "title": "Input Coercion"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Objects are never valid inputs."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Subsection",
              "header": {
                "type": "Subheader",
                "title": "Type Validation"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Object types have the potential to be invalid if incorrectly defined. This set of rules must be adhered to by every Object type in a GraphQL schema."
                    }
                  ]
                },
                {
                  "type": "List",
                  "ordered": true,
                  "items": [
                    {
                      "type": "ListItem",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "An Object type must define one or more fields."
                        }
                      ]
                    },
                    {
                      "type": "ListItem",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "For each field of an Object type:"
                        },
                        {
                          "type": "List",
                          "ordered": true,
                          "items": [
                            {
                              "type": "ListItem",
                              "contents": [
                                {
                                  "type": "Text",
                                  "value": "The field must have a unique name within that Object type; no two fields may share the same name."
                                }
                              ]
                            },
                            {
                              "type": "ListItem",
                              "contents": [
                                {
                                  "type": "Text",
                                  "value": "The field must not have a name which begins with the characters "
                                },
                                {
                                  "type": "StringLiteral",
                                  "value": "\"__\""
                                },
                                {
                                  "type": "Text",
                                  "value": " (two underscores)."
                                }
                              ]
                            },
                            {
                              "type": "ListItem",
                              "contents": [
                                {
                                  "type": "Text",
                                  "value": "The field must return a type where "
                                },
                                {
                                  "type": "Call",
                                  "name": "IsOutputType",
                                  "args": [
                                    {
                                      "type": "Variable",
                                      "name": "fieldType"
                                    }
                                  ]
                                },
                                {
                                  "type": "Text",
                                  "value": " returns "
                                },
                                {
                                  "type": "Keyword",
                                  "value": "true"
                                },
                                {
                                  "type": "Text",
                                  "value": "."
                                }
                              ]
                            },
                            {
                              "type": "ListItem",
                              "contents": [
                                {
                                  "type": "Text",
                                  "value": "For each argument of the field:"
                                },
                                {
                                  "type": "List",
                                  "ordered": true,
                                  "items": [
                                    {
                                      "type": "ListItem",
                                      "contents": [
                                        {
                                          "type": "Text",
                                          "value": "The argument must not have a name which begins with the characters "
                                        },
                                        {
                                          "type": "StringLiteral",
                                          "value": "\"__\""
                                        },
                                        {
                                          "type": "Text",
                                          "value": " (two underscores)."
                                        }
                                      ]
                                    },
                                    {
                                      "type": "ListItem",
                                      "contents": [
                                        {
                                          "type": "Text",
                                          "value": "The argument must accept a type where "
                                        },
                                        {
                                          "type": "Call",
                                          "name": "IsInputType",
                                          "args": [
                                            {
                                              "type": "Variable",
                                              "name": "argumentType"
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Text",
                                          "value": " returns "
                                        },
                                        {
                                          "type": "Keyword",
                                          "value": "true"
                                        },
                                        {
                                          "type": "Text",
                                          "value": "."
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "ListItem",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "An object type may declare that it implements one or more unique interfaces."
                        }
                      ]
                    },
                    {
                      "type": "ListItem",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "An object type must be a super-set of all interfaces it implements:"
                        },
                        {
                          "type": "List",
                          "ordered": true,
                          "items": [
                            {
                              "type": "ListItem",
                              "contents": [
                                {
                                  "type": "Text",
                                  "value": "Let this object type be "
                                },
                                {
                                  "type": "Variable",
                                  "name": "objectType"
                                },
                                {
                                  "type": "Text",
                                  "value": "."
                                }
                              ]
                            },
                            {
                              "type": "ListItem",
                              "contents": [
                                {
                                  "type": "Text",
                                  "value": "For each interface declared implemented as "
                                },
                                {
                                  "type": "Variable",
                                  "name": "interfaceType"
                                },
                                {
                                  "type": "Text",
                                  "value": ", "
                                },
                                {
                                  "type": "Call",
                                  "name": "IsValidImplementation",
                                  "args": [
                                    {
                                      "type": "Variable",
                                      "name": "objectType"
                                    },
                                    {
                                      "type": "Variable",
                                      "name": "interfaceType"
                                    }
                                  ]
                                },
                                {
                                  "type": "Text",
                                  "value": " must be "
                                },
                                {
                                  "type": "Keyword",
                                  "value": "true"
                                },
                                {
                                  "type": "Text",
                                  "value": "."
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "Algorithm",
                  "call": {
                    "type": "Call",
                    "name": "IsValidImplementation",
                    "args": [
                      {
                        "type": "Variable",
                        "name": "type"
                      },
                      {
                        "type": "Variable",
                        "name": "implementedType"
                      }
                    ]
                  },
                  "steps": {
                    "type": "List",
                    "ordered": true,
                    "items": [
                      {
                        "type": "ListItem",
                        "contents": [
                          {
                            "type": "Text",
                            "value": "If "
                          },
                          {
                            "type": "Variable",
                            "name": "implementedType"
                          },
                          {
                            "type": "Text",
                            "value": " declares it implements any interfaces, "
                          },
                          {
                            "type": "Variable",
                            "name": "type"
                          },
                          {
                            "type": "Text",
                            "value": " must also declare it implements those interfaces."
                          }
                        ]
                      },
                      {
                        "type": "ListItem",
                        "contents": [
                          {
                            "type": "Variable",
                            "name": "type"
                          },
                          {
                            "type": "Text",
                            "value": " must include a field of the same name for every field defined in "
                          },
                          {
                            "type": "Variable",
                            "name": "implementedType"
                          },
                          {
                            "type": "Text",
                            "value": "."
                          },
                          {
                            "type": "List",
                            "ordered": true,
                            "items": [
                              {
                                "type": "ListItem",
                                "contents": [
                                  {
                                    "type": "Text",
                                    "value": "Let "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "field"
                                  },
                                  {
                                    "type": "Text",
                                    "value": " be that named field on "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "type"
                                  },
                                  {
                                    "type": "Text",
                                    "value": "."
                                  }
                                ]
                              },
                              {
                                "type": "ListItem",
                                "contents": [
                                  {
                                    "type": "Text",
                                    "value": "Let "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "implementedField"
                                  },
                                  {
                                    "type": "Text",
                                    "value": " be that named field on "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "implementedType"
                                  },
                                  {
                                    "type": "Text",
                                    "value": "."
                                  }
                                ]
                              },
                              {
                                "type": "ListItem",
                                "contents": [
                                  {
                                    "type": "Variable",
                                    "name": "field"
                                  },
                                  {
                                    "type": "Text",
                                    "value": " must include an argument of the same name for every argument defined in "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "implementedField"
                                  },
                                  {
                                    "type": "Text",
                                    "value": "."
                                  },
                                  {
                                    "type": "List",
                                    "ordered": true,
                                    "items": [
                                      {
                                        "type": "ListItem",
                                        "contents": [
                                          {
                                            "type": "Text",
                                            "value": "That named argument on "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "field"
                                          },
                                          {
                                            "type": "Text",
                                            "value": " must accept the same type (invariant) as that named argument on "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "implementedField"
                                          },
                                          {
                                            "type": "Text",
                                            "value": "."
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "type": "ListItem",
                                "contents": [
                                  {
                                    "type": "Variable",
                                    "name": "field"
                                  },
                                  {
                                    "type": "Text",
                                    "value": " may include additional arguments not defined in "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "implementedField"
                                  },
                                  {
                                    "type": "Text",
                                    "value": ", but any additional argument must not be required, e.g. must not be of a non-nullable type."
                                  }
                                ]
                              },
                              {
                                "type": "ListItem",
                                "contents": [
                                  {
                                    "type": "Variable",
                                    "name": "field"
                                  },
                                  {
                                    "type": "Text",
                                    "value": " must return a type which is equal to or a sub-type of (covariant) the return type of "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "implementedField"
                                  },
                                  {
                                    "type": "Text",
                                    "value": " field’s return type:"
                                  },
                                  {
                                    "type": "List",
                                    "ordered": true,
                                    "items": [
                                      {
                                        "type": "ListItem",
                                        "contents": [
                                          {
                                            "type": "Text",
                                            "value": "Let "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "fieldType"
                                          },
                                          {
                                            "type": "Text",
                                            "value": " be the return type of "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "field"
                                          },
                                          {
                                            "type": "Text",
                                            "value": "."
                                          }
                                        ]
                                      },
                                      {
                                        "type": "ListItem",
                                        "contents": [
                                          {
                                            "type": "Text",
                                            "value": "Let "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "implementedFieldType"
                                          },
                                          {
                                            "type": "Text",
                                            "value": " be the return type of "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "implementedField"
                                          },
                                          {
                                            "type": "Text",
                                            "value": "."
                                          }
                                        ]
                                      },
                                      {
                                        "type": "ListItem",
                                        "contents": [
                                          {
                                            "type": "Call",
                                            "name": "IsValidImplementationFieldType",
                                            "args": [
                                              {
                                                "type": "Variable",
                                                "name": "fieldType"
                                              },
                                              {
                                                "type": "Variable",
                                                "name": "implementedFieldType"
                                              }
                                            ]
                                          },
                                          {
                                            "type": "Text",
                                            "value": " must be "
                                          },
                                          {
                                            "type": "Keyword",
                                            "value": "true"
                                          },
                                          {
                                            "type": "Text",
                                            "value": "."
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "type": "Algorithm",
                  "call": {
                    "type": "Call",
                    "name": "IsValidImplementationFieldType",
                    "args": [
                      {
                        "type": "Variable",
                        "name": "fieldType"
                      },
                      {
                        "type": "Variable",
                        "name": "implementedFieldType"
                      }
                    ]
                  },
                  "steps": {
                    "type": "List",
                    "ordered": true,
                    "items": [
                      {
                        "type": "ListItem",
                        "contents": [
                          {
                            "type": "Text",
                            "value": "If "
                          },
                          {
                            "type": "Variable",
                            "name": "fieldType"
                          },
                          {
                            "type": "Text",
                            "value": " is a Non-Null type:"
                          },
                          {
                            "type": "List",
                            "ordered": true,
                            "items": [
                              {
                                "type": "ListItem",
                                "contents": [
                                  {
                                    "type": "Text",
                                    "value": "Let "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "nullableType"
                                  },
                                  {
                                    "type": "Text",
                                    "value": " be the unwrapped nullable type of "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "fieldType"
                                  },
                                  {
                                    "type": "Text",
                                    "value": "."
                                  }
                                ]
                              },
                              {
                                "type": "ListItem",
                                "contents": [
                                  {
                                    "type": "Text",
                                    "value": "Let "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "implementedNullableType"
                                  },
                                  {
                                    "type": "Text",
                                    "value": " be the unwrapped nullable type of "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "implementedFieldType"
                                  },
                                  {
                                    "type": "Text",
                                    "value": " if it is a Non-Null type, otherwise let it be "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "implementedFieldType"
                                  },
                                  {
                                    "type": "Text",
                                    "value": " directly."
                                  }
                                ]
                              },
                              {
                                "type": "ListItem",
                                "contents": [
                                  {
                                    "type": "Text",
                                    "value": "Return "
                                  },
                                  {
                                    "type": "Call",
                                    "name": "IsValidImplementationFieldType",
                                    "args": [
                                      {
                                        "type": "Variable",
                                        "name": "nullableType"
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "implementedNullableType"
                                      }
                                    ]
                                  },
                                  {
                                    "type": "Text",
                                    "value": "."
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "type": "ListItem",
                        "contents": [
                          {
                            "type": "Text",
                            "value": "If "
                          },
                          {
                            "type": "Variable",
                            "name": "fieldType"
                          },
                          {
                            "type": "Text",
                            "value": " is a List type and "
                          },
                          {
                            "type": "Variable",
                            "name": "implementedFieldType"
                          },
                          {
                            "type": "Text",
                            "value": " is also a List type:"
                          },
                          {
                            "type": "List",
                            "ordered": true,
                            "items": [
                              {
                                "type": "ListItem",
                                "contents": [
                                  {
                                    "type": "Text",
                                    "value": "Let "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "itemType"
                                  },
                                  {
                                    "type": "Text",
                                    "value": " be the unwrapped item type of "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "fieldType"
                                  },
                                  {
                                    "type": "Text",
                                    "value": "."
                                  }
                                ]
                              },
                              {
                                "type": "ListItem",
                                "contents": [
                                  {
                                    "type": "Text",
                                    "value": "Let "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "implementedItemType"
                                  },
                                  {
                                    "type": "Text",
                                    "value": " be the unwrapped item type of "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "implementedFieldType"
                                  },
                                  {
                                    "type": "Text",
                                    "value": "."
                                  }
                                ]
                              },
                              {
                                "type": "ListItem",
                                "contents": [
                                  {
                                    "type": "Text",
                                    "value": "Return "
                                  },
                                  {
                                    "type": "Call",
                                    "name": "IsValidImplementationFieldType",
                                    "args": [
                                      {
                                        "type": "Variable",
                                        "name": "itemType"
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "implementedItemType"
                                      }
                                    ]
                                  },
                                  {
                                    "type": "Text",
                                    "value": "."
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "type": "ListItem",
                        "contents": [
                          {
                            "type": "Text",
                            "value": "If "
                          },
                          {
                            "type": "Variable",
                            "name": "fieldType"
                          },
                          {
                            "type": "Text",
                            "value": " is the same type as "
                          },
                          {
                            "type": "Variable",
                            "name": "implementedFieldType"
                          },
                          {
                            "type": "Text",
                            "value": " then return "
                          },
                          {
                            "type": "Keyword",
                            "value": "true"
                          },
                          {
                            "type": "Text",
                            "value": "."
                          }
                        ]
                      },
                      {
                        "type": "ListItem",
                        "contents": [
                          {
                            "type": "Text",
                            "value": "If "
                          },
                          {
                            "type": "Variable",
                            "name": "fieldType"
                          },
                          {
                            "type": "Text",
                            "value": " is an Object type and "
                          },
                          {
                            "type": "Variable",
                            "name": "implementedFieldType"
                          },
                          {
                            "type": "Text",
                            "value": " is a Union type and "
                          },
                          {
                            "type": "Variable",
                            "name": "fieldType"
                          },
                          {
                            "type": "Text",
                            "value": " is a possible type of "
                          },
                          {
                            "type": "Variable",
                            "name": "implementedFieldType"
                          },
                          {
                            "type": "Text",
                            "value": " then return "
                          },
                          {
                            "type": "Keyword",
                            "value": "true"
                          },
                          {
                            "type": "Text",
                            "value": "."
                          }
                        ]
                      },
                      {
                        "type": "ListItem",
                        "contents": [
                          {
                            "type": "Text",
                            "value": "If "
                          },
                          {
                            "type": "Variable",
                            "name": "fieldType"
                          },
                          {
                            "type": "Text",
                            "value": " is an Object or Interface type and "
                          },
                          {
                            "type": "Variable",
                            "name": "implementedFieldType"
                          },
                          {
                            "type": "Text",
                            "value": " is an Interface type and "
                          },
                          {
                            "type": "Variable",
                            "name": "fieldType"
                          },
                          {
                            "type": "Text",
                            "value": " declares it implements "
                          },
                          {
                            "type": "Variable",
                            "name": "implementedFieldType"
                          },
                          {
                            "type": "Text",
                            "value": " then return "
                          },
                          {
                            "type": "Keyword",
                            "value": "true"
                          },
                          {
                            "type": "Text",
                            "value": "."
                          }
                        ]
                      },
                      {
                        "type": "ListItem",
                        "contents": [
                          {
                            "type": "Text",
                            "value": "Otherwise return "
                          },
                          {
                            "type": "Keyword",
                            "value": "false"
                          },
                          {
                            "type": "Text",
                            "value": "."
                          }
                        ]
                      }
                    ]
                  }
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Field Arguments"
              },
              "contents": [
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "ArgumentsDefinition",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Terminal",
                        "value": "("
                      },
                      {
                        "type": "Quantified",
                        "token": {
                          "type": "NonTerminal",
                          "name": "InputValueDefinition",
                          "params": null
                        },
                        "isList": true,
                        "isOptional": false
                      },
                      {
                        "type": "Terminal",
                        "value": ")"
                      }
                    ]
                  }
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "InputValueDefinition",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Quantified",
                        "token": {
                          "type": "NonTerminal",
                          "name": "Description",
                          "params": null
                        },
                        "isList": false,
                        "isOptional": true
                      },
                      {
                        "type": "NonTerminal",
                        "name": "Name",
                        "params": null
                      },
                      {
                        "type": "Terminal",
                        "value": ":"
                      },
                      {
                        "type": "NonTerminal",
                        "name": "Type",
                        "params": null
                      },
                      {
                        "type": "Quantified",
                        "token": {
                          "type": "NonTerminal",
                          "name": "DefaultValue",
                          "params": null
                        },
                        "isList": false,
                        "isOptional": true
                      },
                      {
                        "type": "Quantified",
                        "token": {
                          "type": "NonTerminal",
                          "name": "Directives",
                          "params": [
                            {
                              "type": "NonTerminalParam",
                              "conditional": false,
                              "negated": false,
                              "name": "Const"
                            }
                          ]
                        },
                        "isList": false,
                        "isOptional": true
                      }
                    ]
                  }
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Object fields are conceptually functions which yield values. Occasionally object fields can accept arguments to further specify the return value. Object field arguments are defined as a list of all possible argument names and their expected input types."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "All arguments defined within a field must not have a name which begins with "
                    },
                    {
                      "type": "StringLiteral",
                      "value": "\"__\""
                    },
                    {
                      "type": "Text",
                      "value": " (two underscores), as this is used exclusively by GraphQL’s introspection system."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "For example, a "
                    },
                    {
                      "type": "InlineCode",
                      "code": "Person"
                    },
                    {
                      "type": "Text",
                      "value": " type with a "
                    },
                    {
                      "type": "InlineCode",
                      "code": "picture"
                    },
                    {
                      "type": "Text",
                      "value": " field could accept an argument to determine what size of an image to return."
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": "graphql",
                  "example": true,
                  "counter": false,
                  "code": "type Person {\n  name: String\n  picture(size: Int): Url\n}\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "GraphQL queries can optionally specify arguments to their fields to provide these arguments."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "This example query:"
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": "graphql",
                  "example": true,
                  "counter": false,
                  "code": "{\n  name\n  picture(size: 600)\n}\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "May yield the result:"
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": "json",
                  "example": true,
                  "counter": false,
                  "code": "{\n  \"name\": \"Mark Zuckerberg\",\n  \"picture\": \"http://some.cdn/picture_600.jpg\"\n}\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "The type of an object field argument must be an input type (any type except an Object, Interface, or Union type)."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Field Deprecation"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Fields in an object may be marked as deprecated as deemed necessary by the application. It is still legal to query for these fields (to ensure existing clients are not broken by the change), but the fields should be appropriately treated in documentation and tooling."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "When using the type system definition language, "
                    },
                    {
                      "type": "InlineCode",
                      "code": "@deprecated"
                    },
                    {
                      "type": "Text",
                      "value": " directives are used to indicate that a field is deprecated:"
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": "graphql",
                  "example": true,
                  "counter": false,
                  "code": "type ExampleType {\n  oldField: String @deprecated\n}\n"
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Object Extensions"
              },
              "contents": [
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "ObjectTypeExtension",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "ListRHS",
                    "defs": [
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "Terminal",
                            "value": "extend"
                          },
                          {
                            "type": "Terminal",
                            "value": "type"
                          },
                          {
                            "type": "NonTerminal",
                            "name": "Name",
                            "params": null
                          },
                          {
                            "type": "Quantified",
                            "token": {
                              "type": "NonTerminal",
                              "name": "ImplementsInterfaces",
                              "params": null
                            },
                            "isList": false,
                            "isOptional": true
                          },
                          {
                            "type": "Quantified",
                            "token": {
                              "type": "NonTerminal",
                              "name": "Directives",
                              "params": [
                                {
                                  "type": "NonTerminalParam",
                                  "conditional": false,
                                  "negated": false,
                                  "name": "Const"
                                }
                              ]
                            },
                            "isList": false,
                            "isOptional": true
                          },
                          {
                            "type": "NonTerminal",
                            "name": "FieldsDefinition",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "Terminal",
                            "value": "extend"
                          },
                          {
                            "type": "Terminal",
                            "value": "type"
                          },
                          {
                            "type": "NonTerminal",
                            "name": "Name",
                            "params": null
                          },
                          {
                            "type": "Quantified",
                            "token": {
                              "type": "NonTerminal",
                              "name": "ImplementsInterfaces",
                              "params": null
                            },
                            "isList": false,
                            "isOptional": true
                          },
                          {
                            "type": "NonTerminal",
                            "name": "Directives",
                            "params": [
                              {
                                "type": "NonTerminalParam",
                                "conditional": false,
                                "negated": false,
                                "name": "Const"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "Terminal",
                            "value": "extend"
                          },
                          {
                            "type": "Terminal",
                            "value": "type"
                          },
                          {
                            "type": "NonTerminal",
                            "name": "Name",
                            "params": null
                          },
                          {
                            "type": "NonTerminal",
                            "name": "ImplementsInterfaces",
                            "params": null
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Object type extensions are used to represent a type which has been extended from some original type. For example, this might be used to represent local data, or by a GraphQL service which is itself an extension of another GraphQL service."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "In this example, a local data field is added to a "
                    },
                    {
                      "type": "InlineCode",
                      "code": "Story"
                    },
                    {
                      "type": "Text",
                      "value": " type:"
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": "graphql",
                  "example": true,
                  "counter": false,
                  "code": "extend type Story {\n  isHiddenLocally: Boolean\n}\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Object type extensions may choose not to add additional fields, instead only adding interfaces or directives."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "In this example, a directive is added to a "
                    },
                    {
                      "type": "InlineCode",
                      "code": "User"
                    },
                    {
                      "type": "Text",
                      "value": " type without adding fields:"
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": "graphql",
                  "example": true,
                  "counter": false,
                  "code": "extend type User @addedDirective\n"
                },
                {
                  "type": "Subsection",
                  "header": {
                    "type": "Subheader",
                    "title": "Type Validation"
                  },
                  "contents": [
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Object type extensions have the potential to be invalid if incorrectly defined."
                        }
                      ]
                    },
                    {
                      "type": "List",
                      "ordered": true,
                      "items": [
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "The named type must already be defined and must be an Object type."
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "The fields of an Object type extension must have unique names; no two fields may share the same name."
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "Any fields of an Object type extension must not be already defined on the original Object type."
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "Any non-repeatable directives provided must not already apply to the original Object type."
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "Any interfaces provided must not be already implemented by the original Object type."
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "The resulting extended object type must be a super-set of all interfaces it implements."
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Interfaces"
          },
          "contents": [
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "InterfaceTypeDefinition",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "Description",
                      "params": null
                    },
                    "isList": false,
                    "isOptional": true
                  },
                  {
                    "type": "Terminal",
                    "value": "interface"
                  },
                  {
                    "type": "NonTerminal",
                    "name": "Name",
                    "params": null
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "ImplementsInterfaces",
                      "params": null
                    },
                    "isList": false,
                    "isOptional": true
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "Directives",
                      "params": [
                        {
                          "type": "NonTerminalParam",
                          "conditional": false,
                          "negated": false,
                          "name": "Const"
                        }
                      ]
                    },
                    "isList": false,
                    "isOptional": true
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "FieldsDefinition",
                      "params": null
                    },
                    "isList": false,
                    "isOptional": true
                  }
                ]
              }
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "GraphQL interfaces represent a list of named fields and their arguments. GraphQL objects and interfaces can then implement these interfaces which requires that the implementing type will define all fields defined by those interfaces."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Fields on a GraphQL interface have the same rules as fields on a GraphQL object; their type can be Scalar, Object, Enum, Interface, or Union, or any wrapping type whose base type is one of those five."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "For example, an interface "
                },
                {
                  "type": "InlineCode",
                  "code": "NamedEntity"
                },
                {
                  "type": "Text",
                  "value": " may describe a required field and types such as "
                },
                {
                  "type": "InlineCode",
                  "code": "Person"
                },
                {
                  "type": "Text",
                  "value": " or "
                },
                {
                  "type": "InlineCode",
                  "code": "Business"
                },
                {
                  "type": "Text",
                  "value": " may then implement this interface to guarantee this field will always exist."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Types may also implement multiple interfaces. For example, "
                },
                {
                  "type": "InlineCode",
                  "code": "Business"
                },
                {
                  "type": "Text",
                  "value": " implements both the "
                },
                {
                  "type": "InlineCode",
                  "code": "NamedEntity"
                },
                {
                  "type": "Text",
                  "value": " and "
                },
                {
                  "type": "InlineCode",
                  "code": "ValuedEntity"
                },
                {
                  "type": "Text",
                  "value": " interfaces in the example below."
                }
              ]
            },
            {
              "type": "Code",
              "raw": false,
              "lang": "graphql",
              "example": true,
              "counter": false,
              "code": "interface NamedEntity {\n  name: String\n}\n\ninterface ValuedEntity {\n  value: Int\n}\n\ntype Person implements NamedEntity {\n  name: String\n  age: Int\n}\n\ntype Business implements NamedEntity & ValuedEntity {\n  name: String\n  value: Int\n  employeeCount: Int\n}\n"
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Fields which yield an interface are useful when one of many Object types are expected, but some fields should be guaranteed."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "To continue the example, a "
                },
                {
                  "type": "InlineCode",
                  "code": "Contact"
                },
                {
                  "type": "Text",
                  "value": " might refer to "
                },
                {
                  "type": "InlineCode",
                  "code": "NamedEntity"
                },
                {
                  "type": "Text",
                  "value": "."
                }
              ]
            },
            {
              "type": "Code",
              "raw": false,
              "lang": "graphql",
              "example": true,
              "counter": false,
              "code": "type Contact {\n  entity: NamedEntity\n  phoneNumber: String\n  address: String\n}\n"
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "This allows us to write a query for a "
                },
                {
                  "type": "InlineCode",
                  "code": "Contact"
                },
                {
                  "type": "Text",
                  "value": " that can select the common fields."
                }
              ]
            },
            {
              "type": "Code",
              "raw": false,
              "lang": "graphql",
              "example": true,
              "counter": false,
              "code": "{\n  entity {\n    name\n  }\n  phoneNumber\n}\n"
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "When querying for fields on an interface type, only those fields declared on the interface may be queried. In the above example, "
                },
                {
                  "type": "InlineCode",
                  "code": "entity"
                },
                {
                  "type": "Text",
                  "value": " returns a "
                },
                {
                  "type": "InlineCode",
                  "code": "NamedEntity"
                },
                {
                  "type": "Text",
                  "value": ", and "
                },
                {
                  "type": "InlineCode",
                  "code": "name"
                },
                {
                  "type": "Text",
                  "value": " is defined on "
                },
                {
                  "type": "InlineCode",
                  "code": "NamedEntity"
                },
                {
                  "type": "Text",
                  "value": ", so it is valid. However, the following would not be a valid query:"
                }
              ]
            },
            {
              "type": "Code",
              "raw": false,
              "lang": "graphql",
              "example": true,
              "counter": true,
              "code": "{\n  entity {\n    name\n    age\n  }\n  phoneNumber\n}\n"
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "because "
                },
                {
                  "type": "InlineCode",
                  "code": "entity"
                },
                {
                  "type": "Text",
                  "value": " refers to a "
                },
                {
                  "type": "InlineCode",
                  "code": "NamedEntity"
                },
                {
                  "type": "Text",
                  "value": ", and "
                },
                {
                  "type": "InlineCode",
                  "code": "age"
                },
                {
                  "type": "Text",
                  "value": " is not defined on that interface. Querying for "
                },
                {
                  "type": "InlineCode",
                  "code": "age"
                },
                {
                  "type": "Text",
                  "value": " is only valid when the result of "
                },
                {
                  "type": "InlineCode",
                  "code": "entity"
                },
                {
                  "type": "Text",
                  "value": " is a "
                },
                {
                  "type": "InlineCode",
                  "code": "Person"
                },
                {
                  "type": "Text",
                  "value": "; the query can express this using a fragment or an inline fragment:"
                }
              ]
            },
            {
              "type": "Code",
              "raw": false,
              "lang": "graphql",
              "example": true,
              "counter": false,
              "code": "{\n  entity {\n    name\n    ... on Person {\n      age\n    }\n  },\n  phoneNumber\n}\n"
            },
            {
              "type": "Subsection",
              "header": {
                "type": "Subheader",
                "title": "Interfaces Implementing Interfaces"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "When defining an interface that implements another interface, the implementing interface must define each field that is specified by the implemented interface. For example, the interface Resource must define the field id to implement the Node interface:"
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": "graphql",
                  "example": true,
                  "counter": false,
                  "code": "interface Node {\n  id: ID!\n}\n\ninterface Resource implements Node {\n  id: ID!\n  url: String\n}\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Transitively implemented interfaces (interfaces implemented by the interface that is being implemented) must also be defined on an implementing type or interface. For example, "
                    },
                    {
                      "type": "InlineCode",
                      "code": "Image"
                    },
                    {
                      "type": "Text",
                      "value": " cannot implement "
                    },
                    {
                      "type": "InlineCode",
                      "code": "Resource"
                    },
                    {
                      "type": "Text",
                      "value": " without also implementing "
                    },
                    {
                      "type": "InlineCode",
                      "code": "Node"
                    },
                    {
                      "type": "Text",
                      "value": ":"
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": "graphql",
                  "example": true,
                  "counter": false,
                  "code": "interface Node {\n  id: ID!\n}\n\ninterface Resource implements Node {\n  id: ID!\n  url: String\n}\n\ninterface Image implements Resource & Node {\n  id: ID!\n  url: String\n  thumbnail: String\n}\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Interface definitions must not contain cyclic references nor implement themselves. This example is invalid because "
                    },
                    {
                      "type": "InlineCode",
                      "code": "Node"
                    },
                    {
                      "type": "Text",
                      "value": " and "
                    },
                    {
                      "type": "InlineCode",
                      "code": "Named"
                    },
                    {
                      "type": "Text",
                      "value": " implement themselves and each other:"
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": "graphgl",
                  "example": true,
                  "counter": true,
                  "code": "interface Node implements Named & Node {\n  id: ID!\n  name: String\n}\n\ninterface Named implements Node & Named {\n  id: ID!\n  name: String\n}\n"
                }
              ]
            },
            {
              "type": "Subsection",
              "header": {
                "type": "Subheader",
                "title": "Result Coercion"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "The interface type should have some way of determining which object a given result corresponds to. Once it has done so, the result coercion of the interface is the same as the result coercion of the object."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Subsection",
              "header": {
                "type": "Subheader",
                "title": "Input Coercion"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Interfaces are never valid inputs."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Subsection",
              "header": {
                "type": "Subheader",
                "title": "Type Validation"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Interface types have the potential to be invalid if incorrectly defined."
                    }
                  ]
                },
                {
                  "type": "List",
                  "ordered": true,
                  "items": [
                    {
                      "type": "ListItem",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "An Interface type must define one or more fields."
                        }
                      ]
                    },
                    {
                      "type": "ListItem",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "For each field of an Interface type:"
                        },
                        {
                          "type": "List",
                          "ordered": true,
                          "items": [
                            {
                              "type": "ListItem",
                              "contents": [
                                {
                                  "type": "Text",
                                  "value": "The field must have a unique name within that Interface type; no two fields may share the same name."
                                }
                              ]
                            },
                            {
                              "type": "ListItem",
                              "contents": [
                                {
                                  "type": "Text",
                                  "value": "The field must not have a name which begins with the characters "
                                },
                                {
                                  "type": "StringLiteral",
                                  "value": "\"__\""
                                },
                                {
                                  "type": "Text",
                                  "value": " (two underscores)."
                                }
                              ]
                            },
                            {
                              "type": "ListItem",
                              "contents": [
                                {
                                  "type": "Text",
                                  "value": "The field must return a type where "
                                },
                                {
                                  "type": "Call",
                                  "name": "IsOutputType",
                                  "args": [
                                    {
                                      "type": "Variable",
                                      "name": "fieldType"
                                    }
                                  ]
                                },
                                {
                                  "type": "Text",
                                  "value": " returns "
                                },
                                {
                                  "type": "Keyword",
                                  "value": "true"
                                },
                                {
                                  "type": "Text",
                                  "value": "."
                                }
                              ]
                            },
                            {
                              "type": "ListItem",
                              "contents": [
                                {
                                  "type": "Text",
                                  "value": "For each argument of the field:"
                                },
                                {
                                  "type": "List",
                                  "ordered": true,
                                  "items": [
                                    {
                                      "type": "ListItem",
                                      "contents": [
                                        {
                                          "type": "Text",
                                          "value": "The argument must not have a name which begins with the characters "
                                        },
                                        {
                                          "type": "StringLiteral",
                                          "value": "\"__\""
                                        },
                                        {
                                          "type": "Text",
                                          "value": " (two underscores)."
                                        }
                                      ]
                                    },
                                    {
                                      "type": "ListItem",
                                      "contents": [
                                        {
                                          "type": "Text",
                                          "value": "The argument must accept a type where "
                                        },
                                        {
                                          "type": "Call",
                                          "name": "IsInputType",
                                          "args": [
                                            {
                                              "type": "Variable",
                                              "name": "argumentType"
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Text",
                                          "value": " returns "
                                        },
                                        {
                                          "type": "Keyword",
                                          "value": "true"
                                        },
                                        {
                                          "type": "Text",
                                          "value": "."
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "ListItem",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "An interface type may declare that it implements one or more unique interfaces, but may not implement itself."
                        }
                      ]
                    },
                    {
                      "type": "ListItem",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "An interface type must be a super-set of all interfaces it implements:"
                        },
                        {
                          "type": "List",
                          "ordered": true,
                          "items": [
                            {
                              "type": "ListItem",
                              "contents": [
                                {
                                  "type": "Text",
                                  "value": "Let this interface type be "
                                },
                                {
                                  "type": "Variable",
                                  "name": "implementingType"
                                },
                                {
                                  "type": "Text",
                                  "value": "."
                                }
                              ]
                            },
                            {
                              "type": "ListItem",
                              "contents": [
                                {
                                  "type": "Text",
                                  "value": "For each interface declared implemented as "
                                },
                                {
                                  "type": "Variable",
                                  "name": "implementedType"
                                },
                                {
                                  "type": "Text",
                                  "value": ", "
                                },
                                {
                                  "type": "Call",
                                  "name": "IsValidImplementation",
                                  "args": [
                                    {
                                      "type": "Variable",
                                      "name": "implementingType"
                                    },
                                    {
                                      "type": "Variable",
                                      "name": "implementedType"
                                    }
                                  ]
                                },
                                {
                                  "type": "Text",
                                  "value": " must be "
                                },
                                {
                                  "type": "Keyword",
                                  "value": "true"
                                },
                                {
                                  "type": "Text",
                                  "value": "."
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Interface Extensions"
              },
              "contents": [
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "InterfaceTypeExtension",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "ListRHS",
                    "defs": [
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "Terminal",
                            "value": "extend"
                          },
                          {
                            "type": "Terminal",
                            "value": "interface"
                          },
                          {
                            "type": "NonTerminal",
                            "name": "Name",
                            "params": null
                          },
                          {
                            "type": "Quantified",
                            "token": {
                              "type": "NonTerminal",
                              "name": "ImplementsInterfaces",
                              "params": null
                            },
                            "isList": false,
                            "isOptional": true
                          },
                          {
                            "type": "Quantified",
                            "token": {
                              "type": "NonTerminal",
                              "name": "Directives",
                              "params": [
                                {
                                  "type": "NonTerminalParam",
                                  "conditional": false,
                                  "negated": false,
                                  "name": "Const"
                                }
                              ]
                            },
                            "isList": false,
                            "isOptional": true
                          },
                          {
                            "type": "NonTerminal",
                            "name": "FieldsDefinition",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "Terminal",
                            "value": "extend"
                          },
                          {
                            "type": "Terminal",
                            "value": "interface"
                          },
                          {
                            "type": "NonTerminal",
                            "name": "Name",
                            "params": null
                          },
                          {
                            "type": "Quantified",
                            "token": {
                              "type": "NonTerminal",
                              "name": "ImplementsInterfaces",
                              "params": null
                            },
                            "isList": false,
                            "isOptional": true
                          },
                          {
                            "type": "NonTerminal",
                            "name": "Directives",
                            "params": [
                              {
                                "type": "NonTerminalParam",
                                "conditional": false,
                                "negated": false,
                                "name": "Const"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "Terminal",
                            "value": "extend"
                          },
                          {
                            "type": "Terminal",
                            "value": "interface"
                          },
                          {
                            "type": "NonTerminal",
                            "name": "Name",
                            "params": null
                          },
                          {
                            "type": "NonTerminal",
                            "name": "ImplementsInterfaces",
                            "params": null
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Interface type extensions are used to represent an interface which has been extended from some original interface. For example, this might be used to represent common local data on many types, or by a GraphQL service which is itself an extension of another GraphQL service."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "In this example, an extended data field is added to a "
                    },
                    {
                      "type": "InlineCode",
                      "code": "NamedEntity"
                    },
                    {
                      "type": "Text",
                      "value": " type along with the types which implement it:"
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": "graphql",
                  "example": true,
                  "counter": false,
                  "code": "extend interface NamedEntity {\n  nickname: String\n}\n\nextend type Person {\n  nickname: String\n}\n\nextend type Business {\n  nickname: String\n}\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Interface type extensions may choose not to add additional fields, instead only adding directives."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "In this example, a directive is added to a "
                    },
                    {
                      "type": "InlineCode",
                      "code": "NamedEntity"
                    },
                    {
                      "type": "Text",
                      "value": " type without adding fields:"
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": "graphql",
                  "example": true,
                  "counter": false,
                  "code": "extend interface NamedEntity @addedDirective\n"
                },
                {
                  "type": "Subsection",
                  "header": {
                    "type": "Subheader",
                    "title": "Type Validation"
                  },
                  "contents": [
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Interface type extensions have the potential to be invalid if incorrectly defined."
                        }
                      ]
                    },
                    {
                      "type": "List",
                      "ordered": true,
                      "items": [
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "The named type must already be defined and must be an Interface type."
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "The fields of an Interface type extension must have unique names; no two fields may share the same name."
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "Any fields of an Interface type extension must not be already defined on the original Interface type."
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "Any Object or Interface type which implemented the original Interface type must also be a super-set of the fields of the Interface type extension (which may be due to Object type extension)."
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "Any non-repeatable directives provided must not already apply to the original Interface type."
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "The resulting extended Interface type must be a super-set of all Interfaces it implements."
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Unions"
          },
          "contents": [
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "UnionTypeDefinition",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "Description",
                      "params": null
                    },
                    "isList": false,
                    "isOptional": true
                  },
                  {
                    "type": "Terminal",
                    "value": "union"
                  },
                  {
                    "type": "NonTerminal",
                    "name": "Name",
                    "params": null
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "Directives",
                      "params": [
                        {
                          "type": "NonTerminalParam",
                          "conditional": false,
                          "negated": false,
                          "name": "Const"
                        }
                      ]
                    },
                    "isList": false,
                    "isOptional": true
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "UnionMemberTypes",
                      "params": null
                    },
                    "isList": false,
                    "isOptional": true
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "UnionMemberTypes",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "ListRHS",
                "defs": [
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "UnionMemberTypes",
                        "params": null
                      },
                      {
                        "type": "Terminal",
                        "value": "|"
                      },
                      {
                        "type": "NonTerminal",
                        "name": "NamedType",
                        "params": null
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Terminal",
                        "value": "="
                      },
                      {
                        "type": "Quantified",
                        "token": {
                          "type": "Terminal",
                          "value": "|"
                        },
                        "isList": false,
                        "isOptional": true
                      },
                      {
                        "type": "NonTerminal",
                        "name": "NamedType",
                        "params": null
                      }
                    ]
                  }
                ]
              }
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "GraphQL Unions represent an object that could be one of a list of GraphQL Object types, but provides for no guaranteed fields between those types. They also differ from interfaces in that Object types declare what interfaces they implement, but are not aware of what unions contain them."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "With interfaces and objects, only those fields defined on the type can be queried directly; to query other fields on an interface, typed fragments must be used. This is the same as for unions, but unions do not define any fields, so "
                },
                {
                  "type": "Bold",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "no"
                    }
                  ]
                },
                {
                  "type": "Text",
                  "value": " fields may be queried on this type without the use of type refining fragments or inline fragments (with the exception of the meta-field "
                },
                {
                  "type": "Variable",
                  "name": "__typename"
                },
                {
                  "type": "Text",
                  "value": ")."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "For example, we might define the following types:"
                }
              ]
            },
            {
              "type": "Code",
              "raw": false,
              "lang": "graphql",
              "example": true,
              "counter": false,
              "code": "union SearchResult = Photo | Person\n\ntype Person {\n  name: String\n  age: Int\n}\n\ntype Photo {\n  height: Int\n  width: Int\n}\n\ntype SearchQuery {\n  firstSearchResult: SearchResult\n}\n"
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "When querying the "
                },
                {
                  "type": "InlineCode",
                  "code": "firstSearchResult"
                },
                {
                  "type": "Text",
                  "value": " field of type "
                },
                {
                  "type": "InlineCode",
                  "code": "SearchQuery"
                },
                {
                  "type": "Text",
                  "value": ", the query would ask for all fields inside of a fragment indicating the appropriate type. If the query wanted the name if the result was a Person, and the height if it was a photo, the following query is invalid, because the union itself defines no fields:"
                }
              ]
            },
            {
              "type": "Code",
              "raw": false,
              "lang": "graphql",
              "example": true,
              "counter": true,
              "code": "{\n  firstSearchResult {\n    name\n    height\n  }\n}\n"
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Instead, the query would be:"
                }
              ]
            },
            {
              "type": "Code",
              "raw": false,
              "lang": "graphql",
              "example": true,
              "counter": false,
              "code": "{\n  firstSearchResult {\n    ... on Person {\n      name\n    }\n    ... on Photo {\n      height\n    }\n  }\n}\n"
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Union members may be defined with an optional leading "
                },
                {
                  "type": "InlineCode",
                  "code": "|"
                },
                {
                  "type": "Text",
                  "value": " character to aid formatting when representing a longer list of possible types:"
                }
              ]
            },
            {
              "type": "Code",
              "raw": false,
              "lang": "graphql",
              "example": true,
              "counter": false,
              "code": "union SearchResult =\n  | Photo\n  | Person\n"
            },
            {
              "type": "Subsection",
              "header": {
                "type": "Subheader",
                "title": "Result Coercion"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "The union type should have some way of determining which object a given result corresponds to. Once it has done so, the result coercion of the union is the same as the result coercion of the object."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Subsection",
              "header": {
                "type": "Subheader",
                "title": "Input Coercion"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Unions are never valid inputs."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Subsection",
              "header": {
                "type": "Subheader",
                "title": "Type Validation"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Union types have the potential to be invalid if incorrectly defined."
                    }
                  ]
                },
                {
                  "type": "List",
                  "ordered": true,
                  "items": [
                    {
                      "type": "ListItem",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "A Union type must include one or more unique member types."
                        }
                      ]
                    },
                    {
                      "type": "ListItem",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "The member types of a Union type must all be Object base types; Scalar, Interface and Union types must not be member types of a Union. Similarly, wrapping types must not be member types of a Union."
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Union Extensions"
              },
              "contents": [
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "UnionTypeExtension",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "ListRHS",
                    "defs": [
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "Terminal",
                            "value": "extend"
                          },
                          {
                            "type": "Terminal",
                            "value": "union"
                          },
                          {
                            "type": "NonTerminal",
                            "name": "Name",
                            "params": null
                          },
                          {
                            "type": "Quantified",
                            "token": {
                              "type": "NonTerminal",
                              "name": "Directives",
                              "params": [
                                {
                                  "type": "NonTerminalParam",
                                  "conditional": false,
                                  "negated": false,
                                  "name": "Const"
                                }
                              ]
                            },
                            "isList": false,
                            "isOptional": true
                          },
                          {
                            "type": "NonTerminal",
                            "name": "UnionMemberTypes",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "Terminal",
                            "value": "extend"
                          },
                          {
                            "type": "Terminal",
                            "value": "union"
                          },
                          {
                            "type": "NonTerminal",
                            "name": "Name",
                            "params": null
                          },
                          {
                            "type": "NonTerminal",
                            "name": "Directives",
                            "params": [
                              {
                                "type": "NonTerminalParam",
                                "conditional": false,
                                "negated": false,
                                "name": "Const"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Union type extensions are used to represent a union type which has been extended from some original union type. For example, this might be used to represent additional local data, or by a GraphQL service which is itself an extension of another GraphQL service."
                    }
                  ]
                },
                {
                  "type": "Subsection",
                  "header": {
                    "type": "Subheader",
                    "title": "Type Validation"
                  },
                  "contents": [
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Union type extensions have the potential to be invalid if incorrectly defined."
                        }
                      ]
                    },
                    {
                      "type": "List",
                      "ordered": true,
                      "items": [
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "The named type must already be defined and must be a Union type."
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "The member types of a Union type extension must all be Object base types; Scalar, Interface and Union types must not be member types of a Union. Similarly, wrapping types must not be member types of a Union."
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "All member types of a Union type extension must be unique."
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "All member types of a Union type extension must not already be a member of the original Union type."
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "Any non-repeatable directives provided must not already apply to the original Union type."
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Enums"
          },
          "contents": [
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "EnumTypeDefinition",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "Description",
                      "params": null
                    },
                    "isList": false,
                    "isOptional": true
                  },
                  {
                    "type": "Terminal",
                    "value": "enum"
                  },
                  {
                    "type": "NonTerminal",
                    "name": "Name",
                    "params": null
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "Directives",
                      "params": [
                        {
                          "type": "NonTerminalParam",
                          "conditional": false,
                          "negated": false,
                          "name": "Const"
                        }
                      ]
                    },
                    "isList": false,
                    "isOptional": true
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "EnumValuesDefinition",
                      "params": null
                    },
                    "isList": false,
                    "isOptional": true
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "EnumValuesDefinition",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "Terminal",
                    "value": "{"
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "EnumValueDefinition",
                      "params": null
                    },
                    "isList": true,
                    "isOptional": false
                  },
                  {
                    "type": "Terminal",
                    "value": "}"
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "EnumValueDefinition",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "Description",
                      "params": null
                    },
                    "isList": false,
                    "isOptional": true
                  },
                  {
                    "type": "NonTerminal",
                    "name": "EnumValue",
                    "params": null
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "Directives",
                      "params": [
                        {
                          "type": "NonTerminalParam",
                          "conditional": false,
                          "negated": false,
                          "name": "Const"
                        }
                      ]
                    },
                    "isList": false,
                    "isOptional": true
                  }
                ]
              }
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "GraphQL Enum types, like Scalar types, also represent leaf values in a GraphQL type system. However Enum types describe the set of possible values."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Enums are not references for a numeric value, but are unique values in their own right. They may serialize as a string: the name of the represented value."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "In this example, an Enum type called "
                },
                {
                  "type": "InlineCode",
                  "code": "Direction"
                },
                {
                  "type": "Text",
                  "value": " is defined:"
                }
              ]
            },
            {
              "type": "Code",
              "raw": false,
              "lang": "graphql",
              "example": true,
              "counter": false,
              "code": "enum Direction {\n  NORTH\n  EAST\n  SOUTH\n  WEST\n}\n"
            },
            {
              "type": "Subsection",
              "header": {
                "type": "Subheader",
                "title": "Result Coercion"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "GraphQL services must return one of the defined set of possible values. If a reasonable coercion is not possible they must raise a field error."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Subsection",
              "header": {
                "type": "Subheader",
                "title": "Input Coercion"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "GraphQL has a constant literal to represent enum input values. GraphQL string literals must not be accepted as an enum input and instead raise a query error."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Query variable transport serializations which have a different representation for non-string symbolic values (for example, "
                    },
                    {
                      "type": "Link",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "EDN"
                        }
                      ],
                      "url": "https://github.com/edn-format/edn"
                    },
                    {
                      "type": "Text",
                      "value": ") should only allow such values as enum input values. Otherwise, for most transport serializations that do not, strings may be interpreted as the enum input value with the same name."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Subsection",
              "header": {
                "type": "Subheader",
                "title": "Type Validation"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Enum types have the potential to be invalid if incorrectly defined."
                    }
                  ]
                },
                {
                  "type": "List",
                  "ordered": true,
                  "items": [
                    {
                      "type": "ListItem",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "An Enum type must define one or more unique enum values."
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Enum Extensions"
              },
              "contents": [
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "EnumTypeExtension",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "ListRHS",
                    "defs": [
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "Terminal",
                            "value": "extend"
                          },
                          {
                            "type": "Terminal",
                            "value": "enum"
                          },
                          {
                            "type": "NonTerminal",
                            "name": "Name",
                            "params": null
                          },
                          {
                            "type": "Quantified",
                            "token": {
                              "type": "NonTerminal",
                              "name": "Directives",
                              "params": [
                                {
                                  "type": "NonTerminalParam",
                                  "conditional": false,
                                  "negated": false,
                                  "name": "Const"
                                }
                              ]
                            },
                            "isList": false,
                            "isOptional": true
                          },
                          {
                            "type": "NonTerminal",
                            "name": "EnumValuesDefinition",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "Terminal",
                            "value": "extend"
                          },
                          {
                            "type": "Terminal",
                            "value": "enum"
                          },
                          {
                            "type": "NonTerminal",
                            "name": "Name",
                            "params": null
                          },
                          {
                            "type": "NonTerminal",
                            "name": "Directives",
                            "params": [
                              {
                                "type": "NonTerminalParam",
                                "conditional": false,
                                "negated": false,
                                "name": "Const"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Enum type extensions are used to represent an enum type which has been extended from some original enum type. For example, this might be used to represent additional local data, or by a GraphQL service which is itself an extension of another GraphQL service."
                    }
                  ]
                },
                {
                  "type": "Subsection",
                  "header": {
                    "type": "Subheader",
                    "title": "Type Validation"
                  },
                  "contents": [
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Enum type extensions have the potential to be invalid if incorrectly defined."
                        }
                      ]
                    },
                    {
                      "type": "List",
                      "ordered": true,
                      "items": [
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "The named type must already be defined and must be an Enum type."
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "All values of an Enum type extension must be unique."
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "All values of an Enum type extension must not already be a value of the original Enum."
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "Any non-repeatable directives provided must not already apply to the original Enum type."
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Input Objects"
          },
          "contents": [
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "InputObjectTypeDefinition",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "Description",
                      "params": null
                    },
                    "isList": false,
                    "isOptional": true
                  },
                  {
                    "type": "Terminal",
                    "value": "input"
                  },
                  {
                    "type": "NonTerminal",
                    "name": "Name",
                    "params": null
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "Directives",
                      "params": [
                        {
                          "type": "NonTerminalParam",
                          "conditional": false,
                          "negated": false,
                          "name": "Const"
                        }
                      ]
                    },
                    "isList": false,
                    "isOptional": true
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "InputFieldsDefinition",
                      "params": null
                    },
                    "isList": false,
                    "isOptional": true
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "InputFieldsDefinition",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "Terminal",
                    "value": "{"
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "InputValueDefinition",
                      "params": null
                    },
                    "isList": true,
                    "isOptional": false
                  },
                  {
                    "type": "Terminal",
                    "value": "}"
                  }
                ]
              }
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Fields may accept arguments to configure their behavior. These inputs are often scalars or enums, but they sometimes need to represent more complex values."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "A GraphQL Input Object defines a set of input fields; the input fields are either scalars, enums, or other input objects. This allows arguments to accept arbitrarily complex structs."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "In this example, an Input Object called "
                },
                {
                  "type": "InlineCode",
                  "code": "Point2D"
                },
                {
                  "type": "Text",
                  "value": " describes "
                },
                {
                  "type": "InlineCode",
                  "code": "x"
                },
                {
                  "type": "Text",
                  "value": " and "
                },
                {
                  "type": "InlineCode",
                  "code": "y"
                },
                {
                  "type": "Text",
                  "value": " inputs:"
                }
              ]
            },
            {
              "type": "Code",
              "raw": false,
              "lang": "graphql",
              "example": true,
              "counter": false,
              "code": "input Point2D {\n  x: Float\n  y: Float\n}\n"
            },
            {
              "type": "Note",
              "contents": [
                {
                  "type": "Text",
                  "value": "The GraphQL Object type ("
                },
                {
                  "type": "NonTerminal",
                  "name": "ObjectTypeDefinition",
                  "params": null
                },
                {
                  "type": "Text",
                  "value": ") defined above is inappropriate for re-use here, because Object types can contain fields that define arguments or contain references to interfaces and unions, neither of which is appropriate for use as an input argument. For this reason, input objects have a separate type in the system."
                }
              ]
            },
            {
              "type": "Subsection",
              "header": {
                "type": "Subheader",
                "title": "Result Coercion"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "An input object is never a valid result. Input Object types cannot be the return type of an Object or Interface field."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Subsection",
              "header": {
                "type": "Subheader",
                "title": "Input Coercion"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "The value for an input object should be an input object literal or an unordered map supplied by a variable, otherwise a query error must be thrown. In either case, the input object literal or unordered map must not contain any entries with names not defined by a field of this input object type, otherwise an error must be thrown."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "The result of coercion is an unordered map with an entry for each field both defined by the input object type and for which a value exists. The resulting map is constructed with the following rules:"
                    }
                  ]
                },
                {
                  "type": "List",
                  "ordered": false,
                  "items": [
                    {
                      "type": "ListItem",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "If no value is provided for a defined input object field and that field definition provides a default value, the default value should be used. If no default value is provided and the input object field’s type is non-null, an error should be thrown. Otherwise, if the field is not required, then no entry is added to the coerced unordered map."
                        }
                      ]
                    },
                    {
                      "type": "ListItem",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "If the value "
                        },
                        {
                          "type": "Keyword",
                          "value": "null"
                        },
                        {
                          "type": "Text",
                          "value": " was provided for an input object field, and the field’s type is not a non-null type, an entry in the coerced unordered map is given the value "
                        },
                        {
                          "type": "Keyword",
                          "value": "null"
                        },
                        {
                          "type": "Text",
                          "value": ". In other words, there is a semantic difference between the explicitly provided value "
                        },
                        {
                          "type": "Keyword",
                          "value": "null"
                        },
                        {
                          "type": "Text",
                          "value": " versus having not provided a value."
                        }
                      ]
                    },
                    {
                      "type": "ListItem",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "If a literal value is provided for an input object field, an entry in the coerced unordered map is given the result of coercing that value according to the input coercion rules for the type of that field."
                        }
                      ]
                    },
                    {
                      "type": "ListItem",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "If a variable is provided for an input object field, the runtime value of that variable must be used. If the runtime value is "
                        },
                        {
                          "type": "Keyword",
                          "value": "null"
                        },
                        {
                          "type": "Text",
                          "value": " and the field type is non-null, a field error must be thrown. If no runtime value is provided, the variable definition’s default value should be used. If the variable definition does not provide a default value, the input object field definition’s default value should be used."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Following are examples of input coercion for an input object type with a "
                    },
                    {
                      "type": "InlineCode",
                      "code": "String"
                    },
                    {
                      "type": "Text",
                      "value": " field "
                    },
                    {
                      "type": "InlineCode",
                      "code": "a"
                    },
                    {
                      "type": "Text",
                      "value": " and a required (non-null) "
                    },
                    {
                      "type": "InlineCode",
                      "code": "Int!"
                    },
                    {
                      "type": "Text",
                      "value": " field "
                    },
                    {
                      "type": "InlineCode",
                      "code": "b"
                    },
                    {
                      "type": "Text",
                      "value": ":"
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": "graphql",
                  "example": true,
                  "counter": false,
                  "code": "input ExampleInputObject {\n  a: String\n  b: Int!\n}\n"
                },
                {
                  "type": "Table",
                  "headers": [
                    [
                      {
                        "type": "Text",
                        "value": "Literal Value"
                      }
                    ],
                    [
                      {
                        "type": "Text",
                        "value": "Variables"
                      }
                    ],
                    [
                      {
                        "type": "Text",
                        "value": "Coerced Value"
                      }
                    ]
                  ],
                  "rows": [
                    [
                      [
                        {
                          "type": "InlineCode",
                          "code": "{ a: \"abc\", b: 123 }"
                        }
                      ],
                      [
                        {
                          "type": "InlineCode",
                          "code": "{}"
                        }
                      ],
                      [
                        {
                          "type": "InlineCode",
                          "code": "{ a: \"abc\", b: 123 }"
                        }
                      ]
                    ],
                    [
                      [
                        {
                          "type": "InlineCode",
                          "code": "{ a: null, b: 123 }"
                        }
                      ],
                      [
                        {
                          "type": "InlineCode",
                          "code": "{}"
                        }
                      ],
                      [
                        {
                          "type": "InlineCode",
                          "code": "{ a: null, b: 123 }"
                        }
                      ]
                    ],
                    [
                      [
                        {
                          "type": "InlineCode",
                          "code": "{ b: 123 }"
                        }
                      ],
                      [
                        {
                          "type": "InlineCode",
                          "code": "{}"
                        }
                      ],
                      [
                        {
                          "type": "InlineCode",
                          "code": "{ b: 123 }"
                        }
                      ]
                    ],
                    [
                      [
                        {
                          "type": "InlineCode",
                          "code": "{ a: $var, b: 123 }"
                        }
                      ],
                      [
                        {
                          "type": "InlineCode",
                          "code": "{ var: null }"
                        }
                      ],
                      [
                        {
                          "type": "InlineCode",
                          "code": "{ a: null, b: 123 }"
                        }
                      ]
                    ],
                    [
                      [
                        {
                          "type": "InlineCode",
                          "code": "{ a: $var, b: 123 }"
                        }
                      ],
                      [
                        {
                          "type": "InlineCode",
                          "code": "{}"
                        }
                      ],
                      [
                        {
                          "type": "InlineCode",
                          "code": "{ b: 123 }"
                        }
                      ]
                    ],
                    [
                      [
                        {
                          "type": "InlineCode",
                          "code": "{ b: $var }"
                        }
                      ],
                      [
                        {
                          "type": "InlineCode",
                          "code": "{ var: 123 }"
                        }
                      ],
                      [
                        {
                          "type": "InlineCode",
                          "code": "{ b: 123 }"
                        }
                      ]
                    ],
                    [
                      [
                        {
                          "type": "InlineCode",
                          "code": "$var"
                        }
                      ],
                      [
                        {
                          "type": "InlineCode",
                          "code": "{ var: { b: 123 } }"
                        }
                      ],
                      [
                        {
                          "type": "InlineCode",
                          "code": "{ b: 123 }"
                        }
                      ]
                    ],
                    [
                      [
                        {
                          "type": "InlineCode",
                          "code": "\"abc123\""
                        }
                      ],
                      [
                        {
                          "type": "InlineCode",
                          "code": "{}"
                        }
                      ],
                      [
                        {
                          "type": "Text",
                          "value": "Error: Incorrect value"
                        }
                      ]
                    ],
                    [
                      [
                        {
                          "type": "InlineCode",
                          "code": "$var"
                        }
                      ],
                      [
                        {
                          "type": "InlineCode",
                          "code": "{ var: \"abc123\" }"
                        }
                      ],
                      [
                        {
                          "type": "Text",
                          "value": "Error: Incorrect value"
                        }
                      ]
                    ],
                    [
                      [
                        {
                          "type": "InlineCode",
                          "code": "{ a: \"abc\", b: \"123\" }"
                        }
                      ],
                      [
                        {
                          "type": "InlineCode",
                          "code": "{}"
                        }
                      ],
                      [
                        {
                          "type": "Text",
                          "value": "Error: Incorrect value for field "
                        },
                        {
                          "type": "Variable",
                          "name": "b"
                        }
                      ]
                    ],
                    [
                      [
                        {
                          "type": "InlineCode",
                          "code": "{ a: \"abc\" }"
                        }
                      ],
                      [
                        {
                          "type": "InlineCode",
                          "code": "{}"
                        }
                      ],
                      [
                        {
                          "type": "Text",
                          "value": "Error: Missing required field "
                        },
                        {
                          "type": "Variable",
                          "name": "b"
                        }
                      ]
                    ],
                    [
                      [
                        {
                          "type": "InlineCode",
                          "code": "{ b: $var }"
                        }
                      ],
                      [
                        {
                          "type": "InlineCode",
                          "code": "{}"
                        }
                      ],
                      [
                        {
                          "type": "Text",
                          "value": "Error: Missing required field "
                        },
                        {
                          "type": "Variable",
                          "name": "b"
                        },
                        {
                          "type": "Text",
                          "value": "."
                        }
                      ]
                    ],
                    [
                      [
                        {
                          "type": "InlineCode",
                          "code": "$var"
                        }
                      ],
                      [
                        {
                          "type": "InlineCode",
                          "code": "{ var: { a: \"abc\" } }"
                        }
                      ],
                      [
                        {
                          "type": "Text",
                          "value": "Error: Missing required field "
                        },
                        {
                          "type": "Variable",
                          "name": "b"
                        }
                      ]
                    ],
                    [
                      [
                        {
                          "type": "InlineCode",
                          "code": "{ a: \"abc\", b: null }"
                        }
                      ],
                      [
                        {
                          "type": "InlineCode",
                          "code": "{}"
                        }
                      ],
                      [
                        {
                          "type": "Text",
                          "value": "Error: "
                        },
                        {
                          "type": "Variable",
                          "name": "b"
                        },
                        {
                          "type": "Text",
                          "value": " must be non-null."
                        }
                      ]
                    ],
                    [
                      [
                        {
                          "type": "InlineCode",
                          "code": "{ b: $var }"
                        }
                      ],
                      [
                        {
                          "type": "InlineCode",
                          "code": "{ var: null }"
                        }
                      ],
                      [
                        {
                          "type": "Text",
                          "value": "Error: "
                        },
                        {
                          "type": "Variable",
                          "name": "b"
                        },
                        {
                          "type": "Text",
                          "value": " must be non-null."
                        }
                      ]
                    ],
                    [
                      [
                        {
                          "type": "InlineCode",
                          "code": "{ b: 123, c: \"xyz\" }"
                        }
                      ],
                      [
                        {
                          "type": "InlineCode",
                          "code": "{}"
                        }
                      ],
                      [
                        {
                          "type": "Text",
                          "value": "Error: Unexpected field "
                        },
                        {
                          "type": "Variable",
                          "name": "c"
                        }
                      ]
                    ]
                  ]
                }
              ]
            },
            {
              "type": "Subsection",
              "header": {
                "type": "Subheader",
                "title": "Type Validation"
              },
              "contents": [
                {
                  "type": "List",
                  "ordered": true,
                  "items": [
                    {
                      "type": "ListItem",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "An Input Object type must define one or more input fields."
                        }
                      ]
                    },
                    {
                      "type": "ListItem",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "For each input field of an Input Object type:"
                        },
                        {
                          "type": "List",
                          "ordered": true,
                          "items": [
                            {
                              "type": "ListItem",
                              "contents": [
                                {
                                  "type": "Text",
                                  "value": "The input field must have a unique name within that Input Object type; no two input fields may share the same name."
                                }
                              ]
                            },
                            {
                              "type": "ListItem",
                              "contents": [
                                {
                                  "type": "Text",
                                  "value": "The input field must not have a name which begins with the characters "
                                },
                                {
                                  "type": "StringLiteral",
                                  "value": "\"__\""
                                },
                                {
                                  "type": "Text",
                                  "value": " (two underscores)."
                                }
                              ]
                            },
                            {
                              "type": "ListItem",
                              "contents": [
                                {
                                  "type": "Text",
                                  "value": "The input field must accept a type where "
                                },
                                {
                                  "type": "Call",
                                  "name": "IsInputType",
                                  "args": [
                                    {
                                      "type": "Variable",
                                      "name": "inputFieldType"
                                    }
                                  ]
                                },
                                {
                                  "type": "Text",
                                  "value": " returns "
                                },
                                {
                                  "type": "Keyword",
                                  "value": "true"
                                },
                                {
                                  "type": "Text",
                                  "value": "."
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Input Object Extensions"
              },
              "contents": [
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "InputObjectTypeExtension",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "ListRHS",
                    "defs": [
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "Terminal",
                            "value": "extend"
                          },
                          {
                            "type": "Terminal",
                            "value": "input"
                          },
                          {
                            "type": "NonTerminal",
                            "name": "Name",
                            "params": null
                          },
                          {
                            "type": "Quantified",
                            "token": {
                              "type": "NonTerminal",
                              "name": "Directives",
                              "params": [
                                {
                                  "type": "NonTerminalParam",
                                  "conditional": false,
                                  "negated": false,
                                  "name": "Const"
                                }
                              ]
                            },
                            "isList": false,
                            "isOptional": true
                          },
                          {
                            "type": "NonTerminal",
                            "name": "InputFieldsDefinition",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "Terminal",
                            "value": "extend"
                          },
                          {
                            "type": "Terminal",
                            "value": "input"
                          },
                          {
                            "type": "NonTerminal",
                            "name": "Name",
                            "params": null
                          },
                          {
                            "type": "NonTerminal",
                            "name": "Directives",
                            "params": [
                              {
                                "type": "NonTerminalParam",
                                "conditional": false,
                                "negated": false,
                                "name": "Const"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Input object type extensions are used to represent an input object type which has been extended from some original input object type. For example, this might be used by a GraphQL service which is itself an extension of another GraphQL service."
                    }
                  ]
                },
                {
                  "type": "Subsection",
                  "header": {
                    "type": "Subheader",
                    "title": "Type Validation"
                  },
                  "contents": [
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Input object type extensions have the potential to be invalid if incorrectly defined."
                        }
                      ]
                    },
                    {
                      "type": "List",
                      "ordered": true,
                      "items": [
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "The named type must already be defined and must be a Input Object type."
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "All fields of an Input Object type extension must have unique names."
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "All fields of an Input Object type extension must not already be a field of the original Input Object."
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "Any non-repeatable directives provided must not already apply to the original Input Object type."
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "List"
          },
          "contents": [
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "A GraphQL list is a special collection type which declares the type of each item in the List (referred to as the "
                },
                {
                  "type": "Italic",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "item type"
                    }
                  ]
                },
                {
                  "type": "Text",
                  "value": " of the list). List values are serialized as ordered lists, where each item in the list is serialized as per the item type."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "To denote that a field uses a List type the item type is wrapped in square brackets like this: "
                },
                {
                  "type": "InlineCode",
                  "code": "pets: [Pet]"
                },
                {
                  "type": "Text",
                  "value": ". Nesting lists is allowed: "
                },
                {
                  "type": "InlineCode",
                  "code": "matrix: [[Int]]"
                },
                {
                  "type": "Text",
                  "value": "."
                }
              ]
            },
            {
              "type": "Subsection",
              "header": {
                "type": "Subheader",
                "title": "Result Coercion"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "GraphQL services must return an ordered list as the result of a list type. Each item in the list must be the result of a result coercion of the item type. If a reasonable coercion is not possible it must raise a field error. In particular, if a non-list is returned, the coercion should fail, as this indicates a mismatch in expectations between the type system and the implementation."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "If a list’s item type is nullable, then errors occurring during preparation or coercion of an individual item in the list must result in a the value "
                    },
                    {
                      "type": "Keyword",
                      "value": "null"
                    },
                    {
                      "type": "Text",
                      "value": " at that position in the list along with an error added to the response. If a list’s item type is non-null, an error occurring at an individual item in the list must result in a field error for the entire list."
                    }
                  ]
                },
                {
                  "type": "Note",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "For more information on the error handling process, see “Errors and Non-Nullability” within the Execution section."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Subsection",
              "header": {
                "type": "Subheader",
                "title": "Input Coercion"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "When expected as an input, list values are accepted only when each item in the list can be accepted by the list’s item type."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "If the value passed as an input to a list type is "
                    },
                    {
                      "type": "Italic",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "not"
                        }
                      ]
                    },
                    {
                      "type": "Text",
                      "value": " a list and not the "
                    },
                    {
                      "type": "Keyword",
                      "value": "null"
                    },
                    {
                      "type": "Text",
                      "value": " value, then the result of input coercion is a list of size one, where the single item value is the result of input coercion for the list’s item type on the provided value (note this may apply recursively for nested lists)."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "This allows inputs which accept one or many arguments (sometimes referred to as “var args”) to declare their input type as a list while for the common case of a single value, a client can just pass that value directly rather than constructing the list."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Following are examples of input coercion with various list types and values:"
                    }
                  ]
                },
                {
                  "type": "Table",
                  "headers": [
                    [
                      {
                        "type": "Text",
                        "value": "Expected Type"
                      }
                    ],
                    [
                      {
                        "type": "Text",
                        "value": "Provided Value"
                      }
                    ],
                    [
                      {
                        "type": "Text",
                        "value": "Coerced Value"
                      }
                    ]
                  ],
                  "rows": [
                    [
                      [
                        {
                          "type": "InlineCode",
                          "code": "[Int]"
                        }
                      ],
                      [
                        {
                          "type": "InlineCode",
                          "code": "[1, 2, 3]"
                        }
                      ],
                      [
                        {
                          "type": "InlineCode",
                          "code": "[1, 2, 3]"
                        }
                      ]
                    ],
                    [
                      [
                        {
                          "type": "InlineCode",
                          "code": "[Int]"
                        }
                      ],
                      [
                        {
                          "type": "InlineCode",
                          "code": "[1, \"b\", true]"
                        }
                      ],
                      [
                        {
                          "type": "Text",
                          "value": "Error: Incorrect item value"
                        }
                      ]
                    ],
                    [
                      [
                        {
                          "type": "InlineCode",
                          "code": "[Int]"
                        }
                      ],
                      [
                        {
                          "type": "InlineCode",
                          "code": "1"
                        }
                      ],
                      [
                        {
                          "type": "InlineCode",
                          "code": "[1]"
                        }
                      ]
                    ],
                    [
                      [
                        {
                          "type": "InlineCode",
                          "code": "[Int]"
                        }
                      ],
                      [
                        {
                          "type": "InlineCode",
                          "code": "null"
                        }
                      ],
                      [
                        {
                          "type": "InlineCode",
                          "code": "null"
                        }
                      ]
                    ],
                    [
                      [
                        {
                          "type": "InlineCode",
                          "code": "[[Int]]"
                        }
                      ],
                      [
                        {
                          "type": "InlineCode",
                          "code": "[[1], [2, 3]]"
                        }
                      ],
                      [
                        {
                          "type": "InlineCode",
                          "code": "[[1], [2, 3]]"
                        }
                      ]
                    ],
                    [
                      [
                        {
                          "type": "InlineCode",
                          "code": "[[Int]]"
                        }
                      ],
                      [
                        {
                          "type": "InlineCode",
                          "code": "[1, 2, 3]"
                        }
                      ],
                      [
                        {
                          "type": "Text",
                          "value": "Error: Incorrect item value"
                        }
                      ]
                    ],
                    [
                      [
                        {
                          "type": "InlineCode",
                          "code": "[[Int]]"
                        }
                      ],
                      [
                        {
                          "type": "InlineCode",
                          "code": "1"
                        }
                      ],
                      [
                        {
                          "type": "InlineCode",
                          "code": "[[1]]"
                        }
                      ]
                    ],
                    [
                      [
                        {
                          "type": "InlineCode",
                          "code": "[[Int]]"
                        }
                      ],
                      [
                        {
                          "type": "InlineCode",
                          "code": "null"
                        }
                      ],
                      [
                        {
                          "type": "InlineCode",
                          "code": "null"
                        }
                      ]
                    ]
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Non-Null"
          },
          "contents": [
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "By default, all types in GraphQL are nullable; the "
                },
                {
                  "type": "Keyword",
                  "value": "null"
                },
                {
                  "type": "Text",
                  "value": " value is a valid response for all of the above types. To declare a type that disallows null, the GraphQL Non-Null type can be used. This type wraps an underlying type, and this type acts identically to that wrapped type, with the exception that "
                },
                {
                  "type": "Keyword",
                  "value": "null"
                },
                {
                  "type": "Text",
                  "value": " is not a valid response for the wrapping type. A trailing exclamation mark is used to denote a field that uses a Non-Null type like this: "
                },
                {
                  "type": "InlineCode",
                  "code": "name: String!"
                },
                {
                  "type": "Text",
                  "value": "."
                }
              ]
            },
            {
              "type": "Subsection",
              "header": {
                "type": "Subheader",
                "title": "Nullable vs. Optional"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Fields are "
                    },
                    {
                      "type": "Italic",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "always"
                        }
                      ]
                    },
                    {
                      "type": "Text",
                      "value": " optional within the context of a query, a field may be omitted and the query is still valid. However fields that return Non-Null types will never return the value "
                    },
                    {
                      "type": "Keyword",
                      "value": "null"
                    },
                    {
                      "type": "Text",
                      "value": " if queried."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Inputs (such as field arguments), are always optional by default. However a non-null input type is required. In addition to not accepting the value "
                    },
                    {
                      "type": "Keyword",
                      "value": "null"
                    },
                    {
                      "type": "Text",
                      "value": ", it also does not accept omission. For the sake of simplicity nullable types are always optional and non-null types are always required."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Subsection",
              "header": {
                "type": "Subheader",
                "title": "Result Coercion"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "In all of the above result coercions, "
                    },
                    {
                      "type": "Keyword",
                      "value": "null"
                    },
                    {
                      "type": "Text",
                      "value": " was considered a valid value. To coerce the result of a Non-Null type, the coercion of the wrapped type should be performed. If that result was not "
                    },
                    {
                      "type": "Keyword",
                      "value": "null"
                    },
                    {
                      "type": "Text",
                      "value": ", then the result of coercing the Non-Null type is that result. If that result was "
                    },
                    {
                      "type": "Keyword",
                      "value": "null"
                    },
                    {
                      "type": "Text",
                      "value": ", then a field error must be raised."
                    }
                  ]
                },
                {
                  "type": "Note",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "When a field error is raised on a non-null value, the error propagates to the parent field. For more information on this process, see “Errors and Non-Nullability” within the Execution section."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Subsection",
              "header": {
                "type": "Subheader",
                "title": "Input Coercion"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "If an argument or input-object field of a Non-Null type is not provided, is provided with the literal value "
                    },
                    {
                      "type": "Keyword",
                      "value": "null"
                    },
                    {
                      "type": "Text",
                      "value": ", or is provided with a variable that was either not provided a value at runtime, or was provided the value "
                    },
                    {
                      "type": "Keyword",
                      "value": "null"
                    },
                    {
                      "type": "Text",
                      "value": ", then a query error must be raised."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "If the value provided to the Non-Null type is provided with a literal value other than "
                    },
                    {
                      "type": "Keyword",
                      "value": "null"
                    },
                    {
                      "type": "Text",
                      "value": ", or a Non-Null variable value, it is coerced using the input coercion for the wrapped type."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "A non-null argument cannot be omitted:"
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": "graphql",
                  "example": true,
                  "counter": true,
                  "code": "{\n  fieldWithNonNullArg\n}\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "The value "
                    },
                    {
                      "type": "Keyword",
                      "value": "null"
                    },
                    {
                      "type": "Text",
                      "value": " cannot be provided to a non-null argument:"
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": "graphql",
                  "example": true,
                  "counter": true,
                  "code": "{\n  fieldWithNonNullArg(nonNullArg: null)\n}\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "A variable of a nullable type cannot be provided to a non-null argument:"
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": "graphql",
                  "example": true,
                  "counter": false,
                  "code": "query withNullableVariable($var: String) {\n  fieldWithNonNullArg(nonNullArg: $var)\n}\n"
                },
                {
                  "type": "Note",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "The Validation section defines providing a nullable variable type to a non-null input type as invalid."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Subsection",
              "header": {
                "type": "Subheader",
                "title": "Type Validation"
              },
              "contents": [
                {
                  "type": "List",
                  "ordered": true,
                  "items": [
                    {
                      "type": "ListItem",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "A Non-Null type must not wrap another Non-Null type."
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Combining List and Non-Null"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "The List and Non-Null wrapping types can compose, representing more complex types. The rules for result coercion and input coercion of Lists and Non-Null types apply in a recursive fashion."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "For example if the inner item type of a List is Non-Null (e.g. "
                    },
                    {
                      "type": "InlineCode",
                      "code": "[T!]"
                    },
                    {
                      "type": "Text",
                      "value": "), then that List may not contain any "
                    },
                    {
                      "type": "Keyword",
                      "value": "null"
                    },
                    {
                      "type": "Text",
                      "value": " items. However if the inner type of a Non-Null is a List (e.g. "
                    },
                    {
                      "type": "InlineCode",
                      "code": "[T]!"
                    },
                    {
                      "type": "Text",
                      "value": "), then "
                    },
                    {
                      "type": "Keyword",
                      "value": "null"
                    },
                    {
                      "type": "Text",
                      "value": " is not accepted however an empty list is accepted."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Following are examples of result coercion with various types and values:"
                    }
                  ]
                },
                {
                  "type": "Table",
                  "headers": [
                    [
                      {
                        "type": "Text",
                        "value": "Expected Type"
                      }
                    ],
                    [
                      {
                        "type": "Text",
                        "value": "Internal Value"
                      }
                    ],
                    [
                      {
                        "type": "Text",
                        "value": "Coerced Result"
                      }
                    ]
                  ],
                  "rows": [
                    [
                      [
                        {
                          "type": "InlineCode",
                          "code": "[Int]"
                        }
                      ],
                      [
                        {
                          "type": "InlineCode",
                          "code": "[1, 2, 3]"
                        }
                      ],
                      [
                        {
                          "type": "InlineCode",
                          "code": "[1, 2, 3]"
                        }
                      ]
                    ],
                    [
                      [
                        {
                          "type": "InlineCode",
                          "code": "[Int]"
                        }
                      ],
                      [
                        {
                          "type": "InlineCode",
                          "code": "null"
                        }
                      ],
                      [
                        {
                          "type": "InlineCode",
                          "code": "null"
                        }
                      ]
                    ],
                    [
                      [
                        {
                          "type": "InlineCode",
                          "code": "[Int]"
                        }
                      ],
                      [
                        {
                          "type": "InlineCode",
                          "code": "[1, 2, null]"
                        }
                      ],
                      [
                        {
                          "type": "InlineCode",
                          "code": "[1, 2, null]"
                        }
                      ]
                    ],
                    [
                      [
                        {
                          "type": "InlineCode",
                          "code": "[Int]"
                        }
                      ],
                      [
                        {
                          "type": "InlineCode",
                          "code": "[1, 2, Error]"
                        }
                      ],
                      [
                        {
                          "type": "InlineCode",
                          "code": "[1, 2, null]"
                        },
                        {
                          "type": "Text",
                          "value": " (With logged error)"
                        }
                      ]
                    ],
                    [
                      [
                        {
                          "type": "InlineCode",
                          "code": "[Int]!"
                        }
                      ],
                      [
                        {
                          "type": "InlineCode",
                          "code": "[1, 2, 3]"
                        }
                      ],
                      [
                        {
                          "type": "InlineCode",
                          "code": "[1, 2, 3]"
                        }
                      ]
                    ],
                    [
                      [
                        {
                          "type": "InlineCode",
                          "code": "[Int]!"
                        }
                      ],
                      [
                        {
                          "type": "InlineCode",
                          "code": "null"
                        }
                      ],
                      [
                        {
                          "type": "Text",
                          "value": "Error: Value cannot be null"
                        }
                      ]
                    ],
                    [
                      [
                        {
                          "type": "InlineCode",
                          "code": "[Int]!"
                        }
                      ],
                      [
                        {
                          "type": "InlineCode",
                          "code": "[1, 2, null]"
                        }
                      ],
                      [
                        {
                          "type": "InlineCode",
                          "code": "[1, 2, null]"
                        }
                      ]
                    ],
                    [
                      [
                        {
                          "type": "InlineCode",
                          "code": "[Int]!"
                        }
                      ],
                      [
                        {
                          "type": "InlineCode",
                          "code": "[1, 2, Error]"
                        }
                      ],
                      [
                        {
                          "type": "InlineCode",
                          "code": "[1, 2, null]"
                        },
                        {
                          "type": "Text",
                          "value": " (With logged error)"
                        }
                      ]
                    ],
                    [
                      [
                        {
                          "type": "InlineCode",
                          "code": "[Int!]"
                        }
                      ],
                      [
                        {
                          "type": "InlineCode",
                          "code": "[1, 2, 3]"
                        }
                      ],
                      [
                        {
                          "type": "InlineCode",
                          "code": "[1, 2, 3]"
                        }
                      ]
                    ],
                    [
                      [
                        {
                          "type": "InlineCode",
                          "code": "[Int!]"
                        }
                      ],
                      [
                        {
                          "type": "InlineCode",
                          "code": "null"
                        }
                      ],
                      [
                        {
                          "type": "InlineCode",
                          "code": "null"
                        }
                      ]
                    ],
                    [
                      [
                        {
                          "type": "InlineCode",
                          "code": "[Int!]"
                        }
                      ],
                      [
                        {
                          "type": "InlineCode",
                          "code": "[1, 2, null]"
                        }
                      ],
                      [
                        {
                          "type": "InlineCode",
                          "code": "null"
                        },
                        {
                          "type": "Text",
                          "value": " (With logged coercion error)"
                        }
                      ]
                    ],
                    [
                      [
                        {
                          "type": "InlineCode",
                          "code": "[Int!]"
                        }
                      ],
                      [
                        {
                          "type": "InlineCode",
                          "code": "[1, 2, Error]"
                        }
                      ],
                      [
                        {
                          "type": "InlineCode",
                          "code": "null"
                        },
                        {
                          "type": "Text",
                          "value": " (With logged error)"
                        }
                      ]
                    ],
                    [
                      [
                        {
                          "type": "InlineCode",
                          "code": "[Int!]!"
                        }
                      ],
                      [
                        {
                          "type": "InlineCode",
                          "code": "[1, 2, 3]"
                        }
                      ],
                      [
                        {
                          "type": "InlineCode",
                          "code": "[1, 2, 3]"
                        }
                      ]
                    ],
                    [
                      [
                        {
                          "type": "InlineCode",
                          "code": "[Int!]!"
                        }
                      ],
                      [
                        {
                          "type": "InlineCode",
                          "code": "null"
                        }
                      ],
                      [
                        {
                          "type": "Text",
                          "value": "Error: Value cannot be null"
                        }
                      ]
                    ],
                    [
                      [
                        {
                          "type": "InlineCode",
                          "code": "[Int!]!"
                        }
                      ],
                      [
                        {
                          "type": "InlineCode",
                          "code": "[1, 2, null]"
                        }
                      ],
                      [
                        {
                          "type": "Text",
                          "value": "Error: Item cannot be null"
                        }
                      ]
                    ],
                    [
                      [
                        {
                          "type": "InlineCode",
                          "code": "[Int!]!"
                        }
                      ],
                      [
                        {
                          "type": "InlineCode",
                          "code": "[1, 2, Error]"
                        }
                      ],
                      [
                        {
                          "type": "Text",
                          "value": "Error: Error occurred in item"
                        }
                      ]
                    ]
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Directives"
          },
          "contents": [
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "DirectiveDefinition",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "Description",
                      "params": null
                    },
                    "isList": false,
                    "isOptional": true
                  },
                  {
                    "type": "Terminal",
                    "value": "directive"
                  },
                  {
                    "type": "Terminal",
                    "value": "@"
                  },
                  {
                    "type": "NonTerminal",
                    "name": "Name",
                    "params": null
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "ArgumentsDefinition",
                      "params": null
                    },
                    "isList": false,
                    "isOptional": true
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "Terminal",
                      "value": "repeatable"
                    },
                    "isList": false,
                    "isOptional": true
                  },
                  {
                    "type": "Terminal",
                    "value": "on"
                  },
                  {
                    "type": "NonTerminal",
                    "name": "DirectiveLocations",
                    "params": null
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "DirectiveLocations",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "ListRHS",
                "defs": [
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "DirectiveLocations",
                        "params": null
                      },
                      {
                        "type": "Terminal",
                        "value": "|"
                      },
                      {
                        "type": "NonTerminal",
                        "name": "DirectiveLocation",
                        "params": null
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Quantified",
                        "token": {
                          "type": "Terminal",
                          "value": "|"
                        },
                        "isList": false,
                        "isOptional": true
                      },
                      {
                        "type": "NonTerminal",
                        "name": "DirectiveLocation",
                        "params": null
                      }
                    ]
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "DirectiveLocation",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "ListRHS",
                "defs": [
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "ExecutableDirectiveLocation",
                        "params": null
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "TypeSystemDirectiveLocation",
                        "params": null
                      }
                    ]
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "ExecutableDirectiveLocation",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "OneOfRHS",
                "rows": [
                  [
                    {
                      "type": "Terminal",
                      "value": "QUERY"
                    }
                  ],
                  [
                    {
                      "type": "Terminal",
                      "value": "MUTATION"
                    }
                  ],
                  [
                    {
                      "type": "Terminal",
                      "value": "SUBSCRIPTION"
                    }
                  ],
                  [
                    {
                      "type": "Terminal",
                      "value": "FIELD"
                    }
                  ],
                  [
                    {
                      "type": "Terminal",
                      "value": "FRAGMENT_DEFINITION"
                    }
                  ],
                  [
                    {
                      "type": "Terminal",
                      "value": "FRAGMENT_SPREAD"
                    }
                  ],
                  [
                    {
                      "type": "Terminal",
                      "value": "INLINE_FRAGMENT"
                    }
                  ],
                  [
                    {
                      "type": "Terminal",
                      "value": "VARIABLE_DEFINITION"
                    }
                  ]
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "TypeSystemDirectiveLocation",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "OneOfRHS",
                "rows": [
                  [
                    {
                      "type": "Terminal",
                      "value": "SCHEMA"
                    }
                  ],
                  [
                    {
                      "type": "Terminal",
                      "value": "SCALAR"
                    }
                  ],
                  [
                    {
                      "type": "Terminal",
                      "value": "OBJECT"
                    }
                  ],
                  [
                    {
                      "type": "Terminal",
                      "value": "FIELD_DEFINITION"
                    }
                  ],
                  [
                    {
                      "type": "Terminal",
                      "value": "ARGUMENT_DEFINITION"
                    }
                  ],
                  [
                    {
                      "type": "Terminal",
                      "value": "INTERFACE"
                    }
                  ],
                  [
                    {
                      "type": "Terminal",
                      "value": "UNION"
                    }
                  ],
                  [
                    {
                      "type": "Terminal",
                      "value": "ENUM"
                    }
                  ],
                  [
                    {
                      "type": "Terminal",
                      "value": "ENUM_VALUE"
                    }
                  ],
                  [
                    {
                      "type": "Terminal",
                      "value": "INPUT_OBJECT"
                    }
                  ],
                  [
                    {
                      "type": "Terminal",
                      "value": "INPUT_FIELD_DEFINITION"
                    }
                  ]
                ]
              }
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "A GraphQL schema describes directives which are used to annotate various parts of a GraphQL document as an indicator that they should be evaluated differently by a validator, executor, or client tool such as a code generator."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "GraphQL implementations should provide the "
                },
                {
                  "type": "InlineCode",
                  "code": "@skip"
                },
                {
                  "type": "Text",
                  "value": " and "
                },
                {
                  "type": "InlineCode",
                  "code": "@include"
                },
                {
                  "type": "Text",
                  "value": " directives."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "GraphQL implementations that support the type system definition language must provide the "
                },
                {
                  "type": "InlineCode",
                  "code": "@deprecated"
                },
                {
                  "type": "Text",
                  "value": " directive if representing deprecated portions of the schema."
                }
              ]
            },
            {
              "type": "Subsection",
              "header": {
                "type": "Subheader",
                "title": "Custom Directives"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "GraphQL services and client tooling may provide additional directives beyond those defined in this document. Directives are the preferred way to extend GraphQL with custom or experimental behavior."
                    }
                  ]
                },
                {
                  "type": "Note",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "When defining a directive, it is recommended to prefix the directive’s name to make its scope of usage clear and to prevent a collision with directives which may be specified by future versions of this document (which will not include "
                    },
                    {
                      "type": "InlineCode",
                      "code": "_"
                    },
                    {
                      "type": "Text",
                      "value": " in their name). For example, a custom directive used by Facebook’s GraphQL service should be named "
                    },
                    {
                      "type": "InlineCode",
                      "code": "@fb_auth"
                    },
                    {
                      "type": "Text",
                      "value": " instead of "
                    },
                    {
                      "type": "InlineCode",
                      "code": "@auth"
                    },
                    {
                      "type": "Text",
                      "value": ". This is especially recommended for proposed additions to this specification which can change during the "
                    },
                    {
                      "type": "Link",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "RFC process"
                        }
                      ],
                      "url": "https://github.com/graphql/graphql-spec/blob/master/CONTRIBUTING.md"
                    },
                    {
                      "type": "Text",
                      "value": ". For example a work in progress version of "
                    },
                    {
                      "type": "InlineCode",
                      "code": "@live"
                    },
                    {
                      "type": "Text",
                      "value": " should be named "
                    },
                    {
                      "type": "InlineCode",
                      "code": "@rfc_live"
                    },
                    {
                      "type": "Text",
                      "value": "."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Directives must only be used in the locations they are declared to belong in. In this example, a directive is defined which can be used to annotate a field:"
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": "graphql",
                  "example": true,
                  "counter": false,
                  "code": "directive @example on FIELD\n\nfragment SomeFragment on SomeType {\n  field @example\n}\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Directive locations may be defined with an optional leading "
                    },
                    {
                      "type": "InlineCode",
                      "code": "|"
                    },
                    {
                      "type": "Text",
                      "value": " character to aid formatting when representing a longer list of possible locations:"
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": "graphql",
                  "example": true,
                  "counter": false,
                  "code": "directive @example on\n  | FIELD\n  | FRAGMENT_SPREAD\n  | INLINE_FRAGMENT\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Directives can also be used to annotate the type system definition language as well, which can be a useful tool for supplying additional metadata in order to generate GraphQL execution services, produce client generated runtime code, or many other useful extensions of the GraphQL semantics."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "In this example, the directive "
                    },
                    {
                      "type": "InlineCode",
                      "code": "@example"
                    },
                    {
                      "type": "Text",
                      "value": " annotates field and argument definitions:"
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": "graphql",
                  "example": true,
                  "counter": false,
                  "code": "directive @example on FIELD_DEFINITION | ARGUMENT_DEFINITION\n\ntype SomeType {\n  field(arg: Int @example): String @example\n}\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "A directive may be defined as repeatable by including the “repeatable” keyword. Repeatable directives are often useful when the same directive should be used with different arguments at a single location, especially in cases where additional information needs to be provided to a type or schema extension via a directive:"
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": "graphql",
                  "example": true,
                  "counter": false,
                  "code": "directive @delegateField(name: String!) repeatable on OBJECT | INTERFACE\n\ntype Book @delegateField(name: \"pageCount\") @delegateField(name: \"author\") {\n  id: ID!\n}\n\nextend type Book @delegateField(name: \"index\")\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "While defining a directive, it must not reference itself directly or indirectly:"
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": "graphql",
                  "example": true,
                  "counter": true,
                  "code": "directive @invalidExample(arg: String @invalidExample) on ARGUMENT_DEFINITION\n"
                },
                {
                  "type": "Note",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "The order in which directives appear may be significant, including repeatable directives."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Subsection",
              "header": {
                "type": "Subheader",
                "title": "Validation"
              },
              "contents": [
                {
                  "type": "List",
                  "ordered": true,
                  "items": [
                    {
                      "type": "ListItem",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "A directive definition must not contain the use of a directive which references itself directly."
                        }
                      ]
                    },
                    {
                      "type": "ListItem",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "A directive definition must not contain the use of a directive which references itself indirectly by referencing a Type or Directive which transitively includes a reference to this directive."
                        }
                      ]
                    },
                    {
                      "type": "ListItem",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "The directive must not have a name which begins with the characters "
                        },
                        {
                          "type": "StringLiteral",
                          "value": "\"__\""
                        },
                        {
                          "type": "Text",
                          "value": " (two underscores)."
                        }
                      ]
                    },
                    {
                      "type": "ListItem",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "For each argument of the directive:"
                        },
                        {
                          "type": "List",
                          "ordered": true,
                          "items": [
                            {
                              "type": "ListItem",
                              "contents": [
                                {
                                  "type": "Text",
                                  "value": "The argument must not have a name which begins with the characters "
                                },
                                {
                                  "type": "StringLiteral",
                                  "value": "\"__\""
                                },
                                {
                                  "type": "Text",
                                  "value": " (two underscores)."
                                }
                              ]
                            },
                            {
                              "type": "ListItem",
                              "contents": [
                                {
                                  "type": "Text",
                                  "value": "The argument must accept a type where "
                                },
                                {
                                  "type": "Call",
                                  "name": "IsInputType",
                                  "args": [
                                    {
                                      "type": "Variable",
                                      "name": "argumentType"
                                    }
                                  ]
                                },
                                {
                                  "type": "Text",
                                  "value": " returns "
                                },
                                {
                                  "type": "Keyword",
                                  "value": "true"
                                },
                                {
                                  "type": "Text",
                                  "value": "."
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "@skip"
              },
              "contents": [
                {
                  "type": "Code",
                  "raw": false,
                  "lang": "graphql",
                  "example": false,
                  "counter": false,
                  "code": "directive @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "The "
                    },
                    {
                      "type": "InlineCode",
                      "code": "@skip"
                    },
                    {
                      "type": "Text",
                      "value": " directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "In this example "
                    },
                    {
                      "type": "InlineCode",
                      "code": "experimentalField"
                    },
                    {
                      "type": "Text",
                      "value": " will only be queried if the variable "
                    },
                    {
                      "type": "InlineCode",
                      "code": "$someTest"
                    },
                    {
                      "type": "Text",
                      "value": " has the value "
                    },
                    {
                      "type": "InlineCode",
                      "code": "false"
                    },
                    {
                      "type": "Text",
                      "value": "."
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": "graphql",
                  "example": true,
                  "counter": false,
                  "code": "query myQuery($someTest: Boolean!) {\n  experimentalField @skip(if: $someTest)\n}\n"
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "@include"
              },
              "contents": [
                {
                  "type": "Code",
                  "raw": false,
                  "lang": "graphql",
                  "example": false,
                  "counter": false,
                  "code": "directive @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "The "
                    },
                    {
                      "type": "InlineCode",
                      "code": "@include"
                    },
                    {
                      "type": "Text",
                      "value": " directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "In this example "
                    },
                    {
                      "type": "InlineCode",
                      "code": "experimentalField"
                    },
                    {
                      "type": "Text",
                      "value": " will only be queried if the variable "
                    },
                    {
                      "type": "InlineCode",
                      "code": "$someTest"
                    },
                    {
                      "type": "Text",
                      "value": " has the value "
                    },
                    {
                      "type": "InlineCode",
                      "code": "true"
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": "graphql",
                  "example": true,
                  "counter": false,
                  "code": "query myQuery($someTest: Boolean!) {\n  experimentalField @include(if: $someTest)\n}\n"
                },
                {
                  "type": "Note",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Neither "
                    },
                    {
                      "type": "InlineCode",
                      "code": "@skip"
                    },
                    {
                      "type": "Text",
                      "value": " nor "
                    },
                    {
                      "type": "InlineCode",
                      "code": "@include"
                    },
                    {
                      "type": "Text",
                      "value": " has precedence over the other. In the case that both the "
                    },
                    {
                      "type": "InlineCode",
                      "code": "@skip"
                    },
                    {
                      "type": "Text",
                      "value": " and "
                    },
                    {
                      "type": "InlineCode",
                      "code": "@include"
                    },
                    {
                      "type": "Text",
                      "value": " directives are provided on the same field or fragment, it "
                    },
                    {
                      "type": "Italic",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "must"
                        }
                      ]
                    },
                    {
                      "type": "Text",
                      "value": " be queried only if the "
                    },
                    {
                      "type": "InlineCode",
                      "code": "@skip"
                    },
                    {
                      "type": "Text",
                      "value": " condition is false "
                    },
                    {
                      "type": "Italic",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "and"
                        }
                      ]
                    },
                    {
                      "type": "Text",
                      "value": " the "
                    },
                    {
                      "type": "InlineCode",
                      "code": "@include"
                    },
                    {
                      "type": "Text",
                      "value": " condition is true. Stated conversely, the field or fragment must "
                    },
                    {
                      "type": "Italic",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "not"
                        }
                      ]
                    },
                    {
                      "type": "Text",
                      "value": " be queried if either the "
                    },
                    {
                      "type": "InlineCode",
                      "code": "@skip"
                    },
                    {
                      "type": "Text",
                      "value": " condition is true "
                    },
                    {
                      "type": "Italic",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "or"
                        }
                      ]
                    },
                    {
                      "type": "Text",
                      "value": " the "
                    },
                    {
                      "type": "InlineCode",
                      "code": "@include"
                    },
                    {
                      "type": "Text",
                      "value": " condition is false."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "@deprecated"
              },
              "contents": [
                {
                  "type": "Code",
                  "raw": false,
                  "lang": "graphql",
                  "example": false,
                  "counter": false,
                  "code": "directive @deprecated(\n  reason: String = \"No longer supported\"\n) on FIELD_DEFINITION | ENUM_VALUE\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "The "
                    },
                    {
                      "type": "InlineCode",
                      "code": "@deprecated"
                    },
                    {
                      "type": "Text",
                      "value": " directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema, such as deprecated fields on a type or deprecated enum values."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Deprecations include a reason for why it is deprecated, which is formatted using Markdown syntax (as specified by "
                    },
                    {
                      "type": "Link",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "CommonMark"
                        }
                      ],
                      "url": "https://commonmark.org/"
                    },
                    {
                      "type": "Text",
                      "value": ")."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "In this example type definition, "
                    },
                    {
                      "type": "InlineCode",
                      "code": "oldField"
                    },
                    {
                      "type": "Text",
                      "value": " is deprecated in favor of using "
                    },
                    {
                      "type": "InlineCode",
                      "code": "newField"
                    },
                    {
                      "type": "Text",
                      "value": "."
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": "graphql",
                  "example": true,
                  "counter": false,
                  "code": "type ExampleType {\n  newField: String\n  oldField: String @deprecated(reason: \"Use `newField`.\")\n}\n"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "Section",
      "header": {
        "type": "Header",
        "level": 1,
        "secID": null,
        "title": "Introspection"
      },
      "contents": [
        {
          "type": "Paragraph",
          "contents": [
            {
              "type": "Text",
              "value": "A GraphQL service supports introspection over its schema. This schema is queried using GraphQL itself, creating a powerful platform for tool-building."
            }
          ]
        },
        {
          "type": "Paragraph",
          "contents": [
            {
              "type": "Text",
              "value": "Take an example query for a trivial app. In this case there is a User type with three fields: id, name, and birthday."
            }
          ]
        },
        {
          "type": "Paragraph",
          "contents": [
            {
              "type": "Text",
              "value": "For example, given a service with the following type definition:"
            }
          ]
        },
        {
          "type": "Code",
          "raw": false,
          "lang": "graphql",
          "example": true,
          "counter": false,
          "code": "type User {\n  id: String\n  name: String\n  birthday: Date\n}\n"
        },
        {
          "type": "Paragraph",
          "contents": [
            {
              "type": "Text",
              "value": "The query"
            }
          ]
        },
        {
          "type": "Code",
          "raw": false,
          "lang": "graphql",
          "example": true,
          "counter": false,
          "code": "{\n  __type(name: \"User\") {\n    name\n    fields {\n      name\n      type {\n        name\n      }\n    }\n  }\n}\n"
        },
        {
          "type": "Paragraph",
          "contents": [
            {
              "type": "Text",
              "value": "would return"
            }
          ]
        },
        {
          "type": "Code",
          "raw": false,
          "lang": "json",
          "example": true,
          "counter": false,
          "code": "{\n  \"__type\": {\n    \"name\": \"User\",\n    \"fields\": [\n      {\n        \"name\": \"id\",\n        \"type\": { \"name\": \"String\" }\n      },\n      {\n        \"name\": \"name\",\n        \"type\": { \"name\": \"String\" }\n      },\n      {\n        \"name\": \"birthday\",\n        \"type\": { \"name\": \"Date\" }\n      },\n    ]\n  }\n}\n"
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Reserved Names"
          },
          "contents": [
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Types and fields required by the GraphQL introspection system that are used in the same context as user-defined types and fields are prefixed with "
                },
                {
                  "type": "StringLiteral",
                  "value": "\"__\""
                },
                {
                  "type": "Text",
                  "value": " two underscores. This in order to avoid naming collisions with user-defined GraphQL types. Conversely, GraphQL type system authors must not define any types, fields, arguments, or any other type system artifact with two leading underscores."
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Documentation"
          },
          "contents": [
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "All types in the introspection system provide a "
                },
                {
                  "type": "InlineCode",
                  "code": "description"
                },
                {
                  "type": "Text",
                  "value": " field of type "
                },
                {
                  "type": "InlineCode",
                  "code": "String"
                },
                {
                  "type": "Text",
                  "value": " to allow type designers to publish documentation in addition to capabilities. A GraphQL service may return the "
                },
                {
                  "type": "InlineCode",
                  "code": "description"
                },
                {
                  "type": "Text",
                  "value": " field using Markdown syntax (as specified by "
                },
                {
                  "type": "Link",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "CommonMark"
                    }
                  ],
                  "url": "https://commonmark.org/"
                },
                {
                  "type": "Text",
                  "value": "). Therefore it is recommended that any tool that displays "
                },
                {
                  "type": "InlineCode",
                  "code": "description"
                },
                {
                  "type": "Text",
                  "value": " use a CommonMark-compliant Markdown renderer."
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Deprecation"
          },
          "contents": [
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "To support the management of backwards compatibility, GraphQL fields and enum values can indicate whether or not they are deprecated ("
                },
                {
                  "type": "InlineCode",
                  "code": "isDeprecated: Boolean"
                },
                {
                  "type": "Text",
                  "value": ") and a description of why it is deprecated ("
                },
                {
                  "type": "InlineCode",
                  "code": "deprecationReason: String"
                },
                {
                  "type": "Text",
                  "value": ")."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Tools built using GraphQL introspection should respect deprecation by discouraging deprecated use through information hiding or developer-facing warnings."
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Type Name Introspection"
          },
          "contents": [
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "GraphQL supports type name introspection at any point within a query by the meta-field "
                },
                {
                  "type": "InlineCode",
                  "code": "__typename: String!"
                },
                {
                  "type": "Text",
                  "value": " when querying against any Object, Interface, or Union. It returns the name of the object type currently being queried."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "This is most often used when querying against Interface or Union types to identify which actual type of the possible types has been returned."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "This field is implicit and does not appear in the fields list in any defined type."
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Schema Introspection"
          },
          "contents": [
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "The schema introspection system is accessible from the meta-fields "
                },
                {
                  "type": "InlineCode",
                  "code": "__schema"
                },
                {
                  "type": "Text",
                  "value": " and "
                },
                {
                  "type": "InlineCode",
                  "code": "__type"
                },
                {
                  "type": "Text",
                  "value": " which are accessible from the type of the root of a query operation."
                }
              ]
            },
            {
              "type": "Code",
              "raw": false,
              "lang": "graphql",
              "example": false,
              "counter": false,
              "code": "__schema: __Schema!\n__type(name: String!): __Type\n"
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "These fields are implicit and do not appear in the fields list in the root type of the query operation."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "The schema of the GraphQL schema introspection system:"
                }
              ]
            },
            {
              "type": "Code",
              "raw": false,
              "lang": "graphql",
              "example": false,
              "counter": false,
              "code": "type __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n\n  # should be non-null for OBJECT and INTERFACE only, must be null for the others\n  fields(includeDeprecated: Boolean = false): [__Field!]\n\n  # should be non-null for OBJECT and INTERFACE only, must be null for the others\n  interfaces: [__Type!]\n\n  # should be non-null for INTERFACE and UNION only, always null for the others\n  possibleTypes: [__Type!]\n\n  # should be non-null for ENUM only, must be null for the others\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n\n  # should be non-null for INPUT_OBJECT only, must be null for the others\n  inputFields: [__InputValue!]\n\n  # should be non-null for NON_NULL and LIST only, must be null for the others\n  ofType: __Type\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n"
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "The __Type Type"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "InlineCode",
                      "code": "__Type"
                    },
                    {
                      "type": "Text",
                      "value": " is at the core of the type introspection system. It represents scalars, interfaces, object types, unions, enums, input objects types in the system."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "InlineCode",
                      "code": "__Type"
                    },
                    {
                      "type": "Text",
                      "value": " also represents type modifiers, which are used to modify a type that it refers to ("
                    },
                    {
                      "type": "InlineCode",
                      "code": "ofType: __Type"
                    },
                    {
                      "type": "Text",
                      "value": "). This is how we represent lists, non-nullable types, and the combinations thereof."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Type Kinds"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "There are several different kinds of type. In each kind, different fields are actually valid. These kinds are listed in the "
                    },
                    {
                      "type": "InlineCode",
                      "code": "__TypeKind"
                    },
                    {
                      "type": "Text",
                      "value": " enumeration."
                    }
                  ]
                },
                {
                  "type": "Section",
                  "header": {
                    "type": "Header",
                    "level": 4,
                    "secID": null,
                    "title": "Scalar"
                  },
                  "contents": [
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Represents scalar types such as Int, String, and Boolean. Scalars cannot have fields."
                        }
                      ]
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "A GraphQL type designer should describe the data format and scalar coercion rules in the description field of any scalar."
                        }
                      ]
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Fields"
                        }
                      ]
                    },
                    {
                      "type": "List",
                      "ordered": false,
                      "items": [
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "InlineCode",
                              "code": "kind"
                            },
                            {
                              "type": "Text",
                              "value": " must return "
                            },
                            {
                              "type": "InlineCode",
                              "code": "__TypeKind.SCALAR"
                            },
                            {
                              "type": "Text",
                              "value": "."
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "InlineCode",
                              "code": "name"
                            },
                            {
                              "type": "Text",
                              "value": " must return a String."
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "InlineCode",
                              "code": "description"
                            },
                            {
                              "type": "Text",
                              "value": " may return a String or "
                            },
                            {
                              "type": "Keyword",
                              "value": "null"
                            },
                            {
                              "type": "Text",
                              "value": "."
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "All other fields must return "
                            },
                            {
                              "type": "Keyword",
                              "value": "null"
                            },
                            {
                              "type": "Text",
                              "value": "."
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "Section",
                  "header": {
                    "type": "Header",
                    "level": 4,
                    "secID": null,
                    "title": "Object"
                  },
                  "contents": [
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Object types represent concrete instantiations of sets of fields. The introspection types (e.g. "
                        },
                        {
                          "type": "InlineCode",
                          "code": "__Type"
                        },
                        {
                          "type": "Text",
                          "value": ", "
                        },
                        {
                          "type": "InlineCode",
                          "code": "__Field"
                        },
                        {
                          "type": "Text",
                          "value": ", etc) are examples of objects."
                        }
                      ]
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Fields"
                        }
                      ]
                    },
                    {
                      "type": "List",
                      "ordered": false,
                      "items": [
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "InlineCode",
                              "code": "kind"
                            },
                            {
                              "type": "Text",
                              "value": " must return "
                            },
                            {
                              "type": "InlineCode",
                              "code": "__TypeKind.OBJECT"
                            },
                            {
                              "type": "Text",
                              "value": "."
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "InlineCode",
                              "code": "name"
                            },
                            {
                              "type": "Text",
                              "value": " must return a String."
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "InlineCode",
                              "code": "description"
                            },
                            {
                              "type": "Text",
                              "value": " may return a String or "
                            },
                            {
                              "type": "Keyword",
                              "value": "null"
                            },
                            {
                              "type": "Text",
                              "value": "."
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "InlineCode",
                              "code": "fields"
                            },
                            {
                              "type": "Text",
                              "value": ": The set of fields query-able on this type."
                            },
                            {
                              "type": "List",
                              "ordered": false,
                              "items": [
                                {
                                  "type": "ListItem",
                                  "contents": [
                                    {
                                      "type": "Text",
                                      "value": "Accepts the argument "
                                    },
                                    {
                                      "type": "InlineCode",
                                      "code": "includeDeprecated"
                                    },
                                    {
                                      "type": "Text",
                                      "value": " which defaults to "
                                    },
                                    {
                                      "type": "Keyword",
                                      "value": "false"
                                    },
                                    {
                                      "type": "Text",
                                      "value": ". If "
                                    },
                                    {
                                      "type": "Keyword",
                                      "value": "true"
                                    },
                                    {
                                      "type": "Text",
                                      "value": ", deprecated fields are also returned."
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "InlineCode",
                              "code": "interfaces"
                            },
                            {
                              "type": "Text",
                              "value": ": The set of interfaces that an object implements."
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "All other fields must return "
                            },
                            {
                              "type": "Keyword",
                              "value": "null"
                            },
                            {
                              "type": "Text",
                              "value": "."
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "Section",
                  "header": {
                    "type": "Header",
                    "level": 4,
                    "secID": null,
                    "title": "Union"
                  },
                  "contents": [
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Unions are an abstract type where no common fields are declared. The possible types of a union are explicitly listed out in "
                        },
                        {
                          "type": "InlineCode",
                          "code": "possibleTypes"
                        },
                        {
                          "type": "Text",
                          "value": ". Types can be made parts of unions without modification of that type."
                        }
                      ]
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Fields"
                        }
                      ]
                    },
                    {
                      "type": "List",
                      "ordered": false,
                      "items": [
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "InlineCode",
                              "code": "kind"
                            },
                            {
                              "type": "Text",
                              "value": " must return "
                            },
                            {
                              "type": "InlineCode",
                              "code": "__TypeKind.UNION"
                            },
                            {
                              "type": "Text",
                              "value": "."
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "InlineCode",
                              "code": "name"
                            },
                            {
                              "type": "Text",
                              "value": " must return a String."
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "InlineCode",
                              "code": "description"
                            },
                            {
                              "type": "Text",
                              "value": " may return a String or "
                            },
                            {
                              "type": "Keyword",
                              "value": "null"
                            },
                            {
                              "type": "Text",
                              "value": "."
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "InlineCode",
                              "code": "possibleTypes"
                            },
                            {
                              "type": "Text",
                              "value": " returns the list of types that can be represented within this union. They must be object types."
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "All other fields must return "
                            },
                            {
                              "type": "Keyword",
                              "value": "null"
                            },
                            {
                              "type": "Text",
                              "value": "."
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "Section",
                  "header": {
                    "type": "Header",
                    "level": 4,
                    "secID": null,
                    "title": "Interface"
                  },
                  "contents": [
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Interfaces are an abstract type where there are common fields declared. Any type that implements an interface must define all the fields with names and types exactly matching. The implementations of this interface are explicitly listed out in "
                        },
                        {
                          "type": "InlineCode",
                          "code": "possibleTypes"
                        },
                        {
                          "type": "Text",
                          "value": "."
                        }
                      ]
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Fields"
                        }
                      ]
                    },
                    {
                      "type": "List",
                      "ordered": false,
                      "items": [
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "InlineCode",
                              "code": "kind"
                            },
                            {
                              "type": "Text",
                              "value": " must return "
                            },
                            {
                              "type": "InlineCode",
                              "code": "__TypeKind.INTERFACE"
                            },
                            {
                              "type": "Text",
                              "value": "."
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "InlineCode",
                              "code": "name"
                            },
                            {
                              "type": "Text",
                              "value": " must return a String."
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "InlineCode",
                              "code": "description"
                            },
                            {
                              "type": "Text",
                              "value": " may return a String or "
                            },
                            {
                              "type": "Keyword",
                              "value": "null"
                            },
                            {
                              "type": "Text",
                              "value": "."
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "InlineCode",
                              "code": "fields"
                            },
                            {
                              "type": "Text",
                              "value": ": The set of fields required by this interface."
                            },
                            {
                              "type": "List",
                              "ordered": false,
                              "items": [
                                {
                                  "type": "ListItem",
                                  "contents": [
                                    {
                                      "type": "Text",
                                      "value": "Accepts the argument "
                                    },
                                    {
                                      "type": "InlineCode",
                                      "code": "includeDeprecated"
                                    },
                                    {
                                      "type": "Text",
                                      "value": " which defaults to "
                                    },
                                    {
                                      "type": "Keyword",
                                      "value": "false"
                                    },
                                    {
                                      "type": "Text",
                                      "value": ". If "
                                    },
                                    {
                                      "type": "Keyword",
                                      "value": "true"
                                    },
                                    {
                                      "type": "Text",
                                      "value": ", deprecated fields are also returned."
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "InlineCode",
                              "code": "interfaces"
                            },
                            {
                              "type": "Text",
                              "value": ": The set of interfaces that this interface implements."
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "InlineCode",
                              "code": "possibleTypes"
                            },
                            {
                              "type": "Text",
                              "value": " returns the list of types that implement this interface. They must be object types."
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "All other fields must return "
                            },
                            {
                              "type": "Keyword",
                              "value": "null"
                            },
                            {
                              "type": "Text",
                              "value": "."
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "Section",
                  "header": {
                    "type": "Header",
                    "level": 4,
                    "secID": null,
                    "title": "Enum"
                  },
                  "contents": [
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Enums are special scalars that can only have a defined set of values."
                        }
                      ]
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Fields"
                        }
                      ]
                    },
                    {
                      "type": "List",
                      "ordered": false,
                      "items": [
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "InlineCode",
                              "code": "kind"
                            },
                            {
                              "type": "Text",
                              "value": " must return "
                            },
                            {
                              "type": "InlineCode",
                              "code": "__TypeKind.ENUM"
                            },
                            {
                              "type": "Text",
                              "value": "."
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "InlineCode",
                              "code": "name"
                            },
                            {
                              "type": "Text",
                              "value": " must return a String."
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "InlineCode",
                              "code": "description"
                            },
                            {
                              "type": "Text",
                              "value": " may return a String or "
                            },
                            {
                              "type": "Keyword",
                              "value": "null"
                            },
                            {
                              "type": "Text",
                              "value": "."
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "InlineCode",
                              "code": "enumValues"
                            },
                            {
                              "type": "Text",
                              "value": ": The list of "
                            },
                            {
                              "type": "InlineCode",
                              "code": "EnumValue"
                            },
                            {
                              "type": "Text",
                              "value": ". There must be at least one and they must have unique names."
                            },
                            {
                              "type": "List",
                              "ordered": false,
                              "items": [
                                {
                                  "type": "ListItem",
                                  "contents": [
                                    {
                                      "type": "Text",
                                      "value": "Accepts the argument "
                                    },
                                    {
                                      "type": "InlineCode",
                                      "code": "includeDeprecated"
                                    },
                                    {
                                      "type": "Text",
                                      "value": " which defaults to "
                                    },
                                    {
                                      "type": "Keyword",
                                      "value": "false"
                                    },
                                    {
                                      "type": "Text",
                                      "value": ". If "
                                    },
                                    {
                                      "type": "Keyword",
                                      "value": "true"
                                    },
                                    {
                                      "type": "Text",
                                      "value": ", deprecated enum values are also returned."
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "All other fields must return "
                            },
                            {
                              "type": "Keyword",
                              "value": "null"
                            },
                            {
                              "type": "Text",
                              "value": "."
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "Section",
                  "header": {
                    "type": "Header",
                    "level": 4,
                    "secID": null,
                    "title": "Input Object"
                  },
                  "contents": [
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Input objects are composite types used as inputs into queries defined as a list of named input values."
                        }
                      ]
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "For example the input object "
                        },
                        {
                          "type": "InlineCode",
                          "code": "Point"
                        },
                        {
                          "type": "Text",
                          "value": " could be defined as:"
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": "graphql",
                      "example": true,
                      "counter": false,
                      "code": "input Point {\n  x: Int\n  y: Int\n}\n"
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Fields"
                        }
                      ]
                    },
                    {
                      "type": "List",
                      "ordered": false,
                      "items": [
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "InlineCode",
                              "code": "kind"
                            },
                            {
                              "type": "Text",
                              "value": " must return "
                            },
                            {
                              "type": "InlineCode",
                              "code": "__TypeKind.INPUT_OBJECT"
                            },
                            {
                              "type": "Text",
                              "value": "."
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "InlineCode",
                              "code": "name"
                            },
                            {
                              "type": "Text",
                              "value": " must return a String."
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "InlineCode",
                              "code": "description"
                            },
                            {
                              "type": "Text",
                              "value": " may return a String or "
                            },
                            {
                              "type": "Keyword",
                              "value": "null"
                            },
                            {
                              "type": "Text",
                              "value": "."
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "InlineCode",
                              "code": "inputFields"
                            },
                            {
                              "type": "Text",
                              "value": ": a list of "
                            },
                            {
                              "type": "InlineCode",
                              "code": "InputValue"
                            },
                            {
                              "type": "Text",
                              "value": "."
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "All other fields must return "
                            },
                            {
                              "type": "Keyword",
                              "value": "null"
                            },
                            {
                              "type": "Text",
                              "value": "."
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "Section",
                  "header": {
                    "type": "Header",
                    "level": 4,
                    "secID": null,
                    "title": "List"
                  },
                  "contents": [
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Lists represent sequences of values in GraphQL. A List type is a type modifier: it wraps another type instance in the "
                        },
                        {
                          "type": "InlineCode",
                          "code": "ofType"
                        },
                        {
                          "type": "Text",
                          "value": " field, which defines the type of each item in the list."
                        }
                      ]
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Fields"
                        }
                      ]
                    },
                    {
                      "type": "List",
                      "ordered": false,
                      "items": [
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "InlineCode",
                              "code": "kind"
                            },
                            {
                              "type": "Text",
                              "value": " must return "
                            },
                            {
                              "type": "InlineCode",
                              "code": "__TypeKind.LIST"
                            },
                            {
                              "type": "Text",
                              "value": "."
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "InlineCode",
                              "code": "ofType"
                            },
                            {
                              "type": "Text",
                              "value": ": Any type."
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "All other fields must return "
                            },
                            {
                              "type": "Keyword",
                              "value": "null"
                            },
                            {
                              "type": "Text",
                              "value": "."
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "Section",
                  "header": {
                    "type": "Header",
                    "level": 4,
                    "secID": null,
                    "title": "Non-Null"
                  },
                  "contents": [
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "GraphQL types are nullable. The value "
                        },
                        {
                          "type": "Keyword",
                          "value": "null"
                        },
                        {
                          "type": "Text",
                          "value": " is a valid response for field type."
                        }
                      ]
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "A Non-null type is a type modifier: it wraps another type instance in the "
                        },
                        {
                          "type": "InlineCode",
                          "code": "ofType"
                        },
                        {
                          "type": "Text",
                          "value": " field. Non-null types do not allow "
                        },
                        {
                          "type": "Keyword",
                          "value": "null"
                        },
                        {
                          "type": "Text",
                          "value": " as a response, and indicate required inputs for arguments and input object fields."
                        }
                      ]
                    },
                    {
                      "type": "List",
                      "ordered": false,
                      "items": [
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "InlineCode",
                              "code": "kind"
                            },
                            {
                              "type": "Text",
                              "value": " must return "
                            },
                            {
                              "type": "InlineCode",
                              "code": "__TypeKind.NON_NULL"
                            },
                            {
                              "type": "Text",
                              "value": "."
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "InlineCode",
                              "code": "ofType"
                            },
                            {
                              "type": "Text",
                              "value": ": Any type except Non-null."
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "All other fields must return "
                            },
                            {
                              "type": "Keyword",
                              "value": "null"
                            },
                            {
                              "type": "Text",
                              "value": "."
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "The __Field Type"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "The "
                    },
                    {
                      "type": "InlineCode",
                      "code": "__Field"
                    },
                    {
                      "type": "Text",
                      "value": " type represents each field in an Object or Interface type."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Fields"
                    }
                  ]
                },
                {
                  "type": "List",
                  "ordered": false,
                  "items": [
                    {
                      "type": "ListItem",
                      "contents": [
                        {
                          "type": "InlineCode",
                          "code": "name"
                        },
                        {
                          "type": "Text",
                          "value": " must return a String"
                        }
                      ]
                    },
                    {
                      "type": "ListItem",
                      "contents": [
                        {
                          "type": "InlineCode",
                          "code": "description"
                        },
                        {
                          "type": "Text",
                          "value": " may return a String or "
                        },
                        {
                          "type": "Keyword",
                          "value": "null"
                        }
                      ]
                    },
                    {
                      "type": "ListItem",
                      "contents": [
                        {
                          "type": "InlineCode",
                          "code": "args"
                        },
                        {
                          "type": "Text",
                          "value": " returns a List of "
                        },
                        {
                          "type": "InlineCode",
                          "code": "__InputValue"
                        },
                        {
                          "type": "Text",
                          "value": " representing the arguments this field accepts."
                        }
                      ]
                    },
                    {
                      "type": "ListItem",
                      "contents": [
                        {
                          "type": "InlineCode",
                          "code": "type"
                        },
                        {
                          "type": "Text",
                          "value": " must return a "
                        },
                        {
                          "type": "InlineCode",
                          "code": "__Type"
                        },
                        {
                          "type": "Text",
                          "value": " that represents the type of value returned by this field."
                        }
                      ]
                    },
                    {
                      "type": "ListItem",
                      "contents": [
                        {
                          "type": "InlineCode",
                          "code": "isDeprecated"
                        },
                        {
                          "type": "Text",
                          "value": " returns "
                        },
                        {
                          "type": "Keyword",
                          "value": "true"
                        },
                        {
                          "type": "Text",
                          "value": " if this field should no longer be used, otherwise "
                        },
                        {
                          "type": "Keyword",
                          "value": "false"
                        },
                        {
                          "type": "Text",
                          "value": "."
                        }
                      ]
                    },
                    {
                      "type": "ListItem",
                      "contents": [
                        {
                          "type": "InlineCode",
                          "code": "deprecationReason"
                        },
                        {
                          "type": "Text",
                          "value": " optionally provides a reason why this field is deprecated."
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "The __InputValue Type"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "The "
                    },
                    {
                      "type": "InlineCode",
                      "code": "__InputValue"
                    },
                    {
                      "type": "Text",
                      "value": " type represents field and directive arguments as well as the "
                    },
                    {
                      "type": "InlineCode",
                      "code": "inputFields"
                    },
                    {
                      "type": "Text",
                      "value": " of an input object."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Fields"
                    }
                  ]
                },
                {
                  "type": "List",
                  "ordered": false,
                  "items": [
                    {
                      "type": "ListItem",
                      "contents": [
                        {
                          "type": "InlineCode",
                          "code": "name"
                        },
                        {
                          "type": "Text",
                          "value": " must return a String"
                        }
                      ]
                    },
                    {
                      "type": "ListItem",
                      "contents": [
                        {
                          "type": "InlineCode",
                          "code": "description"
                        },
                        {
                          "type": "Text",
                          "value": " may return a String or "
                        },
                        {
                          "type": "Keyword",
                          "value": "null"
                        }
                      ]
                    },
                    {
                      "type": "ListItem",
                      "contents": [
                        {
                          "type": "InlineCode",
                          "code": "type"
                        },
                        {
                          "type": "Text",
                          "value": " must return a "
                        },
                        {
                          "type": "InlineCode",
                          "code": "__Type"
                        },
                        {
                          "type": "Text",
                          "value": " that represents the type this input value expects."
                        }
                      ]
                    },
                    {
                      "type": "ListItem",
                      "contents": [
                        {
                          "type": "InlineCode",
                          "code": "defaultValue"
                        },
                        {
                          "type": "Text",
                          "value": " may return a String encoding (using the GraphQL language) of the default value used by this input value in the condition a value is not provided at runtime. If this input value has no default value, returns "
                        },
                        {
                          "type": "Keyword",
                          "value": "null"
                        },
                        {
                          "type": "Text",
                          "value": "."
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "The __EnumValue Type"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "The "
                    },
                    {
                      "type": "InlineCode",
                      "code": "__EnumValue"
                    },
                    {
                      "type": "Text",
                      "value": " type represents one of possible values of an enum."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Fields"
                    }
                  ]
                },
                {
                  "type": "List",
                  "ordered": false,
                  "items": [
                    {
                      "type": "ListItem",
                      "contents": [
                        {
                          "type": "InlineCode",
                          "code": "name"
                        },
                        {
                          "type": "Text",
                          "value": " must return a String"
                        }
                      ]
                    },
                    {
                      "type": "ListItem",
                      "contents": [
                        {
                          "type": "InlineCode",
                          "code": "description"
                        },
                        {
                          "type": "Text",
                          "value": " may return a String or "
                        },
                        {
                          "type": "Keyword",
                          "value": "null"
                        }
                      ]
                    },
                    {
                      "type": "ListItem",
                      "contents": [
                        {
                          "type": "InlineCode",
                          "code": "isDeprecated"
                        },
                        {
                          "type": "Text",
                          "value": " returns "
                        },
                        {
                          "type": "Keyword",
                          "value": "true"
                        },
                        {
                          "type": "Text",
                          "value": " if this enum value should no longer be used, otherwise "
                        },
                        {
                          "type": "Keyword",
                          "value": "false"
                        },
                        {
                          "type": "Text",
                          "value": "."
                        }
                      ]
                    },
                    {
                      "type": "ListItem",
                      "contents": [
                        {
                          "type": "InlineCode",
                          "code": "deprecationReason"
                        },
                        {
                          "type": "Text",
                          "value": " optionally provides a reason why this enum value is deprecated."
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "The __Directive Type"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "The "
                    },
                    {
                      "type": "InlineCode",
                      "code": "__Directive"
                    },
                    {
                      "type": "Text",
                      "value": " type represents a Directive that a service supports."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Fields"
                    }
                  ]
                },
                {
                  "type": "List",
                  "ordered": false,
                  "items": [
                    {
                      "type": "ListItem",
                      "contents": [
                        {
                          "type": "InlineCode",
                          "code": "name"
                        },
                        {
                          "type": "Text",
                          "value": " must return a String"
                        }
                      ]
                    },
                    {
                      "type": "ListItem",
                      "contents": [
                        {
                          "type": "InlineCode",
                          "code": "description"
                        },
                        {
                          "type": "Text",
                          "value": " may return a String or "
                        },
                        {
                          "type": "Keyword",
                          "value": "null"
                        }
                      ]
                    },
                    {
                      "type": "ListItem",
                      "contents": [
                        {
                          "type": "InlineCode",
                          "code": "locations"
                        },
                        {
                          "type": "Text",
                          "value": " returns a List of "
                        },
                        {
                          "type": "InlineCode",
                          "code": "__DirectiveLocation"
                        },
                        {
                          "type": "Text",
                          "value": " representing the valid locations this directive may be placed."
                        }
                      ]
                    },
                    {
                      "type": "ListItem",
                      "contents": [
                        {
                          "type": "InlineCode",
                          "code": "args"
                        },
                        {
                          "type": "Text",
                          "value": " returns a List of "
                        },
                        {
                          "type": "InlineCode",
                          "code": "__InputValue"
                        },
                        {
                          "type": "Text",
                          "value": " representing the arguments this directive accepts."
                        }
                      ]
                    },
                    {
                      "type": "ListItem",
                      "contents": [
                        {
                          "type": "InlineCode",
                          "code": "isRepeatable"
                        },
                        {
                          "type": "Text",
                          "value": " must return a Boolean that indicates if the directive may be used repeatedly at a single location. "
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "Section",
      "header": {
        "type": "Header",
        "level": 1,
        "secID": null,
        "title": "Validation"
      },
      "contents": [
        {
          "type": "Paragraph",
          "contents": [
            {
              "type": "Text",
              "value": "GraphQL does not just verify if a request is syntactically correct, but also ensures that it is unambiguous and mistake-free in the context of a given GraphQL schema."
            }
          ]
        },
        {
          "type": "Paragraph",
          "contents": [
            {
              "type": "Text",
              "value": "An invalid request is still technically executable, and will always produce a stable result as defined by the algorithms in the Execution section, however that result may be ambiguous, surprising, or unexpected relative to a request containing validation errors, so execution should only occur for valid requests."
            }
          ]
        },
        {
          "type": "Paragraph",
          "contents": [
            {
              "type": "Text",
              "value": "Typically validation is performed in the context of a request immediately before execution, however a GraphQL service may execute a request without explicitly validating it if that exact same request is known to have been validated before. For example: the request may be validated during development, provided it does not later change, or a service may validate a request once and memoize the result to avoid validating the same request again in the future. Any client-side or development-time tool should report validation errors and not allow the formulation or execution of requests known to be invalid at that given point in time."
            }
          ]
        },
        {
          "type": "Subsection",
          "header": {
            "type": "Subheader",
            "title": "Type system evolution"
          },
          "contents": [
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "As GraphQL type system schema evolves over time by adding new types and new fields, it is possible that a request which was previously valid could later become invalid. Any change that can cause a previously valid request to become invalid is considered a "
                },
                {
                  "type": "Italic",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "breaking change"
                    }
                  ]
                },
                {
                  "type": "Text",
                  "value": ". GraphQL services and schema maintainers are encouraged to avoid breaking changes, however in order to be more resilient to these breaking changes, sophisticated GraphQL systems may still allow for the execution of requests which "
                },
                {
                  "type": "Italic",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "at some point"
                    }
                  ]
                },
                {
                  "type": "Text",
                  "value": " were known to be free of any validation errors, and have not changed since."
                }
              ]
            }
          ]
        },
        {
          "type": "Subsection",
          "header": {
            "type": "Subheader",
            "title": "Examples"
          },
          "contents": [
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "For this section of this schema, we will assume the following type system in order to demonstrate examples:"
                }
              ]
            },
            {
              "type": "Code",
              "raw": false,
              "lang": "graphql",
              "example": true,
              "counter": false,
              "code": "type Query {\n  dog: Dog\n}\n\nenum DogCommand { SIT, DOWN, HEEL }\n\ntype Dog implements Pet {\n  name: String!\n  nickname: String\n  barkVolume: Int\n  doesKnowCommand(dogCommand: DogCommand!): Boolean!\n  isHousetrained(atOtherHomes: Boolean): Boolean!\n  owner: Human\n}\n\ninterface Sentient {\n  name: String!\n}\n\ninterface Pet {\n  name: String!\n}\n\ntype Alien implements Sentient {\n  name: String!\n  homePlanet: String\n}\n\ntype Human implements Sentient {\n  name: String!\n  pets: [Pet!]\n}\n\nenum CatCommand { JUMP }\n\ntype Cat implements Pet {\n  name: String!\n  nickname: String\n  doesKnowCommand(catCommand: CatCommand!): Boolean!\n  meowVolume: Int\n}\n\nunion CatOrDog = Cat | Dog\nunion DogOrHuman = Dog | Human\nunion HumanOrAlien = Human | Alien\n"
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Documents"
          },
          "contents": [
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Executable Definitions"
              },
              "contents": [
                {
                  "type": "Subsection",
                  "header": {
                    "type": "Subheader",
                    "title": "Formal Specification"
                  },
                  "contents": [
                    {
                      "type": "List",
                      "ordered": false,
                      "items": [
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "For each definition "
                            },
                            {
                              "type": "Variable",
                              "name": "definition"
                            },
                            {
                              "type": "Text",
                              "value": " in the document."
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Variable",
                              "name": "definition"
                            },
                            {
                              "type": "Text",
                              "value": " must be "
                            },
                            {
                              "type": "NonTerminal",
                              "name": "OperationDefinition",
                              "params": null
                            },
                            {
                              "type": "Text",
                              "value": " or "
                            },
                            {
                              "type": "NonTerminal",
                              "name": "FragmentDefinition",
                              "params": null
                            },
                            {
                              "type": "Text",
                              "value": " (it must not be "
                            },
                            {
                              "type": "NonTerminal",
                              "name": "TypeSystemDefinition",
                              "params": null
                            },
                            {
                              "type": "Text",
                              "value": ")."
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "Subsection",
                  "header": {
                    "type": "Subheader",
                    "title": "Explanatory Text"
                  },
                  "contents": [
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "GraphQL execution will only consider the executable definitions Operation and Fragment. Type system definitions and extensions are not executable, and are not considered during execution."
                        }
                      ]
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "To avoid ambiguity, a document containing "
                        },
                        {
                          "type": "NonTerminal",
                          "name": "TypeSystemDefinition",
                          "params": null
                        },
                        {
                          "type": "Text",
                          "value": " is invalid for execution."
                        }
                      ]
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "GraphQL documents not intended to be directly executed may include "
                        },
                        {
                          "type": "NonTerminal",
                          "name": "TypeSystemDefinition",
                          "params": null
                        },
                        {
                          "type": "Text",
                          "value": "."
                        }
                      ]
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "For example, the following document is invalid for execution since the original executing schema may not know about the provided type extension:"
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": "graphql",
                      "example": true,
                      "counter": true,
                      "code": "query getDogName {\n  dog {\n    name\n    color\n  }\n}\n\nextend type Dog {\n  color: String\n}\n"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Operations"
          },
          "contents": [
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Named Operation Definitions"
              },
              "contents": [
                {
                  "type": "Section",
                  "header": {
                    "type": "Header",
                    "level": 4,
                    "secID": null,
                    "title": "Operation Name Uniqueness"
                  },
                  "contents": [
                    {
                      "type": "Subsection",
                      "header": {
                        "type": "Subheader",
                        "title": "Formal Specification"
                      },
                      "contents": [
                        {
                          "type": "List",
                          "ordered": false,
                          "items": [
                            {
                              "type": "ListItem",
                              "contents": [
                                {
                                  "type": "Text",
                                  "value": "For each operation definition "
                                },
                                {
                                  "type": "Variable",
                                  "name": "operation"
                                },
                                {
                                  "type": "Text",
                                  "value": " in the document."
                                }
                              ]
                            },
                            {
                              "type": "ListItem",
                              "contents": [
                                {
                                  "type": "Text",
                                  "value": "Let "
                                },
                                {
                                  "type": "Variable",
                                  "name": "operationName"
                                },
                                {
                                  "type": "Text",
                                  "value": " be the name of "
                                },
                                {
                                  "type": "Variable",
                                  "name": "operation"
                                },
                                {
                                  "type": "Text",
                                  "value": "."
                                }
                              ]
                            },
                            {
                              "type": "ListItem",
                              "contents": [
                                {
                                  "type": "Text",
                                  "value": "If "
                                },
                                {
                                  "type": "Variable",
                                  "name": "operationName"
                                },
                                {
                                  "type": "Text",
                                  "value": " exists"
                                },
                                {
                                  "type": "List",
                                  "ordered": false,
                                  "items": [
                                    {
                                      "type": "ListItem",
                                      "contents": [
                                        {
                                          "type": "Text",
                                          "value": "Let "
                                        },
                                        {
                                          "type": "Variable",
                                          "name": "operations"
                                        },
                                        {
                                          "type": "Text",
                                          "value": " be all operation definitions in the document named "
                                        },
                                        {
                                          "type": "Variable",
                                          "name": "operationName"
                                        },
                                        {
                                          "type": "Text",
                                          "value": "."
                                        }
                                      ]
                                    },
                                    {
                                      "type": "ListItem",
                                      "contents": [
                                        {
                                          "type": "Variable",
                                          "name": "operations"
                                        },
                                        {
                                          "type": "Text",
                                          "value": " must be a set of one."
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "Subsection",
                      "header": {
                        "type": "Subheader",
                        "title": "Explanatory Text"
                      },
                      "contents": [
                        {
                          "type": "Paragraph",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "Each named operation definition must be unique within a document when referred to by its name."
                            }
                          ]
                        },
                        {
                          "type": "Paragraph",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "For example the following document is valid:"
                            }
                          ]
                        },
                        {
                          "type": "Code",
                          "raw": false,
                          "lang": "graphql",
                          "example": true,
                          "counter": false,
                          "code": "query getDogName {\n  dog {\n    name\n  }\n}\n\nquery getOwnerName {\n  dog {\n    owner {\n      name\n    }\n  }\n}\n"
                        },
                        {
                          "type": "Paragraph",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "While this document is invalid:"
                            }
                          ]
                        },
                        {
                          "type": "Code",
                          "raw": false,
                          "lang": "graphql",
                          "example": true,
                          "counter": true,
                          "code": "query getName {\n  dog {\n    name\n  }\n}\n\nquery getName {\n  dog {\n    owner {\n      name\n    }\n  }\n}\n"
                        },
                        {
                          "type": "Paragraph",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "It is invalid even if the type of each operation is different:"
                            }
                          ]
                        },
                        {
                          "type": "Code",
                          "raw": false,
                          "lang": "graphql",
                          "example": true,
                          "counter": true,
                          "code": "query dogOperation {\n  dog {\n    name\n  }\n}\n\nmutation dogOperation {\n  mutateDog {\n    id\n  }\n}\n"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Anonymous Operation Definitions"
              },
              "contents": [
                {
                  "type": "Section",
                  "header": {
                    "type": "Header",
                    "level": 4,
                    "secID": null,
                    "title": "Lone Anonymous Operation"
                  },
                  "contents": [
                    {
                      "type": "Subsection",
                      "header": {
                        "type": "Subheader",
                        "title": "Formal Specification"
                      },
                      "contents": [
                        {
                          "type": "List",
                          "ordered": false,
                          "items": [
                            {
                              "type": "ListItem",
                              "contents": [
                                {
                                  "type": "Text",
                                  "value": "Let "
                                },
                                {
                                  "type": "Variable",
                                  "name": "operations"
                                },
                                {
                                  "type": "Text",
                                  "value": " be all operation definitions in the document."
                                }
                              ]
                            },
                            {
                              "type": "ListItem",
                              "contents": [
                                {
                                  "type": "Text",
                                  "value": "Let "
                                },
                                {
                                  "type": "Variable",
                                  "name": "anonymous"
                                },
                                {
                                  "type": "Text",
                                  "value": " be all anonymous operation definitions in the document."
                                }
                              ]
                            },
                            {
                              "type": "ListItem",
                              "contents": [
                                {
                                  "type": "Text",
                                  "value": "If "
                                },
                                {
                                  "type": "Variable",
                                  "name": "operations"
                                },
                                {
                                  "type": "Text",
                                  "value": " is a set of more than 1:"
                                },
                                {
                                  "type": "List",
                                  "ordered": false,
                                  "items": [
                                    {
                                      "type": "ListItem",
                                      "contents": [
                                        {
                                          "type": "Variable",
                                          "name": "anonymous"
                                        },
                                        {
                                          "type": "Text",
                                          "value": " must be empty."
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "Subsection",
                      "header": {
                        "type": "Subheader",
                        "title": "Explanatory Text"
                      },
                      "contents": [
                        {
                          "type": "Paragraph",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "GraphQL allows a short-hand form for defining query operations when only that one operation exists in the document."
                            }
                          ]
                        },
                        {
                          "type": "Paragraph",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "For example the following document is valid:"
                            }
                          ]
                        },
                        {
                          "type": "Code",
                          "raw": false,
                          "lang": "graphql",
                          "example": true,
                          "counter": false,
                          "code": "{\n  dog {\n    name\n  }\n}\n"
                        },
                        {
                          "type": "Paragraph",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "While this document is invalid:"
                            }
                          ]
                        },
                        {
                          "type": "Code",
                          "raw": false,
                          "lang": "graphql",
                          "example": true,
                          "counter": true,
                          "code": "{\n  dog {\n    name\n  }\n}\n\nquery getName {\n  dog {\n    owner {\n      name\n    }\n  }\n}\n"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Subscription Operation Definitions"
              },
              "contents": [
                {
                  "type": "Section",
                  "header": {
                    "type": "Header",
                    "level": 4,
                    "secID": null,
                    "title": "Single root field"
                  },
                  "contents": [
                    {
                      "type": "Subsection",
                      "header": {
                        "type": "Subheader",
                        "title": "Formal Specification"
                      },
                      "contents": [
                        {
                          "type": "List",
                          "ordered": false,
                          "items": [
                            {
                              "type": "ListItem",
                              "contents": [
                                {
                                  "type": "Text",
                                  "value": "For each subscription operation definition "
                                },
                                {
                                  "type": "Variable",
                                  "name": "subscription"
                                },
                                {
                                  "type": "Text",
                                  "value": " in the document"
                                }
                              ]
                            },
                            {
                              "type": "ListItem",
                              "contents": [
                                {
                                  "type": "Text",
                                  "value": "Let "
                                },
                                {
                                  "type": "Variable",
                                  "name": "subscriptionType"
                                },
                                {
                                  "type": "Text",
                                  "value": " be the root Subscription type in "
                                },
                                {
                                  "type": "Variable",
                                  "name": "schema"
                                },
                                {
                                  "type": "Text",
                                  "value": "."
                                }
                              ]
                            },
                            {
                              "type": "ListItem",
                              "contents": [
                                {
                                  "type": "Text",
                                  "value": "Let "
                                },
                                {
                                  "type": "Variable",
                                  "name": "selectionSet"
                                },
                                {
                                  "type": "Text",
                                  "value": " be the top level selection set on "
                                },
                                {
                                  "type": "Variable",
                                  "name": "subscription"
                                },
                                {
                                  "type": "Text",
                                  "value": "."
                                }
                              ]
                            },
                            {
                              "type": "ListItem",
                              "contents": [
                                {
                                  "type": "Text",
                                  "value": "Let "
                                },
                                {
                                  "type": "Variable",
                                  "name": "variableValues"
                                },
                                {
                                  "type": "Text",
                                  "value": " be the empty set."
                                }
                              ]
                            },
                            {
                              "type": "ListItem",
                              "contents": [
                                {
                                  "type": "Text",
                                  "value": "Let "
                                },
                                {
                                  "type": "Variable",
                                  "name": "groupedFieldSet"
                                },
                                {
                                  "type": "Text",
                                  "value": " be the result of "
                                },
                                {
                                  "type": "Call",
                                  "name": "CollectFields",
                                  "args": [
                                    {
                                      "type": "Variable",
                                      "name": "subscriptionType"
                                    },
                                    {
                                      "type": "Variable",
                                      "name": "selectionSet"
                                    },
                                    {
                                      "type": "Variable",
                                      "name": "variableValues"
                                    }
                                  ]
                                },
                                {
                                  "type": "Text",
                                  "value": "."
                                }
                              ]
                            },
                            {
                              "type": "ListItem",
                              "contents": [
                                {
                                  "type": "Variable",
                                  "name": "groupedFieldSet"
                                },
                                {
                                  "type": "Text",
                                  "value": " must have exactly one entry."
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "Subsection",
                      "header": {
                        "type": "Subheader",
                        "title": "Explanatory Text"
                      },
                      "contents": [
                        {
                          "type": "Paragraph",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "Subscription operations must have exactly one root field."
                            }
                          ]
                        },
                        {
                          "type": "Paragraph",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "Valid examples:"
                            }
                          ]
                        },
                        {
                          "type": "Code",
                          "raw": false,
                          "lang": "graphql",
                          "example": true,
                          "counter": false,
                          "code": "subscription sub {\n  newMessage {\n    body\n    sender\n  }\n}\n"
                        },
                        {
                          "type": "Code",
                          "raw": false,
                          "lang": "graphql",
                          "example": true,
                          "counter": false,
                          "code": "subscription sub {\n  ...newMessageFields\n}\n\nfragment newMessageFields on Subscription {\n  newMessage {\n    body\n    sender\n  }\n}\n"
                        },
                        {
                          "type": "Paragraph",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "Invalid:"
                            }
                          ]
                        },
                        {
                          "type": "Code",
                          "raw": false,
                          "lang": "graphql",
                          "example": true,
                          "counter": true,
                          "code": "subscription sub {\n  newMessage {\n    body\n    sender\n  }\n  disallowedSecondRootField\n}\n"
                        },
                        {
                          "type": "Code",
                          "raw": false,
                          "lang": "graphql",
                          "example": true,
                          "counter": true,
                          "code": "subscription sub {\n  ...multipleSubscriptions\n}\n\nfragment multipleSubscriptions on Subscription {\n  newMessage {\n    body\n    sender\n  }\n  disallowedSecondRootField\n}\n"
                        },
                        {
                          "type": "Paragraph",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "Introspection fields are counted. The following example is also invalid:"
                            }
                          ]
                        },
                        {
                          "type": "Code",
                          "raw": false,
                          "lang": "graphql",
                          "example": true,
                          "counter": true,
                          "code": "subscription sub {\n  newMessage {\n    body\n    sender\n  }\n  __typename\n}\n"
                        },
                        {
                          "type": "Note",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "While each subscription must have exactly one root field, a document may contain any number of operations, each of which may contain different root fields. When executed, a document containing multiple subscription operations must provide the operation name as described in "
                            },
                            {
                              "type": "Call",
                              "name": "GetOperation",
                              "args": []
                            },
                            {
                              "type": "Text",
                              "value": "."
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Fields"
          },
          "contents": [
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Field Selections"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Field selections must exist on Object, Interface, and Union types."
                    }
                  ]
                },
                {
                  "type": "Subsection",
                  "header": {
                    "type": "Subheader",
                    "title": "Formal Specification"
                  },
                  "contents": [
                    {
                      "type": "List",
                      "ordered": false,
                      "items": [
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "For each "
                            },
                            {
                              "type": "Variable",
                              "name": "selection"
                            },
                            {
                              "type": "Text",
                              "value": " in the document."
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "Let "
                            },
                            {
                              "type": "Variable",
                              "name": "fieldName"
                            },
                            {
                              "type": "Text",
                              "value": " be the target field of "
                            },
                            {
                              "type": "Variable",
                              "name": "selection"
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Variable",
                              "name": "fieldName"
                            },
                            {
                              "type": "Text",
                              "value": " must be defined on type in scope"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "Subsection",
                  "header": {
                    "type": "Subheader",
                    "title": "Explanatory Text"
                  },
                  "contents": [
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "The target field of a field selection must be defined on the scoped type of the selection set. There are no limitations on alias names."
                        }
                      ]
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "For example the following fragment would not pass validation:"
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": "graphql",
                      "example": true,
                      "counter": true,
                      "code": "fragment fieldNotDefined on Dog {\n  meowVolume\n}\n\nfragment aliasedLyingFieldTargetNotDefined on Dog {\n  barkVolume: kawVolume\n}\n"
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "For interfaces, direct field selection can only be done on fields. Fields of concrete implementors are not relevant to the validity of the given interface-typed selection set."
                        }
                      ]
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "For example, the following is valid:"
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": "graphql",
                      "example": true,
                      "counter": false,
                      "code": "fragment interfaceFieldSelection on Pet {\n  name\n}\n"
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "and the following is invalid:"
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": "graphql",
                      "example": true,
                      "counter": true,
                      "code": "fragment definedOnImplementorsButNotInterface on Pet {\n  nickname\n}\n"
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Because unions do not define fields, fields may not be directly selected from a union-typed selection set, with the exception of the meta-field "
                        },
                        {
                          "type": "Variable",
                          "name": "__typename"
                        },
                        {
                          "type": "Text",
                          "value": ". Fields from a union-typed selection set must only be queried indirectly via a fragment."
                        }
                      ]
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "For example the following is valid:"
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": "graphql",
                      "example": true,
                      "counter": false,
                      "code": "fragment inDirectFieldSelectionOnUnion on CatOrDog {\n  __typename\n  ... on Pet {\n    name\n  }\n  ... on Dog {\n    barkVolume\n  }\n}\n"
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "But the following is invalid:"
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": "graphql",
                      "example": true,
                      "counter": true,
                      "code": "fragment directFieldSelectionOnUnion on CatOrDog {\n  name\n  barkVolume\n}\n"
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Field Selection Merging"
              },
              "contents": [
                {
                  "type": "Subsection",
                  "header": {
                    "type": "Subheader",
                    "title": "Formal Specification"
                  },
                  "contents": [
                    {
                      "type": "List",
                      "ordered": false,
                      "items": [
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "Let "
                            },
                            {
                              "type": "Variable",
                              "name": "set"
                            },
                            {
                              "type": "Text",
                              "value": " be any selection set defined in the GraphQL document."
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Call",
                              "name": "FieldsInSetCanMerge",
                              "args": [
                                {
                                  "type": "Variable",
                                  "name": "set"
                                }
                              ]
                            },
                            {
                              "type": "Text",
                              "value": " must be true."
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "Algorithm",
                      "call": {
                        "type": "Call",
                        "name": "FieldsInSetCanMerge",
                        "args": [
                          {
                            "type": "Variable",
                            "name": "set"
                          }
                        ]
                      },
                      "steps": {
                        "type": "List",
                        "ordered": true,
                        "items": [
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "Let "
                              },
                              {
                                "type": "Variable",
                                "name": "fieldsForName"
                              },
                              {
                                "type": "Text",
                                "value": " be the set of selections with a given response name in "
                              },
                              {
                                "type": "Variable",
                                "name": "set"
                              },
                              {
                                "type": "Text",
                                "value": " including visiting fragments and inline fragments."
                              }
                            ]
                          },
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "Given each pair of members "
                              },
                              {
                                "type": "Variable",
                                "name": "fieldA"
                              },
                              {
                                "type": "Text",
                                "value": " and "
                              },
                              {
                                "type": "Variable",
                                "name": "fieldB"
                              },
                              {
                                "type": "Text",
                                "value": " in "
                              },
                              {
                                "type": "Variable",
                                "name": "fieldsForName"
                              },
                              {
                                "type": "Text",
                                "value": ":"
                              },
                              {
                                "type": "List",
                                "ordered": true,
                                "items": [
                                  {
                                    "type": "ListItem",
                                    "contents": [
                                      {
                                        "type": "Call",
                                        "name": "SameResponseShape",
                                        "args": [
                                          {
                                            "type": "Variable",
                                            "name": "fieldA"
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "fieldB"
                                          }
                                        ]
                                      },
                                      {
                                        "type": "Text",
                                        "value": " must be true."
                                      }
                                    ]
                                  },
                                  {
                                    "type": "ListItem",
                                    "contents": [
                                      {
                                        "type": "Text",
                                        "value": "If the parent types of "
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "fieldA"
                                      },
                                      {
                                        "type": "Text",
                                        "value": " and "
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "fieldB"
                                      },
                                      {
                                        "type": "Text",
                                        "value": " are equal or if either is not an Object Type:"
                                      },
                                      {
                                        "type": "List",
                                        "ordered": true,
                                        "items": [
                                          {
                                            "type": "ListItem",
                                            "contents": [
                                              {
                                                "type": "Variable",
                                                "name": "fieldA"
                                              },
                                              {
                                                "type": "Text",
                                                "value": " and "
                                              },
                                              {
                                                "type": "Variable",
                                                "name": "fieldB"
                                              },
                                              {
                                                "type": "Text",
                                                "value": " must have identical field names."
                                              }
                                            ]
                                          },
                                          {
                                            "type": "ListItem",
                                            "contents": [
                                              {
                                                "type": "Variable",
                                                "name": "fieldA"
                                              },
                                              {
                                                "type": "Text",
                                                "value": " and "
                                              },
                                              {
                                                "type": "Variable",
                                                "name": "fieldB"
                                              },
                                              {
                                                "type": "Text",
                                                "value": " must have identical sets of arguments."
                                              }
                                            ]
                                          },
                                          {
                                            "type": "ListItem",
                                            "contents": [
                                              {
                                                "type": "Text",
                                                "value": "Let "
                                              },
                                              {
                                                "type": "Variable",
                                                "name": "mergedSet"
                                              },
                                              {
                                                "type": "Text",
                                                "value": " be the result of adding the selection set of "
                                              },
                                              {
                                                "type": "Variable",
                                                "name": "fieldA"
                                              },
                                              {
                                                "type": "Text",
                                                "value": " and the selection set of "
                                              },
                                              {
                                                "type": "Variable",
                                                "name": "fieldB"
                                              },
                                              {
                                                "type": "Text",
                                                "value": "."
                                              }
                                            ]
                                          },
                                          {
                                            "type": "ListItem",
                                            "contents": [
                                              {
                                                "type": "Call",
                                                "name": "FieldsInSetCanMerge",
                                                "args": [
                                                  {
                                                    "type": "Variable",
                                                    "name": "mergedSet"
                                                  }
                                                ]
                                              },
                                              {
                                                "type": "Text",
                                                "value": " must be true."
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    },
                    {
                      "type": "Algorithm",
                      "call": {
                        "type": "Call",
                        "name": "SameResponseShape",
                        "args": [
                          {
                            "type": "Variable",
                            "name": "fieldA"
                          },
                          {
                            "type": "Variable",
                            "name": "fieldB"
                          }
                        ]
                      },
                      "steps": {
                        "type": "List",
                        "ordered": true,
                        "items": [
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "Let "
                              },
                              {
                                "type": "Variable",
                                "name": "typeA"
                              },
                              {
                                "type": "Text",
                                "value": " be the return type of "
                              },
                              {
                                "type": "Variable",
                                "name": "fieldA"
                              },
                              {
                                "type": "Text",
                                "value": "."
                              }
                            ]
                          },
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "Let "
                              },
                              {
                                "type": "Variable",
                                "name": "typeB"
                              },
                              {
                                "type": "Text",
                                "value": " be the return type of "
                              },
                              {
                                "type": "Variable",
                                "name": "fieldB"
                              },
                              {
                                "type": "Text",
                                "value": "."
                              }
                            ]
                          },
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "If "
                              },
                              {
                                "type": "Variable",
                                "name": "typeA"
                              },
                              {
                                "type": "Text",
                                "value": " or "
                              },
                              {
                                "type": "Variable",
                                "name": "typeB"
                              },
                              {
                                "type": "Text",
                                "value": " is Non-Null."
                              },
                              {
                                "type": "List",
                                "ordered": true,
                                "items": [
                                  {
                                    "type": "ListItem",
                                    "contents": [
                                      {
                                        "type": "Text",
                                        "value": "If "
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "typeA"
                                      },
                                      {
                                        "type": "Text",
                                        "value": " or "
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "typeB"
                                      },
                                      {
                                        "type": "Text",
                                        "value": " is nullable, return false."
                                      }
                                    ]
                                  },
                                  {
                                    "type": "ListItem",
                                    "contents": [
                                      {
                                        "type": "Text",
                                        "value": "Let "
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "typeA"
                                      },
                                      {
                                        "type": "Text",
                                        "value": " be the nullable type of "
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "typeA"
                                      }
                                    ]
                                  },
                                  {
                                    "type": "ListItem",
                                    "contents": [
                                      {
                                        "type": "Text",
                                        "value": "Let "
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "typeB"
                                      },
                                      {
                                        "type": "Text",
                                        "value": " be the nullable type of "
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "typeB"
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "If "
                              },
                              {
                                "type": "Variable",
                                "name": "typeA"
                              },
                              {
                                "type": "Text",
                                "value": " or "
                              },
                              {
                                "type": "Variable",
                                "name": "typeB"
                              },
                              {
                                "type": "Text",
                                "value": " is List."
                              },
                              {
                                "type": "List",
                                "ordered": true,
                                "items": [
                                  {
                                    "type": "ListItem",
                                    "contents": [
                                      {
                                        "type": "Text",
                                        "value": "If "
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "typeA"
                                      },
                                      {
                                        "type": "Text",
                                        "value": " or "
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "typeB"
                                      },
                                      {
                                        "type": "Text",
                                        "value": " is not List, return false."
                                      }
                                    ]
                                  },
                                  {
                                    "type": "ListItem",
                                    "contents": [
                                      {
                                        "type": "Text",
                                        "value": "Let "
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "typeA"
                                      },
                                      {
                                        "type": "Text",
                                        "value": " be the item type of "
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "typeA"
                                      }
                                    ]
                                  },
                                  {
                                    "type": "ListItem",
                                    "contents": [
                                      {
                                        "type": "Text",
                                        "value": "Let "
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "typeB"
                                      },
                                      {
                                        "type": "Text",
                                        "value": " be the item type of "
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "typeB"
                                      }
                                    ]
                                  },
                                  {
                                    "type": "ListItem",
                                    "contents": [
                                      {
                                        "type": "Text",
                                        "value": "Repeat from step 3."
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "If "
                              },
                              {
                                "type": "Variable",
                                "name": "typeA"
                              },
                              {
                                "type": "Text",
                                "value": " or "
                              },
                              {
                                "type": "Variable",
                                "name": "typeB"
                              },
                              {
                                "type": "Text",
                                "value": " is Scalar or Enum."
                              },
                              {
                                "type": "List",
                                "ordered": true,
                                "items": [
                                  {
                                    "type": "ListItem",
                                    "contents": [
                                      {
                                        "type": "Text",
                                        "value": "If "
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "typeA"
                                      },
                                      {
                                        "type": "Text",
                                        "value": " and "
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "typeB"
                                      },
                                      {
                                        "type": "Text",
                                        "value": " are the same type return true, otherwise return false."
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "Assert: "
                              },
                              {
                                "type": "Variable",
                                "name": "typeA"
                              },
                              {
                                "type": "Text",
                                "value": " and "
                              },
                              {
                                "type": "Variable",
                                "name": "typeB"
                              },
                              {
                                "type": "Text",
                                "value": " are both composite types."
                              }
                            ]
                          },
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "Let "
                              },
                              {
                                "type": "Variable",
                                "name": "mergedSet"
                              },
                              {
                                "type": "Text",
                                "value": " be the result of adding the selection set of "
                              },
                              {
                                "type": "Variable",
                                "name": "fieldA"
                              },
                              {
                                "type": "Text",
                                "value": " and the selection set of "
                              },
                              {
                                "type": "Variable",
                                "name": "fieldB"
                              },
                              {
                                "type": "Text",
                                "value": "."
                              }
                            ]
                          },
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "Let "
                              },
                              {
                                "type": "Variable",
                                "name": "fieldsForName"
                              },
                              {
                                "type": "Text",
                                "value": " be the set of selections with a given response name in "
                              },
                              {
                                "type": "Variable",
                                "name": "mergedSet"
                              },
                              {
                                "type": "Text",
                                "value": " including visiting fragments and inline fragments."
                              }
                            ]
                          },
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "Given each pair of members "
                              },
                              {
                                "type": "Variable",
                                "name": "subfieldA"
                              },
                              {
                                "type": "Text",
                                "value": " and "
                              },
                              {
                                "type": "Variable",
                                "name": "subfieldB"
                              },
                              {
                                "type": "Text",
                                "value": " in "
                              },
                              {
                                "type": "Variable",
                                "name": "fieldsForName"
                              },
                              {
                                "type": "Text",
                                "value": ":"
                              },
                              {
                                "type": "List",
                                "ordered": true,
                                "items": [
                                  {
                                    "type": "ListItem",
                                    "contents": [
                                      {
                                        "type": "Text",
                                        "value": "If "
                                      },
                                      {
                                        "type": "Call",
                                        "name": "SameResponseShape",
                                        "args": [
                                          {
                                            "type": "Variable",
                                            "name": "subfieldA"
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "subfieldB"
                                          }
                                        ]
                                      },
                                      {
                                        "type": "Text",
                                        "value": " is false, return false."
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "Return true."
                              }
                            ]
                          }
                        ]
                      }
                    }
                  ]
                },
                {
                  "type": "Subsection",
                  "header": {
                    "type": "Subheader",
                    "title": "Explanatory Text"
                  },
                  "contents": [
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "If multiple field selections with the same response names are encountered during execution, the field and arguments to execute and the resulting value should be unambiguous. Therefore any two field selections which might both be encountered for the same object are only valid if they are equivalent."
                        }
                      ]
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "During execution, the simultaneous execution of fields with the same response name is accomplished by "
                        },
                        {
                          "type": "Call",
                          "name": "MergeSelectionSets",
                          "args": []
                        },
                        {
                          "type": "Text",
                          "value": " and "
                        },
                        {
                          "type": "Call",
                          "name": "CollectFields",
                          "args": []
                        },
                        {
                          "type": "Text",
                          "value": "."
                        }
                      ]
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "For simple hand-written GraphQL, this rule is obviously a clear developer error, however nested fragments can make this difficult to detect manually."
                        }
                      ]
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "The following selections correctly merge:"
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": "graphql",
                      "example": true,
                      "counter": false,
                      "code": "fragment mergeIdenticalFields on Dog {\n  name\n  name\n}\n\nfragment mergeIdenticalAliasesAndFields on Dog {\n  otherName: name\n  otherName: name\n}\n"
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "The following is not able to merge:"
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": "graphql",
                      "example": true,
                      "counter": true,
                      "code": "fragment conflictingBecauseAlias on Dog {\n  name: nickname\n  name\n}\n"
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Identical arguments are also merged if they have identical arguments. Both values and variables can be correctly merged."
                        }
                      ]
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "For example the following correctly merge:"
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": "graphql",
                      "example": true,
                      "counter": false,
                      "code": "fragment mergeIdenticalFieldsWithIdenticalArgs on Dog {\n  doesKnowCommand(dogCommand: SIT)\n  doesKnowCommand(dogCommand: SIT)\n}\n\nfragment mergeIdenticalFieldsWithIdenticalValues on Dog {\n  doesKnowCommand(dogCommand: $dogCommand)\n  doesKnowCommand(dogCommand: $dogCommand)\n}\n"
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "The following do not correctly merge:"
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": "graphql",
                      "example": true,
                      "counter": true,
                      "code": "fragment conflictingArgsOnValues on Dog {\n  doesKnowCommand(dogCommand: SIT)\n  doesKnowCommand(dogCommand: HEEL)\n}\n\nfragment conflictingArgsValueAndVar on Dog {\n  doesKnowCommand(dogCommand: SIT)\n  doesKnowCommand(dogCommand: $dogCommand)\n}\n\nfragment conflictingArgsWithVars on Dog {\n  doesKnowCommand(dogCommand: $varOne)\n  doesKnowCommand(dogCommand: $varTwo)\n}\n\nfragment differingArgs on Dog {\n  doesKnowCommand(dogCommand: SIT)\n  doesKnowCommand\n}\n"
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "The following fields would not merge together, however both cannot be encountered against the same object, so they are safe:"
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": "graphql",
                      "example": true,
                      "counter": false,
                      "code": "fragment safeDifferingFields on Pet {\n  ... on Dog {\n    volume: barkVolume\n  }\n  ... on Cat {\n    volume: meowVolume\n  }\n}\n\nfragment safeDifferingArgs on Pet {\n  ... on Dog {\n    doesKnowCommand(dogCommand: SIT)\n  }\n  ... on Cat {\n    doesKnowCommand(catCommand: JUMP)\n  }\n}\n"
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "However, the field responses must be shapes which can be merged. For example, scalar values must not differ. In this example, "
                        },
                        {
                          "type": "InlineCode",
                          "code": "someValue"
                        },
                        {
                          "type": "Text",
                          "value": " might be a "
                        },
                        {
                          "type": "InlineCode",
                          "code": "String"
                        },
                        {
                          "type": "Text",
                          "value": " or an "
                        },
                        {
                          "type": "InlineCode",
                          "code": "Int"
                        },
                        {
                          "type": "Text",
                          "value": ":"
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": "graphql",
                      "example": true,
                      "counter": true,
                      "code": "fragment conflictingDifferingResponses on Pet {\n  ... on Dog {\n    someValue: nickname\n  }\n  ... on Cat {\n    someValue: meowVolume\n  }\n}\n"
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Leaf Field Selections"
              },
              "contents": [
                {
                  "type": "Subsection",
                  "header": {
                    "type": "Subheader",
                    "title": "Formal Specification"
                  },
                  "contents": [
                    {
                      "type": "List",
                      "ordered": false,
                      "items": [
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "For each "
                            },
                            {
                              "type": "Variable",
                              "name": "selection"
                            },
                            {
                              "type": "Text",
                              "value": " in the document"
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "Let "
                            },
                            {
                              "type": "Variable",
                              "name": "selectionType"
                            },
                            {
                              "type": "Text",
                              "value": " be the result type of "
                            },
                            {
                              "type": "Variable",
                              "name": "selection"
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "If "
                            },
                            {
                              "type": "Variable",
                              "name": "selectionType"
                            },
                            {
                              "type": "Text",
                              "value": " is a scalar or enum:"
                            },
                            {
                              "type": "List",
                              "ordered": false,
                              "items": [
                                {
                                  "type": "ListItem",
                                  "contents": [
                                    {
                                      "type": "Text",
                                      "value": "The subselection set of that selection must be empty"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "If "
                            },
                            {
                              "type": "Variable",
                              "name": "selectionType"
                            },
                            {
                              "type": "Text",
                              "value": " is an interface, union, or object"
                            },
                            {
                              "type": "List",
                              "ordered": false,
                              "items": [
                                {
                                  "type": "ListItem",
                                  "contents": [
                                    {
                                      "type": "Text",
                                      "value": "The subselection set of that selection must NOT BE empty"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "Subsection",
                  "header": {
                    "type": "Subheader",
                    "title": "Explanatory Text"
                  },
                  "contents": [
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Field selections on scalars or enums are never allowed, because they are the leaf nodes of any GraphQL query."
                        }
                      ]
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "The following is valid."
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": "graphql",
                      "example": true,
                      "counter": false,
                      "code": "fragment scalarSelection on Dog {\n  barkVolume\n}\n"
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "The following is invalid."
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": "graphql",
                      "example": true,
                      "counter": true,
                      "code": "fragment scalarSelectionsNotAllowedOnInt on Dog {\n  barkVolume {\n    sinceWhen\n  }\n}\n"
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Conversely the leaf field selections of GraphQL queries must be of type scalar or enum. Leaf selections on objects, interfaces, and unions without subfields are disallowed."
                        }
                      ]
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Let’s assume the following additions to the query root type of the schema:"
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": "graphql",
                      "example": true,
                      "counter": false,
                      "code": "extend type Query {\n  human: Human\n  pet: Pet\n  catOrDog: CatOrDog\n}\n"
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "The following examples are invalid"
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": "graphql",
                      "example": true,
                      "counter": true,
                      "code": "query directQueryOnObjectWithoutSubFields {\n  human\n}\n\nquery directQueryOnInterfaceWithoutSubFields {\n  pet\n}\n\nquery directQueryOnUnionWithoutSubFields {\n  catOrDog\n}\n"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Arguments"
          },
          "contents": [
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Arguments are provided to both fields and directives. The following validation rules apply in both cases."
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Argument Names"
              },
              "contents": [
                {
                  "type": "Subsection",
                  "header": {
                    "type": "Subheader",
                    "title": "Formal Specification"
                  },
                  "contents": [
                    {
                      "type": "List",
                      "ordered": false,
                      "items": [
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "For each "
                            },
                            {
                              "type": "Variable",
                              "name": "argument"
                            },
                            {
                              "type": "Text",
                              "value": " in the document"
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "Let "
                            },
                            {
                              "type": "Variable",
                              "name": "argumentName"
                            },
                            {
                              "type": "Text",
                              "value": " be the Name of "
                            },
                            {
                              "type": "Variable",
                              "name": "argument"
                            },
                            {
                              "type": "Text",
                              "value": "."
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "Let "
                            },
                            {
                              "type": "Variable",
                              "name": "argumentDefinition"
                            },
                            {
                              "type": "Text",
                              "value": " be the argument definition provided by the parent field or definition named "
                            },
                            {
                              "type": "Variable",
                              "name": "argumentName"
                            },
                            {
                              "type": "Text",
                              "value": "."
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Variable",
                              "name": "argumentDefinition"
                            },
                            {
                              "type": "Text",
                              "value": " must exist."
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "Subsection",
                  "header": {
                    "type": "Subheader",
                    "title": "Explanatory Text"
                  },
                  "contents": [
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Every argument provided to a field or directive must be defined in the set of possible arguments of that field or directive."
                        }
                      ]
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "For example the following are valid:"
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": "graphql",
                      "example": true,
                      "counter": false,
                      "code": "fragment argOnRequiredArg on Dog {\n  doesKnowCommand(dogCommand: SIT)\n}\n\nfragment argOnOptional on Dog {\n  isHousetrained(atOtherHomes: true) @include(if: true)\n}\n"
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "the following is invalid since "
                        },
                        {
                          "type": "InlineCode",
                          "code": "command"
                        },
                        {
                          "type": "Text",
                          "value": " is not defined on "
                        },
                        {
                          "type": "InlineCode",
                          "code": "DogCommand"
                        },
                        {
                          "type": "Text",
                          "value": "."
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": "graphql",
                      "example": true,
                      "counter": true,
                      "code": "fragment invalidArgName on Dog {\n  doesKnowCommand(command: CLEAN_UP_HOUSE)\n}\n"
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "and this is also invalid as "
                        },
                        {
                          "type": "InlineCode",
                          "code": "unless"
                        },
                        {
                          "type": "Text",
                          "value": " is not defined on "
                        },
                        {
                          "type": "InlineCode",
                          "code": "@include"
                        },
                        {
                          "type": "Text",
                          "value": "."
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": "graphql",
                      "example": true,
                      "counter": true,
                      "code": "fragment invalidArgName on Dog {\n  isHousetrained(atOtherHomes: true) @include(unless: false)\n}\n"
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "In order to explore more complicated argument examples, let’s add the following to our type system:"
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": "graphql",
                      "example": true,
                      "counter": false,
                      "code": "type Arguments {\n  multipleReqs(x: Int!, y: Int!): Int!\n  booleanArgField(booleanArg: Boolean): Boolean\n  floatArgField(floatArg: Float): Float\n  intArgField(intArg: Int): Int\n  nonNullBooleanArgField(nonNullBooleanArg: Boolean!): Boolean!\n  booleanListArgField(booleanListArg: [Boolean]!): [Boolean]\n  optionalNonNullBooleanArgField(optionalBooleanArg: Boolean! = false): Boolean!\n}\n\nextend type Query {\n  arguments: Arguments\n}\n"
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Order does not matter in arguments. Therefore both the following examples are valid."
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": "graphql",
                      "example": true,
                      "counter": false,
                      "code": "fragment multipleArgs on Arguments {\n  multipleReqs(x: 1, y: 2)\n}\n\nfragment multipleArgsReverseOrder on Arguments {\n  multipleReqs(y: 2, x: 1)\n}\n"
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Argument Uniqueness"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Fields and directives treat arguments as a mapping of argument name to value. More than one argument with the same name in an argument set is ambiguous and invalid."
                    }
                  ]
                },
                {
                  "type": "Subsection",
                  "header": {
                    "type": "Subheader",
                    "title": "Formal Specification"
                  },
                  "contents": [
                    {
                      "type": "List",
                      "ordered": false,
                      "items": [
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "For each "
                            },
                            {
                              "type": "Variable",
                              "name": "argument"
                            },
                            {
                              "type": "Text",
                              "value": " in the Document."
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "Let "
                            },
                            {
                              "type": "Variable",
                              "name": "argumentName"
                            },
                            {
                              "type": "Text",
                              "value": " be the Name of "
                            },
                            {
                              "type": "Variable",
                              "name": "argument"
                            },
                            {
                              "type": "Text",
                              "value": "."
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "Let "
                            },
                            {
                              "type": "Variable",
                              "name": "arguments"
                            },
                            {
                              "type": "Text",
                              "value": " be all Arguments named "
                            },
                            {
                              "type": "Variable",
                              "name": "argumentName"
                            },
                            {
                              "type": "Text",
                              "value": " in the Argument Set which contains "
                            },
                            {
                              "type": "Variable",
                              "name": "argument"
                            },
                            {
                              "type": "Text",
                              "value": "."
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Variable",
                              "name": "arguments"
                            },
                            {
                              "type": "Text",
                              "value": " must be the set containing only "
                            },
                            {
                              "type": "Variable",
                              "name": "argument"
                            },
                            {
                              "type": "Text",
                              "value": "."
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "Section",
                  "header": {
                    "type": "Header",
                    "level": 4,
                    "secID": null,
                    "title": "Required Arguments"
                  },
                  "contents": [
                    {
                      "type": "List",
                      "ordered": false,
                      "items": [
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "For each Field or Directive in the document."
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "Let "
                            },
                            {
                              "type": "Variable",
                              "name": "arguments"
                            },
                            {
                              "type": "Text",
                              "value": " be the arguments provided by the Field or Directive."
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "Let "
                            },
                            {
                              "type": "Variable",
                              "name": "argumentDefinitions"
                            },
                            {
                              "type": "Text",
                              "value": " be the set of argument definitions of that Field or Directive."
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "For each "
                            },
                            {
                              "type": "Variable",
                              "name": "argumentDefinition"
                            },
                            {
                              "type": "Text",
                              "value": " in "
                            },
                            {
                              "type": "Variable",
                              "name": "argumentDefinitions"
                            },
                            {
                              "type": "Text",
                              "value": ":"
                            },
                            {
                              "type": "List",
                              "ordered": false,
                              "items": [
                                {
                                  "type": "ListItem",
                                  "contents": [
                                    {
                                      "type": "Text",
                                      "value": "Let "
                                    },
                                    {
                                      "type": "Variable",
                                      "name": "type"
                                    },
                                    {
                                      "type": "Text",
                                      "value": " be the expected type of "
                                    },
                                    {
                                      "type": "Variable",
                                      "name": "argumentDefinition"
                                    },
                                    {
                                      "type": "Text",
                                      "value": "."
                                    }
                                  ]
                                },
                                {
                                  "type": "ListItem",
                                  "contents": [
                                    {
                                      "type": "Text",
                                      "value": "Let "
                                    },
                                    {
                                      "type": "Variable",
                                      "name": "defaultValue"
                                    },
                                    {
                                      "type": "Text",
                                      "value": " be the default value of "
                                    },
                                    {
                                      "type": "Variable",
                                      "name": "argumentDefinition"
                                    },
                                    {
                                      "type": "Text",
                                      "value": "."
                                    }
                                  ]
                                },
                                {
                                  "type": "ListItem",
                                  "contents": [
                                    {
                                      "type": "Text",
                                      "value": "If "
                                    },
                                    {
                                      "type": "Variable",
                                      "name": "type"
                                    },
                                    {
                                      "type": "Text",
                                      "value": " is Non-Null and "
                                    },
                                    {
                                      "type": "Variable",
                                      "name": "defaultValue"
                                    },
                                    {
                                      "type": "Text",
                                      "value": " does not exist:"
                                    },
                                    {
                                      "type": "List",
                                      "ordered": false,
                                      "items": [
                                        {
                                          "type": "ListItem",
                                          "contents": [
                                            {
                                              "type": "Text",
                                              "value": "Let "
                                            },
                                            {
                                              "type": "Variable",
                                              "name": "argumentName"
                                            },
                                            {
                                              "type": "Text",
                                              "value": " be the name of "
                                            },
                                            {
                                              "type": "Variable",
                                              "name": "argumentDefinition"
                                            },
                                            {
                                              "type": "Text",
                                              "value": "."
                                            }
                                          ]
                                        },
                                        {
                                          "type": "ListItem",
                                          "contents": [
                                            {
                                              "type": "Text",
                                              "value": "Let "
                                            },
                                            {
                                              "type": "Variable",
                                              "name": "argument"
                                            },
                                            {
                                              "type": "Text",
                                              "value": " be the argument in "
                                            },
                                            {
                                              "type": "Variable",
                                              "name": "arguments"
                                            },
                                            {
                                              "type": "Text",
                                              "value": " named "
                                            },
                                            {
                                              "type": "Variable",
                                              "name": "argumentName"
                                            }
                                          ]
                                        },
                                        {
                                          "type": "ListItem",
                                          "contents": [
                                            {
                                              "type": "Variable",
                                              "name": "argument"
                                            },
                                            {
                                              "type": "Text",
                                              "value": " must exist."
                                            }
                                          ]
                                        },
                                        {
                                          "type": "ListItem",
                                          "contents": [
                                            {
                                              "type": "Text",
                                              "value": "Let "
                                            },
                                            {
                                              "type": "Variable",
                                              "name": "value"
                                            },
                                            {
                                              "type": "Text",
                                              "value": " be the value of "
                                            },
                                            {
                                              "type": "Variable",
                                              "name": "argument"
                                            },
                                            {
                                              "type": "Text",
                                              "value": "."
                                            }
                                          ]
                                        },
                                        {
                                          "type": "ListItem",
                                          "contents": [
                                            {
                                              "type": "Variable",
                                              "name": "value"
                                            },
                                            {
                                              "type": "Text",
                                              "value": " must not be the "
                                            },
                                            {
                                              "type": "Keyword",
                                              "value": "null"
                                            },
                                            {
                                              "type": "Text",
                                              "value": " literal."
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "Subsection",
                      "header": {
                        "type": "Subheader",
                        "title": "Explanatory Text"
                      },
                      "contents": [
                        {
                          "type": "Paragraph",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "Arguments can be required. An argument is required if the argument type is non-null and does not have a default value. Otherwise, the argument is optional."
                            }
                          ]
                        },
                        {
                          "type": "Paragraph",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "For example the following are valid:"
                            }
                          ]
                        },
                        {
                          "type": "Code",
                          "raw": false,
                          "lang": "graphql",
                          "example": true,
                          "counter": false,
                          "code": "fragment goodBooleanArg on Arguments {\n  booleanArgField(booleanArg: true)\n}\n\nfragment goodNonNullArg on Arguments {\n  nonNullBooleanArgField(nonNullBooleanArg: true)\n}\n"
                        },
                        {
                          "type": "Paragraph",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "The argument can be omitted from a field with a nullable argument."
                            }
                          ]
                        },
                        {
                          "type": "Paragraph",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "Therefore the following query is valid:"
                            }
                          ]
                        },
                        {
                          "type": "Code",
                          "raw": false,
                          "lang": "graphql",
                          "example": true,
                          "counter": false,
                          "code": "fragment goodBooleanArgDefault on Arguments {\n  booleanArgField\n}\n"
                        },
                        {
                          "type": "Paragraph",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "but this is not valid on a required argument."
                            }
                          ]
                        },
                        {
                          "type": "Code",
                          "raw": false,
                          "lang": "graphql",
                          "example": true,
                          "counter": true,
                          "code": "fragment missingRequiredArg on Arguments {\n  nonNullBooleanArgField\n}\n"
                        },
                        {
                          "type": "Paragraph",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "Providing the explicit value "
                            },
                            {
                              "type": "Keyword",
                              "value": "null"
                            },
                            {
                              "type": "Text",
                              "value": " is also not valid since required arguments always have a non-null type."
                            }
                          ]
                        },
                        {
                          "type": "Code",
                          "raw": false,
                          "lang": "graphql",
                          "example": true,
                          "counter": true,
                          "code": "fragment missingRequiredArg on Arguments {\n  nonNullBooleanArgField(nonNullBooleanArg: null)\n}\n"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Fragments"
          },
          "contents": [
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Fragment Declarations"
              },
              "contents": [
                {
                  "type": "Section",
                  "header": {
                    "type": "Header",
                    "level": 4,
                    "secID": null,
                    "title": "Fragment Name Uniqueness"
                  },
                  "contents": [
                    {
                      "type": "Subsection",
                      "header": {
                        "type": "Subheader",
                        "title": "Formal Specification"
                      },
                      "contents": [
                        {
                          "type": "List",
                          "ordered": false,
                          "items": [
                            {
                              "type": "ListItem",
                              "contents": [
                                {
                                  "type": "Text",
                                  "value": "For each fragment definition "
                                },
                                {
                                  "type": "Variable",
                                  "name": "fragment"
                                },
                                {
                                  "type": "Text",
                                  "value": " in the document"
                                }
                              ]
                            },
                            {
                              "type": "ListItem",
                              "contents": [
                                {
                                  "type": "Text",
                                  "value": "Let "
                                },
                                {
                                  "type": "Variable",
                                  "name": "fragmentName"
                                },
                                {
                                  "type": "Text",
                                  "value": " be the name of "
                                },
                                {
                                  "type": "Variable",
                                  "name": "fragment"
                                },
                                {
                                  "type": "Text",
                                  "value": "."
                                }
                              ]
                            },
                            {
                              "type": "ListItem",
                              "contents": [
                                {
                                  "type": "Text",
                                  "value": "Let "
                                },
                                {
                                  "type": "Variable",
                                  "name": "fragments"
                                },
                                {
                                  "type": "Text",
                                  "value": " be all fragment definitions in the document named "
                                },
                                {
                                  "type": "Variable",
                                  "name": "fragmentName"
                                },
                                {
                                  "type": "Text",
                                  "value": "."
                                }
                              ]
                            },
                            {
                              "type": "ListItem",
                              "contents": [
                                {
                                  "type": "Variable",
                                  "name": "fragments"
                                },
                                {
                                  "type": "Text",
                                  "value": " must be a set of one."
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "Subsection",
                      "header": {
                        "type": "Subheader",
                        "title": "Explanatory Text"
                      },
                      "contents": [
                        {
                          "type": "Paragraph",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "Fragment definitions are referenced in fragment spreads by name. To avoid ambiguity, each fragment’s name must be unique within a document."
                            }
                          ]
                        },
                        {
                          "type": "Paragraph",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "Inline fragments are not considered fragment definitions, and are unaffected by this validation rule."
                            }
                          ]
                        },
                        {
                          "type": "Paragraph",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "For example the following document is valid:"
                            }
                          ]
                        },
                        {
                          "type": "Code",
                          "raw": false,
                          "lang": "graphql",
                          "example": true,
                          "counter": false,
                          "code": "{\n  dog {\n    ...fragmentOne\n    ...fragmentTwo\n  }\n}\n\nfragment fragmentOne on Dog {\n  name\n}\n\nfragment fragmentTwo on Dog {\n  owner {\n    name\n  }\n}\n"
                        },
                        {
                          "type": "Paragraph",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "While this document is invalid:"
                            }
                          ]
                        },
                        {
                          "type": "Code",
                          "raw": false,
                          "lang": "graphql",
                          "example": true,
                          "counter": true,
                          "code": "{\n  dog {\n    ...fragmentOne\n  }\n}\n\nfragment fragmentOne on Dog {\n  name\n}\n\nfragment fragmentOne on Dog {\n  owner {\n    name\n  }\n}\n"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "Section",
                  "header": {
                    "type": "Header",
                    "level": 4,
                    "secID": null,
                    "title": "Fragment Spread Type Existence"
                  },
                  "contents": [
                    {
                      "type": "Subsection",
                      "header": {
                        "type": "Subheader",
                        "title": "Formal Specification"
                      },
                      "contents": [
                        {
                          "type": "List",
                          "ordered": false,
                          "items": [
                            {
                              "type": "ListItem",
                              "contents": [
                                {
                                  "type": "Text",
                                  "value": "For each named spread "
                                },
                                {
                                  "type": "Variable",
                                  "name": "namedSpread"
                                },
                                {
                                  "type": "Text",
                                  "value": " in the document"
                                }
                              ]
                            },
                            {
                              "type": "ListItem",
                              "contents": [
                                {
                                  "type": "Text",
                                  "value": "Let "
                                },
                                {
                                  "type": "Variable",
                                  "name": "fragment"
                                },
                                {
                                  "type": "Text",
                                  "value": " be the target of "
                                },
                                {
                                  "type": "Variable",
                                  "name": "namedSpread"
                                }
                              ]
                            },
                            {
                              "type": "ListItem",
                              "contents": [
                                {
                                  "type": "Text",
                                  "value": "The target type of "
                                },
                                {
                                  "type": "Variable",
                                  "name": "fragment"
                                },
                                {
                                  "type": "Text",
                                  "value": " must be defined in the schema"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "Subsection",
                      "header": {
                        "type": "Subheader",
                        "title": "Explanatory Text"
                      },
                      "contents": [
                        {
                          "type": "Paragraph",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "Fragments must be specified on types that exist in the schema. This applies for both named and inline fragments. If they are not defined in the schema, the query does not validate."
                            }
                          ]
                        },
                        {
                          "type": "Paragraph",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "For example the following fragments are valid:"
                            }
                          ]
                        },
                        {
                          "type": "Code",
                          "raw": false,
                          "lang": "graphql",
                          "example": true,
                          "counter": false,
                          "code": "fragment correctType on Dog {\n  name\n}\n\nfragment inlineFragment on Dog {\n  ... on Dog {\n    name\n  }\n}\n\nfragment inlineFragment2 on Dog {\n  ... @include(if: true) {\n    name\n  }\n}\n"
                        },
                        {
                          "type": "Paragraph",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "and the following do not validate:"
                            }
                          ]
                        },
                        {
                          "type": "Code",
                          "raw": false,
                          "lang": "graphql",
                          "example": true,
                          "counter": true,
                          "code": "fragment notOnExistingType on NotInSchema {\n  name\n}\n\nfragment inlineNotExistingType on Dog {\n  ... on NotInSchema {\n    name\n  }\n}\n"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "Section",
                  "header": {
                    "type": "Header",
                    "level": 4,
                    "secID": null,
                    "title": "Fragments On Composite Types"
                  },
                  "contents": [
                    {
                      "type": "Subsection",
                      "header": {
                        "type": "Subheader",
                        "title": "Formal Specification"
                      },
                      "contents": [
                        {
                          "type": "List",
                          "ordered": false,
                          "items": [
                            {
                              "type": "ListItem",
                              "contents": [
                                {
                                  "type": "Text",
                                  "value": "For each "
                                },
                                {
                                  "type": "Variable",
                                  "name": "fragment"
                                },
                                {
                                  "type": "Text",
                                  "value": " defined in the document."
                                }
                              ]
                            },
                            {
                              "type": "ListItem",
                              "contents": [
                                {
                                  "type": "Text",
                                  "value": "The target type of fragment must have kind "
                                },
                                {
                                  "type": "NonTerminal",
                                  "name": "UNION",
                                  "params": null
                                },
                                {
                                  "type": "Text",
                                  "value": ", "
                                },
                                {
                                  "type": "NonTerminal",
                                  "name": "INTERFACE",
                                  "params": null
                                },
                                {
                                  "type": "Text",
                                  "value": ", or "
                                },
                                {
                                  "type": "NonTerminal",
                                  "name": "OBJECT",
                                  "params": null
                                },
                                {
                                  "type": "Text",
                                  "value": "."
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "Subsection",
                      "header": {
                        "type": "Subheader",
                        "title": "Explanatory Text"
                      },
                      "contents": [
                        {
                          "type": "Paragraph",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "Fragments can only be declared on unions, interfaces, and objects. They are invalid on scalars. They can only be applied on non-leaf fields. This rule applies to both inline and named fragments."
                            }
                          ]
                        },
                        {
                          "type": "Paragraph",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "The following fragment declarations are valid:"
                            }
                          ]
                        },
                        {
                          "type": "Code",
                          "raw": false,
                          "lang": "graphql",
                          "example": true,
                          "counter": false,
                          "code": "fragment fragOnObject on Dog {\n  name\n}\n\nfragment fragOnInterface on Pet {\n  name\n}\n\nfragment fragOnUnion on CatOrDog {\n  ... on Dog {\n    name\n  }\n}\n"
                        },
                        {
                          "type": "Paragraph",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "and the following are invalid:"
                            }
                          ]
                        },
                        {
                          "type": "Code",
                          "raw": false,
                          "lang": "graphql",
                          "example": true,
                          "counter": true,
                          "code": "fragment fragOnScalar on Int {\n  something\n}\n\nfragment inlineFragOnScalar on Dog {\n  ... on Boolean {\n    somethingElse\n  }\n}\n"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "Section",
                  "header": {
                    "type": "Header",
                    "level": 4,
                    "secID": null,
                    "title": "Fragments Must Be Used"
                  },
                  "contents": [
                    {
                      "type": "Subsection",
                      "header": {
                        "type": "Subheader",
                        "title": "Formal Specification"
                      },
                      "contents": [
                        {
                          "type": "List",
                          "ordered": false,
                          "items": [
                            {
                              "type": "ListItem",
                              "contents": [
                                {
                                  "type": "Text",
                                  "value": "For each "
                                },
                                {
                                  "type": "Variable",
                                  "name": "fragment"
                                },
                                {
                                  "type": "Text",
                                  "value": " defined in the document."
                                }
                              ]
                            },
                            {
                              "type": "ListItem",
                              "contents": [
                                {
                                  "type": "Variable",
                                  "name": "fragment"
                                },
                                {
                                  "type": "Text",
                                  "value": " must be the target of at least one spread in the document"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "Subsection",
                      "header": {
                        "type": "Subheader",
                        "title": "Explanatory Text"
                      },
                      "contents": [
                        {
                          "type": "Paragraph",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "Defined fragments must be used within a document."
                            }
                          ]
                        },
                        {
                          "type": "Paragraph",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "For example the following is an invalid document:"
                            }
                          ]
                        },
                        {
                          "type": "Code",
                          "raw": false,
                          "lang": "graphql",
                          "example": true,
                          "counter": true,
                          "code": "fragment nameFragment on Dog { # unused\n  name\n}\n\n{\n  dog {\n    name\n  }\n}\n"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Fragment Spreads"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Field selection is also determined by spreading fragments into one another. The selection set of the target fragment is unioned with the selection set at the level at which the target fragment is referenced."
                    }
                  ]
                },
                {
                  "type": "Section",
                  "header": {
                    "type": "Header",
                    "level": 4,
                    "secID": null,
                    "title": "Fragment spread target defined"
                  },
                  "contents": [
                    {
                      "type": "Subsection",
                      "header": {
                        "type": "Subheader",
                        "title": "Formal Specification"
                      },
                      "contents": [
                        {
                          "type": "List",
                          "ordered": false,
                          "items": [
                            {
                              "type": "ListItem",
                              "contents": [
                                {
                                  "type": "Text",
                                  "value": "For every "
                                },
                                {
                                  "type": "Variable",
                                  "name": "namedSpread"
                                },
                                {
                                  "type": "Text",
                                  "value": " in the document."
                                }
                              ]
                            },
                            {
                              "type": "ListItem",
                              "contents": [
                                {
                                  "type": "Text",
                                  "value": "Let "
                                },
                                {
                                  "type": "Variable",
                                  "name": "fragment"
                                },
                                {
                                  "type": "Text",
                                  "value": " be the target of "
                                },
                                {
                                  "type": "Variable",
                                  "name": "namedSpread"
                                }
                              ]
                            },
                            {
                              "type": "ListItem",
                              "contents": [
                                {
                                  "type": "Variable",
                                  "name": "fragment"
                                },
                                {
                                  "type": "Text",
                                  "value": " must be defined in the document"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "Subsection",
                      "header": {
                        "type": "Subheader",
                        "title": "Explanatory Text"
                      },
                      "contents": [
                        {
                          "type": "Paragraph",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "Named fragment spreads must refer to fragments defined within the document. It is a validation error if the target of a spread is not defined."
                            }
                          ]
                        },
                        {
                          "type": "Code",
                          "raw": false,
                          "lang": "graphql",
                          "example": true,
                          "counter": true,
                          "code": "{\n  dog {\n    ...undefinedFragment\n  }\n}\n"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "Section",
                  "header": {
                    "type": "Header",
                    "level": 4,
                    "secID": null,
                    "title": "Fragment spreads must not form cycles"
                  },
                  "contents": [
                    {
                      "type": "Subsection",
                      "header": {
                        "type": "Subheader",
                        "title": "Formal Specification"
                      },
                      "contents": [
                        {
                          "type": "List",
                          "ordered": false,
                          "items": [
                            {
                              "type": "ListItem",
                              "contents": [
                                {
                                  "type": "Text",
                                  "value": "For each "
                                },
                                {
                                  "type": "Variable",
                                  "name": "fragmentDefinition"
                                },
                                {
                                  "type": "Text",
                                  "value": " in the document"
                                }
                              ]
                            },
                            {
                              "type": "ListItem",
                              "contents": [
                                {
                                  "type": "Text",
                                  "value": "Let "
                                },
                                {
                                  "type": "Variable",
                                  "name": "visited"
                                },
                                {
                                  "type": "Text",
                                  "value": " be the empty set."
                                }
                              ]
                            },
                            {
                              "type": "ListItem",
                              "contents": [
                                {
                                  "type": "Call",
                                  "name": "DetectFragmentCycles",
                                  "args": [
                                    {
                                      "type": "Variable",
                                      "name": "fragmentDefinition"
                                    },
                                    {
                                      "type": "Variable",
                                      "name": "visited"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "Algorithm",
                          "call": {
                            "type": "Call",
                            "name": "DetectFragmentCycles",
                            "args": [
                              {
                                "type": "Variable",
                                "name": "fragmentDefinition"
                              },
                              {
                                "type": "Variable",
                                "name": "visited"
                              }
                            ]
                          },
                          "steps": {
                            "type": "List",
                            "ordered": true,
                            "items": [
                              {
                                "type": "ListItem",
                                "contents": [
                                  {
                                    "type": "Text",
                                    "value": "Let "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "spreads"
                                  },
                                  {
                                    "type": "Text",
                                    "value": " be all fragment spread descendants of "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "fragmentDefinition"
                                  }
                                ]
                              },
                              {
                                "type": "ListItem",
                                "contents": [
                                  {
                                    "type": "Text",
                                    "value": "For each "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "spread"
                                  },
                                  {
                                    "type": "Text",
                                    "value": " in "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "spreads"
                                  },
                                  {
                                    "type": "List",
                                    "ordered": true,
                                    "items": [
                                      {
                                        "type": "ListItem",
                                        "contents": [
                                          {
                                            "type": "Variable",
                                            "name": "visited"
                                          },
                                          {
                                            "type": "Text",
                                            "value": " must not contain "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "spread"
                                          }
                                        ]
                                      },
                                      {
                                        "type": "ListItem",
                                        "contents": [
                                          {
                                            "type": "Text",
                                            "value": "Let "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "nextVisited"
                                          },
                                          {
                                            "type": "Text",
                                            "value": " be the set including "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "spread"
                                          },
                                          {
                                            "type": "Text",
                                            "value": " and members of "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "visited"
                                          }
                                        ]
                                      },
                                      {
                                        "type": "ListItem",
                                        "contents": [
                                          {
                                            "type": "Text",
                                            "value": "Let "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "nextFragmentDefinition"
                                          },
                                          {
                                            "type": "Text",
                                            "value": " be the target of "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "spread"
                                          }
                                        ]
                                      },
                                      {
                                        "type": "ListItem",
                                        "contents": [
                                          {
                                            "type": "Call",
                                            "name": "DetectFragmentCycles",
                                            "args": [
                                              {
                                                "type": "Variable",
                                                "name": "nextFragmentDefinition"
                                              },
                                              {
                                                "type": "Variable",
                                                "name": "nextVisited"
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          }
                        }
                      ]
                    },
                    {
                      "type": "Subsection",
                      "header": {
                        "type": "Subheader",
                        "title": "Explanatory Text"
                      },
                      "contents": [
                        {
                          "type": "Paragraph",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "The graph of fragment spreads must not form any cycles including spreading itself. Otherwise an operation could infinitely spread or infinitely execute on cycles in the underlying data."
                            }
                          ]
                        },
                        {
                          "type": "Paragraph",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "This invalidates fragments that would result in an infinite spread:"
                            }
                          ]
                        },
                        {
                          "type": "Code",
                          "raw": false,
                          "lang": "graphql",
                          "example": true,
                          "counter": true,
                          "code": "{\n  dog {\n    ...nameFragment\n  }\n}\n\nfragment nameFragment on Dog {\n  name\n  ...barkVolumeFragment\n}\n\nfragment barkVolumeFragment on Dog {\n  barkVolume\n  ...nameFragment\n}\n"
                        },
                        {
                          "type": "Paragraph",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "If the above fragments were inlined, this would result in the infinitely large:"
                            }
                          ]
                        },
                        {
                          "type": "Code",
                          "raw": false,
                          "lang": "graphql",
                          "example": true,
                          "counter": false,
                          "code": "{\n  dog {\n    name\n    barkVolume\n    name\n    barkVolume\n    name\n    barkVolume\n    name\n    # forever...\n  }\n}\n"
                        },
                        {
                          "type": "Paragraph",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "This also invalidates fragments that would result in an infinite recursion when executed against cyclic data:"
                            }
                          ]
                        },
                        {
                          "type": "Code",
                          "raw": false,
                          "lang": "graphql",
                          "example": true,
                          "counter": true,
                          "code": "{\n  dog {\n    ...dogFragment\n  }\n}\n\nfragment dogFragment on Dog {\n  name\n  owner {\n    ...ownerFragment\n  }\n}\n\nfragment ownerFragment on Human {\n  name\n  pets {\n    ...dogFragment\n  }\n}\n"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "Section",
                  "header": {
                    "type": "Header",
                    "level": 4,
                    "secID": null,
                    "title": "Fragment spread is possible"
                  },
                  "contents": [
                    {
                      "type": "Subsection",
                      "header": {
                        "type": "Subheader",
                        "title": "Formal Specification"
                      },
                      "contents": [
                        {
                          "type": "List",
                          "ordered": false,
                          "items": [
                            {
                              "type": "ListItem",
                              "contents": [
                                {
                                  "type": "Text",
                                  "value": "For each "
                                },
                                {
                                  "type": "Variable",
                                  "name": "spread"
                                },
                                {
                                  "type": "Text",
                                  "value": " (named or inline) defined in the document."
                                }
                              ]
                            },
                            {
                              "type": "ListItem",
                              "contents": [
                                {
                                  "type": "Text",
                                  "value": "Let "
                                },
                                {
                                  "type": "Variable",
                                  "name": "fragment"
                                },
                                {
                                  "type": "Text",
                                  "value": " be the target of "
                                },
                                {
                                  "type": "Variable",
                                  "name": "spread"
                                }
                              ]
                            },
                            {
                              "type": "ListItem",
                              "contents": [
                                {
                                  "type": "Text",
                                  "value": "Let "
                                },
                                {
                                  "type": "Variable",
                                  "name": "fragmentType"
                                },
                                {
                                  "type": "Text",
                                  "value": " be the type condition of "
                                },
                                {
                                  "type": "Variable",
                                  "name": "fragment"
                                }
                              ]
                            },
                            {
                              "type": "ListItem",
                              "contents": [
                                {
                                  "type": "Text",
                                  "value": "Let "
                                },
                                {
                                  "type": "Variable",
                                  "name": "parentType"
                                },
                                {
                                  "type": "Text",
                                  "value": " be the type of the selection set containing "
                                },
                                {
                                  "type": "Variable",
                                  "name": "spread"
                                }
                              ]
                            },
                            {
                              "type": "ListItem",
                              "contents": [
                                {
                                  "type": "Text",
                                  "value": "Let "
                                },
                                {
                                  "type": "Variable",
                                  "name": "applicableTypes"
                                },
                                {
                                  "type": "Text",
                                  "value": " be the intersection of "
                                },
                                {
                                  "type": "Call",
                                  "name": "GetPossibleTypes",
                                  "args": [
                                    {
                                      "type": "Variable",
                                      "name": "fragmentType"
                                    }
                                  ]
                                },
                                {
                                  "type": "Text",
                                  "value": " and "
                                },
                                {
                                  "type": "Call",
                                  "name": "GetPossibleTypes",
                                  "args": [
                                    {
                                      "type": "Variable",
                                      "name": "parentType"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "ListItem",
                              "contents": [
                                {
                                  "type": "Variable",
                                  "name": "applicableTypes"
                                },
                                {
                                  "type": "Text",
                                  "value": " must not be empty."
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "Algorithm",
                          "call": {
                            "type": "Call",
                            "name": "GetPossibleTypes",
                            "args": [
                              {
                                "type": "Variable",
                                "name": "type"
                              }
                            ]
                          },
                          "steps": {
                            "type": "List",
                            "ordered": true,
                            "items": [
                              {
                                "type": "ListItem",
                                "contents": [
                                  {
                                    "type": "Text",
                                    "value": "If "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "type"
                                  },
                                  {
                                    "type": "Text",
                                    "value": " is an object type, return a set containing "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "type"
                                  }
                                ]
                              },
                              {
                                "type": "ListItem",
                                "contents": [
                                  {
                                    "type": "Text",
                                    "value": "If "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "type"
                                  },
                                  {
                                    "type": "Text",
                                    "value": " is an interface type, return the set of types implementing "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "type"
                                  }
                                ]
                              },
                              {
                                "type": "ListItem",
                                "contents": [
                                  {
                                    "type": "Text",
                                    "value": "If "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "type"
                                  },
                                  {
                                    "type": "Text",
                                    "value": " is a union type, return the set of possible types of "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "type"
                                  }
                                ]
                              }
                            ]
                          }
                        }
                      ]
                    },
                    {
                      "type": "Subsection",
                      "header": {
                        "type": "Subheader",
                        "title": "Explanatory Text"
                      },
                      "contents": [
                        {
                          "type": "Paragraph",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "Fragments are declared on a type and will only apply when the runtime object type matches the type condition. They also are spread within the context of a parent type. A fragment spread is only valid if its type condition could ever apply within the parent type."
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "Section",
                      "header": {
                        "type": "Header",
                        "level": 5,
                        "secID": null,
                        "title": "Object Spreads In Object Scope"
                      },
                      "contents": [
                        {
                          "type": "Paragraph",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "In the scope of an object type, the only valid object type fragment spread is one that applies to the same type that is in scope."
                            }
                          ]
                        },
                        {
                          "type": "Paragraph",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "For example"
                            }
                          ]
                        },
                        {
                          "type": "Code",
                          "raw": false,
                          "lang": "graphql",
                          "example": true,
                          "counter": false,
                          "code": "fragment dogFragment on Dog {\n  ... on Dog {\n    barkVolume\n  }\n}\n"
                        },
                        {
                          "type": "Paragraph",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "and the following is invalid"
                            }
                          ]
                        },
                        {
                          "type": "Code",
                          "raw": false,
                          "lang": "graphql",
                          "example": true,
                          "counter": true,
                          "code": "fragment catInDogFragmentInvalid on Dog {\n  ... on Cat {\n    meowVolume\n  }\n}\n"
                        }
                      ]
                    },
                    {
                      "type": "Section",
                      "header": {
                        "type": "Header",
                        "level": 5,
                        "secID": null,
                        "title": "Abstract Spreads in Object Scope"
                      },
                      "contents": [
                        {
                          "type": "Paragraph",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "In scope of an object type, unions or interface spreads can be used if the object type implements the interface or is a member of the union."
                            }
                          ]
                        },
                        {
                          "type": "Paragraph",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "For example"
                            }
                          ]
                        },
                        {
                          "type": "Code",
                          "raw": false,
                          "lang": "graphql",
                          "example": true,
                          "counter": false,
                          "code": "fragment petNameFragment on Pet {\n  name\n}\n\nfragment interfaceWithinObjectFragment on Dog {\n  ...petNameFragment\n}\n"
                        },
                        {
                          "type": "Paragraph",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "is valid because "
                            },
                            {
                              "type": "NonTerminal",
                              "name": "Dog",
                              "params": null
                            },
                            {
                              "type": "Text",
                              "value": " implements Pet."
                            }
                          ]
                        },
                        {
                          "type": "Paragraph",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "Likewise"
                            }
                          ]
                        },
                        {
                          "type": "Code",
                          "raw": false,
                          "lang": "graphql",
                          "example": true,
                          "counter": false,
                          "code": "fragment catOrDogNameFragment on CatOrDog {\n  ... on Cat {\n    meowVolume\n  }\n}\n\nfragment unionWithObjectFragment on Dog {\n  ...catOrDogNameFragment\n}\n"
                        },
                        {
                          "type": "Paragraph",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "is valid because "
                            },
                            {
                              "type": "NonTerminal",
                              "name": "Dog",
                              "params": null
                            },
                            {
                              "type": "Text",
                              "value": " is a member of the "
                            },
                            {
                              "type": "NonTerminal",
                              "name": "CatOrDog",
                              "params": null
                            },
                            {
                              "type": "Text",
                              "value": " union. It is worth noting that if one inspected the contents of the "
                            },
                            {
                              "type": "NonTerminal",
                              "name": "CatOrDogNameFragment",
                              "params": null
                            },
                            {
                              "type": "Text",
                              "value": " you could note that no valid results would ever be returned. However we do not specify this as invalid because we only consider the fragment declaration, not its body."
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "Section",
                      "header": {
                        "type": "Header",
                        "level": 5,
                        "secID": null,
                        "title": "Object Spreads In Abstract Scope"
                      },
                      "contents": [
                        {
                          "type": "Paragraph",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "Union or interface spreads can be used within the context of an object type fragment, but only if the object type is one of the possible types of that interface or union."
                            }
                          ]
                        },
                        {
                          "type": "Paragraph",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "For example, the following fragments are valid:"
                            }
                          ]
                        },
                        {
                          "type": "Code",
                          "raw": false,
                          "lang": "graphql",
                          "example": true,
                          "counter": false,
                          "code": "fragment petFragment on Pet {\n  name\n  ... on Dog {\n    barkVolume\n  }\n}\n\nfragment catOrDogFragment on CatOrDog {\n  ... on Cat {\n    meowVolume\n  }\n}\n"
                        },
                        {
                          "type": "Paragraph",
                          "contents": [
                            {
                              "type": "Variable",
                              "name": "petFragment"
                            },
                            {
                              "type": "Text",
                              "value": " is valid because "
                            },
                            {
                              "type": "NonTerminal",
                              "name": "Dog",
                              "params": null
                            },
                            {
                              "type": "Text",
                              "value": " implements the interface "
                            },
                            {
                              "type": "NonTerminal",
                              "name": "Pet",
                              "params": null
                            },
                            {
                              "type": "Text",
                              "value": ". "
                            },
                            {
                              "type": "Variable",
                              "name": "catOrDogFragment"
                            },
                            {
                              "type": "Text",
                              "value": " is valid because "
                            },
                            {
                              "type": "NonTerminal",
                              "name": "Cat",
                              "params": null
                            },
                            {
                              "type": "Text",
                              "value": " is a member of the "
                            },
                            {
                              "type": "NonTerminal",
                              "name": "CatOrDog",
                              "params": null
                            },
                            {
                              "type": "Text",
                              "value": " union."
                            }
                          ]
                        },
                        {
                          "type": "Paragraph",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "By contrast the following fragments are invalid:"
                            }
                          ]
                        },
                        {
                          "type": "Code",
                          "raw": false,
                          "lang": "graphql",
                          "example": true,
                          "counter": true,
                          "code": "fragment sentientFragment on Sentient {\n  ... on Dog {\n    barkVolume\n  }\n}\n\nfragment humanOrAlienFragment on HumanOrAlien {\n  ... on Cat {\n    meowVolume\n  }\n}\n"
                        },
                        {
                          "type": "Paragraph",
                          "contents": [
                            {
                              "type": "NonTerminal",
                              "name": "Dog",
                              "params": null
                            },
                            {
                              "type": "Text",
                              "value": " does not implement the interface "
                            },
                            {
                              "type": "NonTerminal",
                              "name": "Sentient",
                              "params": null
                            },
                            {
                              "type": "Text",
                              "value": " and therefore "
                            },
                            {
                              "type": "Variable",
                              "name": "sentientFragment"
                            },
                            {
                              "type": "Text",
                              "value": " can never return meaningful results. Therefore the fragment is invalid. Likewise "
                            },
                            {
                              "type": "NonTerminal",
                              "name": "Cat",
                              "params": null
                            },
                            {
                              "type": "Text",
                              "value": " is not a member of the union "
                            },
                            {
                              "type": "NonTerminal",
                              "name": "HumanOrAlien",
                              "params": null
                            },
                            {
                              "type": "Text",
                              "value": ", and it can also never return meaningful results, making it invalid."
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "Section",
                      "header": {
                        "type": "Header",
                        "level": 5,
                        "secID": null,
                        "title": "Abstract Spreads in Abstract Scope"
                      },
                      "contents": [
                        {
                          "type": "Paragraph",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "Union or interfaces fragments can be used within each other. As long as there exists at least "
                            },
                            {
                              "type": "Italic",
                              "contents": [
                                {
                                  "type": "Text",
                                  "value": "one"
                                }
                              ]
                            },
                            {
                              "type": "Text",
                              "value": " object type that exists in the intersection of the possible types of the scope and the spread, the spread is considered valid."
                            }
                          ]
                        },
                        {
                          "type": "Paragraph",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "So for example"
                            }
                          ]
                        },
                        {
                          "type": "Code",
                          "raw": false,
                          "lang": "graphql",
                          "example": true,
                          "counter": false,
                          "code": "fragment unionWithInterface on Pet {\n  ...dogOrHumanFragment\n}\n\nfragment dogOrHumanFragment on DogOrHuman {\n  ... on Dog {\n    barkVolume\n  }\n}\n"
                        },
                        {
                          "type": "Paragraph",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "is considered valid because "
                            },
                            {
                              "type": "NonTerminal",
                              "name": "Dog",
                              "params": null
                            },
                            {
                              "type": "Text",
                              "value": " implements interface "
                            },
                            {
                              "type": "NonTerminal",
                              "name": "Pet",
                              "params": null
                            },
                            {
                              "type": "Text",
                              "value": " and is a member of "
                            },
                            {
                              "type": "NonTerminal",
                              "name": "DogOrHuman",
                              "params": null
                            },
                            {
                              "type": "Text",
                              "value": "."
                            }
                          ]
                        },
                        {
                          "type": "Paragraph",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "However"
                            }
                          ]
                        },
                        {
                          "type": "Code",
                          "raw": false,
                          "lang": "graphql",
                          "example": true,
                          "counter": true,
                          "code": "fragment nonIntersectingInterfaces on Pet {\n  ...sentientFragment\n}\n\nfragment sentientFragment on Sentient {\n  name\n}\n"
                        },
                        {
                          "type": "Paragraph",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "is not valid because there exists no type that implements both "
                            },
                            {
                              "type": "NonTerminal",
                              "name": "Pet",
                              "params": null
                            },
                            {
                              "type": "Text",
                              "value": " and "
                            },
                            {
                              "type": "NonTerminal",
                              "name": "Sentient",
                              "params": null
                            },
                            {
                              "type": "Text",
                              "value": "."
                            }
                          ]
                        },
                        {
                          "type": "Subsection",
                          "header": {
                            "type": "Subheader",
                            "title": "Interface Spreads in implemented Interface Scope"
                          },
                          "contents": [
                            {
                              "type": "Paragraph",
                              "contents": [
                                {
                                  "type": "Text",
                                  "value": "Additionally, an interface type fragment can always be spread into an interface scope which it implements."
                                }
                              ]
                            },
                            {
                              "type": "Paragraph",
                              "contents": [
                                {
                                  "type": "Text",
                                  "value": "In the example below, the "
                                },
                                {
                                  "type": "InlineCode",
                                  "code": "...resourceFragment"
                                },
                                {
                                  "type": "Text",
                                  "value": " fragments spreads is valid, since "
                                },
                                {
                                  "type": "InlineCode",
                                  "code": "Resource"
                                },
                                {
                                  "type": "Text",
                                  "value": " implements "
                                },
                                {
                                  "type": "InlineCode",
                                  "code": "Node"
                                },
                                {
                                  "type": "Text",
                                  "value": "."
                                }
                              ]
                            },
                            {
                              "type": "Code",
                              "raw": false,
                              "lang": "graphql",
                              "example": true,
                              "counter": false,
                              "code": "interface Node {\n  id: ID!\n}\n\ninterface Resource implements Node {\n  id: ID!\n  url: String\n}\n\nfragment interfaceWithInterface on Node {\n  ...resourceFragment\n}\n\nfragment resourceFragment on Resource {\n  url\n}\n"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Values"
          },
          "contents": [
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Values of Correct Type"
              },
              "contents": [
                {
                  "type": "Subsection",
                  "header": {
                    "type": "Subheader",
                    "title": "Formal Specification"
                  },
                  "contents": [
                    {
                      "type": "List",
                      "ordered": false,
                      "items": [
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "For each input Value "
                            },
                            {
                              "type": "Variable",
                              "name": "value"
                            },
                            {
                              "type": "Text",
                              "value": " in the document."
                            },
                            {
                              "type": "List",
                              "ordered": false,
                              "items": [
                                {
                                  "type": "ListItem",
                                  "contents": [
                                    {
                                      "type": "Text",
                                      "value": "Let "
                                    },
                                    {
                                      "type": "Variable",
                                      "name": "type"
                                    },
                                    {
                                      "type": "Text",
                                      "value": " be the type expected in the position "
                                    },
                                    {
                                      "type": "Variable",
                                      "name": "value"
                                    },
                                    {
                                      "type": "Text",
                                      "value": " is found."
                                    }
                                  ]
                                },
                                {
                                  "type": "ListItem",
                                  "contents": [
                                    {
                                      "type": "Variable",
                                      "name": "value"
                                    },
                                    {
                                      "type": "Text",
                                      "value": " must be coercible to "
                                    },
                                    {
                                      "type": "Variable",
                                      "name": "type"
                                    },
                                    {
                                      "type": "Text",
                                      "value": "."
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "Subsection",
                  "header": {
                    "type": "Subheader",
                    "title": "Explanatory Text"
                  },
                  "contents": [
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Literal values must be compatible with the type expected in the position they are found as per the coercion rules defined in the Type System chapter."
                        }
                      ]
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "The type expected in a position includes the type defined by the argument a value is provided for, the type defined by an input object field a value is provided for, and the type of a variable definition a default value is provided for."
                        }
                      ]
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "The following examples are valid use of value literals:"
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": "graphql",
                      "example": true,
                      "counter": false,
                      "code": "fragment goodBooleanArg on Arguments {\n  booleanArgField(booleanArg: true)\n}\n\nfragment coercedIntIntoFloatArg on Arguments {\n  # Note: The input coercion rules for Float allow Int literals.\n  floatArgField(floatArg: 123)\n}\n\nquery goodComplexDefaultValue($search: ComplexInput = { name: \"Fido\" }) {\n  findDog(complex: $search)\n}\n"
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Non-coercible values (such as a String into an Int) are invalid. The following examples are invalid:"
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": "graphql",
                      "example": true,
                      "counter": true,
                      "code": "fragment stringIntoInt on Arguments {\n  intArgField(intArg: \"123\")\n}\n\nquery badComplexValue {\n  findDog(complex: { name: 123 })\n}\n"
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Input Object Field Names"
              },
              "contents": [
                {
                  "type": "Subsection",
                  "header": {
                    "type": "Subheader",
                    "title": "Formal Specification"
                  },
                  "contents": [
                    {
                      "type": "List",
                      "ordered": false,
                      "items": [
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "For each Input Object Field "
                            },
                            {
                              "type": "Variable",
                              "name": "inputField"
                            },
                            {
                              "type": "Text",
                              "value": " in the document"
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "Let "
                            },
                            {
                              "type": "Variable",
                              "name": "inputFieldName"
                            },
                            {
                              "type": "Text",
                              "value": " be the Name of "
                            },
                            {
                              "type": "Variable",
                              "name": "inputField"
                            },
                            {
                              "type": "Text",
                              "value": "."
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "Let "
                            },
                            {
                              "type": "Variable",
                              "name": "inputFieldDefinition"
                            },
                            {
                              "type": "Text",
                              "value": " be the input field definition provided by the parent input object type named "
                            },
                            {
                              "type": "Variable",
                              "name": "inputFieldName"
                            },
                            {
                              "type": "Text",
                              "value": "."
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Variable",
                              "name": "inputFieldDefinition"
                            },
                            {
                              "type": "Text",
                              "value": " must exist."
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "Subsection",
                  "header": {
                    "type": "Subheader",
                    "title": "Explanatory Text"
                  },
                  "contents": [
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Every input field provided in an input object value must be defined in the set of possible fields of that input object’s expected type."
                        }
                      ]
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "For example the following example input object is valid:"
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": "graphql",
                      "example": true,
                      "counter": false,
                      "code": "{\n  findDog(complex: { name: \"Fido\" })\n}\n"
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "While the following example input-object uses a field “favoriteCookieFlavor” which is not defined on the expected type:"
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": "graphql",
                      "example": true,
                      "counter": true,
                      "code": "{\n  findDog(complex: { favoriteCookieFlavor: \"Bacon\" })\n}\n"
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Input Object Field Uniqueness"
              },
              "contents": [
                {
                  "type": "Subsection",
                  "header": {
                    "type": "Subheader",
                    "title": "Formal Specification"
                  },
                  "contents": [
                    {
                      "type": "List",
                      "ordered": false,
                      "items": [
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "For each input object value "
                            },
                            {
                              "type": "Variable",
                              "name": "inputObject"
                            },
                            {
                              "type": "Text",
                              "value": " in the document."
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "For every "
                            },
                            {
                              "type": "Variable",
                              "name": "inputField"
                            },
                            {
                              "type": "Text",
                              "value": " in "
                            },
                            {
                              "type": "Variable",
                              "name": "inputObject"
                            },
                            {
                              "type": "List",
                              "ordered": false,
                              "items": [
                                {
                                  "type": "ListItem",
                                  "contents": [
                                    {
                                      "type": "Text",
                                      "value": "Let "
                                    },
                                    {
                                      "type": "Variable",
                                      "name": "name"
                                    },
                                    {
                                      "type": "Text",
                                      "value": " be the Name of "
                                    },
                                    {
                                      "type": "Variable",
                                      "name": "inputField"
                                    },
                                    {
                                      "type": "Text",
                                      "value": "."
                                    }
                                  ]
                                },
                                {
                                  "type": "ListItem",
                                  "contents": [
                                    {
                                      "type": "Text",
                                      "value": "Let "
                                    },
                                    {
                                      "type": "Variable",
                                      "name": "fields"
                                    },
                                    {
                                      "type": "Text",
                                      "value": " be all Input Object Fields named "
                                    },
                                    {
                                      "type": "Variable",
                                      "name": "name"
                                    },
                                    {
                                      "type": "Text",
                                      "value": " in "
                                    },
                                    {
                                      "type": "Variable",
                                      "name": "inputObject"
                                    },
                                    {
                                      "type": "Text",
                                      "value": "."
                                    }
                                  ]
                                },
                                {
                                  "type": "ListItem",
                                  "contents": [
                                    {
                                      "type": "Variable",
                                      "name": "fields"
                                    },
                                    {
                                      "type": "Text",
                                      "value": " must be the set containing only "
                                    },
                                    {
                                      "type": "Variable",
                                      "name": "inputField"
                                    },
                                    {
                                      "type": "Text",
                                      "value": "."
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "Subsection",
                  "header": {
                    "type": "Subheader",
                    "title": "Explanatory Text"
                  },
                  "contents": [
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Input objects must not contain more than one field of the same name, otherwise an ambiguity would exist which includes an ignored portion of syntax."
                        }
                      ]
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "For example the following query will not pass validation."
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": "graphql",
                      "example": true,
                      "counter": true,
                      "code": "{\n  field(arg: { field: true, field: false })\n}\n"
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Input Object Required Fields"
              },
              "contents": [
                {
                  "type": "Subsection",
                  "header": {
                    "type": "Subheader",
                    "title": "Formal Specification"
                  },
                  "contents": [
                    {
                      "type": "List",
                      "ordered": false,
                      "items": [
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "For each Input Object in the document."
                            },
                            {
                              "type": "List",
                              "ordered": false,
                              "items": [
                                {
                                  "type": "ListItem",
                                  "contents": [
                                    {
                                      "type": "Text",
                                      "value": "Let "
                                    },
                                    {
                                      "type": "Variable",
                                      "name": "fields"
                                    },
                                    {
                                      "type": "Text",
                                      "value": " be the fields provided by that Input Object."
                                    }
                                  ]
                                },
                                {
                                  "type": "ListItem",
                                  "contents": [
                                    {
                                      "type": "Text",
                                      "value": "Let "
                                    },
                                    {
                                      "type": "Variable",
                                      "name": "fieldDefinitions"
                                    },
                                    {
                                      "type": "Text",
                                      "value": " be the set of input field definitions of that Input Object."
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "For each "
                            },
                            {
                              "type": "Variable",
                              "name": "fieldDefinition"
                            },
                            {
                              "type": "Text",
                              "value": " in "
                            },
                            {
                              "type": "Variable",
                              "name": "fieldDefinitions"
                            },
                            {
                              "type": "Text",
                              "value": ":"
                            },
                            {
                              "type": "List",
                              "ordered": false,
                              "items": [
                                {
                                  "type": "ListItem",
                                  "contents": [
                                    {
                                      "type": "Text",
                                      "value": "Let "
                                    },
                                    {
                                      "type": "Variable",
                                      "name": "type"
                                    },
                                    {
                                      "type": "Text",
                                      "value": " be the expected type of "
                                    },
                                    {
                                      "type": "Variable",
                                      "name": "fieldDefinition"
                                    },
                                    {
                                      "type": "Text",
                                      "value": "."
                                    }
                                  ]
                                },
                                {
                                  "type": "ListItem",
                                  "contents": [
                                    {
                                      "type": "Text",
                                      "value": "Let "
                                    },
                                    {
                                      "type": "Variable",
                                      "name": "defaultValue"
                                    },
                                    {
                                      "type": "Text",
                                      "value": " be the default value of "
                                    },
                                    {
                                      "type": "Variable",
                                      "name": "fieldDefinition"
                                    },
                                    {
                                      "type": "Text",
                                      "value": "."
                                    }
                                  ]
                                },
                                {
                                  "type": "ListItem",
                                  "contents": [
                                    {
                                      "type": "Text",
                                      "value": "If "
                                    },
                                    {
                                      "type": "Variable",
                                      "name": "type"
                                    },
                                    {
                                      "type": "Text",
                                      "value": " is Non-Null and "
                                    },
                                    {
                                      "type": "Variable",
                                      "name": "defaultValue"
                                    },
                                    {
                                      "type": "Text",
                                      "value": " does not exist:"
                                    },
                                    {
                                      "type": "List",
                                      "ordered": false,
                                      "items": [
                                        {
                                          "type": "ListItem",
                                          "contents": [
                                            {
                                              "type": "Text",
                                              "value": "Let "
                                            },
                                            {
                                              "type": "Variable",
                                              "name": "fieldName"
                                            },
                                            {
                                              "type": "Text",
                                              "value": " be the name of "
                                            },
                                            {
                                              "type": "Variable",
                                              "name": "fieldDefinition"
                                            },
                                            {
                                              "type": "Text",
                                              "value": "."
                                            }
                                          ]
                                        },
                                        {
                                          "type": "ListItem",
                                          "contents": [
                                            {
                                              "type": "Text",
                                              "value": "Let "
                                            },
                                            {
                                              "type": "Variable",
                                              "name": "field"
                                            },
                                            {
                                              "type": "Text",
                                              "value": " be the input field in "
                                            },
                                            {
                                              "type": "Variable",
                                              "name": "fields"
                                            },
                                            {
                                              "type": "Text",
                                              "value": " named "
                                            },
                                            {
                                              "type": "Variable",
                                              "name": "fieldName"
                                            }
                                          ]
                                        },
                                        {
                                          "type": "ListItem",
                                          "contents": [
                                            {
                                              "type": "Variable",
                                              "name": "field"
                                            },
                                            {
                                              "type": "Text",
                                              "value": " must exist."
                                            }
                                          ]
                                        },
                                        {
                                          "type": "ListItem",
                                          "contents": [
                                            {
                                              "type": "Text",
                                              "value": "Let "
                                            },
                                            {
                                              "type": "Variable",
                                              "name": "value"
                                            },
                                            {
                                              "type": "Text",
                                              "value": " be the value of "
                                            },
                                            {
                                              "type": "Variable",
                                              "name": "field"
                                            },
                                            {
                                              "type": "Text",
                                              "value": "."
                                            }
                                          ]
                                        },
                                        {
                                          "type": "ListItem",
                                          "contents": [
                                            {
                                              "type": "Variable",
                                              "name": "value"
                                            },
                                            {
                                              "type": "Text",
                                              "value": " must not be the "
                                            },
                                            {
                                              "type": "Keyword",
                                              "value": "null"
                                            },
                                            {
                                              "type": "Text",
                                              "value": " literal."
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "Subsection",
                  "header": {
                    "type": "Subheader",
                    "title": "Explanatory Text"
                  },
                  "contents": [
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Input object fields may be required. Much like a field may have required arguments, an input object may have required fields. An input field is required if it has a non-null type and does not have a default value. Otherwise, the input object field is optional."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Directives"
          },
          "contents": [
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Directives Are Defined"
              },
              "contents": [
                {
                  "type": "Subsection",
                  "header": {
                    "type": "Subheader",
                    "title": "Formal Specification"
                  },
                  "contents": [
                    {
                      "type": "List",
                      "ordered": false,
                      "items": [
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "For every "
                            },
                            {
                              "type": "Variable",
                              "name": "directive"
                            },
                            {
                              "type": "Text",
                              "value": " in a document."
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "Let "
                            },
                            {
                              "type": "Variable",
                              "name": "directiveName"
                            },
                            {
                              "type": "Text",
                              "value": " be the name of "
                            },
                            {
                              "type": "Variable",
                              "name": "directive"
                            },
                            {
                              "type": "Text",
                              "value": "."
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "Let "
                            },
                            {
                              "type": "Variable",
                              "name": "directiveDefinition"
                            },
                            {
                              "type": "Text",
                              "value": " be the directive named "
                            },
                            {
                              "type": "Variable",
                              "name": "directiveName"
                            },
                            {
                              "type": "Text",
                              "value": "."
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Variable",
                              "name": "directiveDefinition"
                            },
                            {
                              "type": "Text",
                              "value": " must exist."
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "Subsection",
                  "header": {
                    "type": "Subheader",
                    "title": "Explanatory Text"
                  },
                  "contents": [
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "GraphQL services define what directives they support. For each usage of a directive, the directive must be available on that service."
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Directives Are In Valid Locations"
              },
              "contents": [
                {
                  "type": "Subsection",
                  "header": {
                    "type": "Subheader",
                    "title": "Formal Specification"
                  },
                  "contents": [
                    {
                      "type": "List",
                      "ordered": false,
                      "items": [
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "For every "
                            },
                            {
                              "type": "Variable",
                              "name": "directive"
                            },
                            {
                              "type": "Text",
                              "value": " in a document."
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "Let "
                            },
                            {
                              "type": "Variable",
                              "name": "directiveName"
                            },
                            {
                              "type": "Text",
                              "value": " be the name of "
                            },
                            {
                              "type": "Variable",
                              "name": "directive"
                            },
                            {
                              "type": "Text",
                              "value": "."
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "Let "
                            },
                            {
                              "type": "Variable",
                              "name": "directiveDefinition"
                            },
                            {
                              "type": "Text",
                              "value": " be the directive named "
                            },
                            {
                              "type": "Variable",
                              "name": "directiveName"
                            },
                            {
                              "type": "Text",
                              "value": "."
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "Let "
                            },
                            {
                              "type": "Variable",
                              "name": "locations"
                            },
                            {
                              "type": "Text",
                              "value": " be the valid locations for "
                            },
                            {
                              "type": "Variable",
                              "name": "directiveDefinition"
                            },
                            {
                              "type": "Text",
                              "value": "."
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "Let "
                            },
                            {
                              "type": "Variable",
                              "name": "adjacent"
                            },
                            {
                              "type": "Text",
                              "value": " be the AST node the directive affects."
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Variable",
                              "name": "adjacent"
                            },
                            {
                              "type": "Text",
                              "value": " must be represented by an item within "
                            },
                            {
                              "type": "Variable",
                              "name": "locations"
                            },
                            {
                              "type": "Text",
                              "value": "."
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "Subsection",
                  "header": {
                    "type": "Subheader",
                    "title": "Explanatory Text"
                  },
                  "contents": [
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "GraphQL services define what directives they support and where they support them. For each usage of a directive, the directive must be used in a location that the service has declared support for."
                        }
                      ]
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "For example the following query will not pass validation because "
                        },
                        {
                          "type": "InlineCode",
                          "code": "@skip"
                        },
                        {
                          "type": "Text",
                          "value": " does not provide "
                        },
                        {
                          "type": "InlineCode",
                          "code": "QUERY"
                        },
                        {
                          "type": "Text",
                          "value": " as a valid location."
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": "graphql",
                      "example": true,
                      "counter": true,
                      "code": "query @skip(if: $foo) {\n  field\n}\n"
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Directives Are Unique Per Location"
              },
              "contents": [
                {
                  "type": "Subsection",
                  "header": {
                    "type": "Subheader",
                    "title": "Formal Specification"
                  },
                  "contents": [
                    {
                      "type": "List",
                      "ordered": false,
                      "items": [
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "For every "
                            },
                            {
                              "type": "Variable",
                              "name": "location"
                            },
                            {
                              "type": "Text",
                              "value": " in the document for which Directives can apply:"
                            },
                            {
                              "type": "List",
                              "ordered": false,
                              "items": [
                                {
                                  "type": "ListItem",
                                  "contents": [
                                    {
                                      "type": "Text",
                                      "value": "Let "
                                    },
                                    {
                                      "type": "Variable",
                                      "name": "directives"
                                    },
                                    {
                                      "type": "Text",
                                      "value": " be the set of Directives which apply to "
                                    },
                                    {
                                      "type": "Variable",
                                      "name": "location"
                                    },
                                    {
                                      "type": "Text",
                                      "value": " and are not repeatable."
                                    }
                                  ]
                                },
                                {
                                  "type": "ListItem",
                                  "contents": [
                                    {
                                      "type": "Text",
                                      "value": "For each "
                                    },
                                    {
                                      "type": "Variable",
                                      "name": "directive"
                                    },
                                    {
                                      "type": "Text",
                                      "value": " in "
                                    },
                                    {
                                      "type": "Variable",
                                      "name": "directives"
                                    },
                                    {
                                      "type": "Text",
                                      "value": ":"
                                    },
                                    {
                                      "type": "List",
                                      "ordered": false,
                                      "items": [
                                        {
                                          "type": "ListItem",
                                          "contents": [
                                            {
                                              "type": "Text",
                                              "value": "Let "
                                            },
                                            {
                                              "type": "Variable",
                                              "name": "directiveName"
                                            },
                                            {
                                              "type": "Text",
                                              "value": " be the name of "
                                            },
                                            {
                                              "type": "Variable",
                                              "name": "directive"
                                            },
                                            {
                                              "type": "Text",
                                              "value": "."
                                            }
                                          ]
                                        },
                                        {
                                          "type": "ListItem",
                                          "contents": [
                                            {
                                              "type": "Text",
                                              "value": "Let "
                                            },
                                            {
                                              "type": "Variable",
                                              "name": "namedDirectives"
                                            },
                                            {
                                              "type": "Text",
                                              "value": " be the set of all Directives named "
                                            },
                                            {
                                              "type": "Variable",
                                              "name": "directiveName"
                                            },
                                            {
                                              "type": "Text",
                                              "value": " in "
                                            },
                                            {
                                              "type": "Variable",
                                              "name": "directives"
                                            },
                                            {
                                              "type": "Text",
                                              "value": "."
                                            }
                                          ]
                                        },
                                        {
                                          "type": "ListItem",
                                          "contents": [
                                            {
                                              "type": "Variable",
                                              "name": "namedDirectives"
                                            },
                                            {
                                              "type": "Text",
                                              "value": " must be a set of one."
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "Subsection",
                  "header": {
                    "type": "Subheader",
                    "title": "Explanatory Text"
                  },
                  "contents": [
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Directives are used to describe some metadata or behavioral change on the definition they apply to. When more than one directive of the same name is used, the expected metadata or behavior becomes ambiguous, therefore only one of each directive is allowed per location."
                        }
                      ]
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "For example, the following query will not pass validation because "
                        },
                        {
                          "type": "InlineCode",
                          "code": "@skip"
                        },
                        {
                          "type": "Text",
                          "value": " has been used twice for the same field:"
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": "graphql",
                      "example": true,
                      "counter": true,
                      "code": "query ($foo: Boolean = true, $bar: Boolean = false) {\n  field @skip(if: $foo) @skip(if: $bar)\n}\n"
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "However the following example is valid because "
                        },
                        {
                          "type": "InlineCode",
                          "code": "@skip"
                        },
                        {
                          "type": "Text",
                          "value": " has been used only once per location, despite being used twice in the query and on the same named field:"
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": "graphql",
                      "example": true,
                      "counter": false,
                      "code": "query ($foo: Boolean = true, $bar: Boolean = false) {\n  field @skip(if: $foo) {\n    subfieldA\n  }\n  field @skip(if: $bar) {\n    subfieldB\n  }\n}\n"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Variables"
          },
          "contents": [
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Variable Uniqueness"
              },
              "contents": [
                {
                  "type": "Subsection",
                  "header": {
                    "type": "Subheader",
                    "title": "Formal Specification"
                  },
                  "contents": [
                    {
                      "type": "List",
                      "ordered": false,
                      "items": [
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "For every "
                            },
                            {
                              "type": "Variable",
                              "name": "operation"
                            },
                            {
                              "type": "Text",
                              "value": " in the document"
                            },
                            {
                              "type": "List",
                              "ordered": false,
                              "items": [
                                {
                                  "type": "ListItem",
                                  "contents": [
                                    {
                                      "type": "Text",
                                      "value": "For every "
                                    },
                                    {
                                      "type": "Variable",
                                      "name": "variable"
                                    },
                                    {
                                      "type": "Text",
                                      "value": " defined on "
                                    },
                                    {
                                      "type": "Variable",
                                      "name": "operation"
                                    },
                                    {
                                      "type": "List",
                                      "ordered": false,
                                      "items": [
                                        {
                                          "type": "ListItem",
                                          "contents": [
                                            {
                                              "type": "Text",
                                              "value": "Let "
                                            },
                                            {
                                              "type": "Variable",
                                              "name": "variableName"
                                            },
                                            {
                                              "type": "Text",
                                              "value": " be the name of "
                                            },
                                            {
                                              "type": "Variable",
                                              "name": "variable"
                                            }
                                          ]
                                        },
                                        {
                                          "type": "ListItem",
                                          "contents": [
                                            {
                                              "type": "Text",
                                              "value": "Let "
                                            },
                                            {
                                              "type": "Variable",
                                              "name": "variables"
                                            },
                                            {
                                              "type": "Text",
                                              "value": " be the set of all variables named "
                                            },
                                            {
                                              "type": "Variable",
                                              "name": "variableName"
                                            },
                                            {
                                              "type": "Text",
                                              "value": " on "
                                            },
                                            {
                                              "type": "Variable",
                                              "name": "operation"
                                            }
                                          ]
                                        },
                                        {
                                          "type": "ListItem",
                                          "contents": [
                                            {
                                              "type": "Variable",
                                              "name": "variables"
                                            },
                                            {
                                              "type": "Text",
                                              "value": " must be a set of one"
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "Subsection",
                  "header": {
                    "type": "Subheader",
                    "title": "Explanatory Text"
                  },
                  "contents": [
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "If any operation defines more than one variable with the same name, it is ambiguous and invalid. It is invalid even if the type of the duplicate variable is the same."
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": "graphql",
                      "example": true,
                      "counter": true,
                      "code": "query houseTrainedQuery($atOtherHomes: Boolean, $atOtherHomes: Boolean) {\n  dog {\n    isHousetrained(atOtherHomes: $atOtherHomes)\n  }\n}\n"
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "It is valid for multiple operations to define a variable with the same name. If two operations reference the same fragment, it might actually be necessary:"
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": "graphql",
                      "example": true,
                      "counter": false,
                      "code": "query A($atOtherHomes: Boolean) {\n  ...HouseTrainedFragment\n}\n\nquery B($atOtherHomes: Boolean) {\n  ...HouseTrainedFragment\n}\n\nfragment HouseTrainedFragment on Query {\n  dog {\n    isHousetrained(atOtherHomes: $atOtherHomes)\n  }\n}\n"
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Variables Are Input Types"
              },
              "contents": [
                {
                  "type": "Subsection",
                  "header": {
                    "type": "Subheader",
                    "title": "Formal Specification"
                  },
                  "contents": [
                    {
                      "type": "List",
                      "ordered": false,
                      "items": [
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "For every "
                            },
                            {
                              "type": "Variable",
                              "name": "operation"
                            },
                            {
                              "type": "Text",
                              "value": " in a "
                            },
                            {
                              "type": "Variable",
                              "name": "document"
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "For every "
                            },
                            {
                              "type": "Variable",
                              "name": "variable"
                            },
                            {
                              "type": "Text",
                              "value": " on each "
                            },
                            {
                              "type": "Variable",
                              "name": "operation"
                            },
                            {
                              "type": "List",
                              "ordered": false,
                              "items": [
                                {
                                  "type": "ListItem",
                                  "contents": [
                                    {
                                      "type": "Text",
                                      "value": "Let "
                                    },
                                    {
                                      "type": "Variable",
                                      "name": "variableType"
                                    },
                                    {
                                      "type": "Text",
                                      "value": " be the type of "
                                    },
                                    {
                                      "type": "Variable",
                                      "name": "variable"
                                    }
                                  ]
                                },
                                {
                                  "type": "ListItem",
                                  "contents": [
                                    {
                                      "type": "Call",
                                      "name": "IsInputType",
                                      "args": [
                                        {
                                          "type": "Variable",
                                          "name": "variableType"
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Text",
                                      "value": " must be "
                                    },
                                    {
                                      "type": "Keyword",
                                      "value": "true"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "Subsection",
                  "header": {
                    "type": "Subheader",
                    "title": "Explanatory Text"
                  },
                  "contents": [
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Variables can only be input types. Objects, unions, and interfaces cannot be used as inputs."
                        }
                      ]
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "For these examples, consider the following typesystem additions:"
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": "graphql",
                      "example": true,
                      "counter": false,
                      "code": "input ComplexInput { name: String, owner: String }\n\nextend type Query {\n  findDog(complex: ComplexInput): Dog\n  booleanList(booleanListArg: [Boolean!]): Boolean\n}\n"
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "The following queries are valid:"
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": "graphql",
                      "example": true,
                      "counter": false,
                      "code": "query takesBoolean($atOtherHomes: Boolean) {\n  dog {\n    isHousetrained(atOtherHomes: $atOtherHomes)\n  }\n}\n\nquery takesComplexInput($complexInput: ComplexInput) {\n  findDog(complex: $complexInput) {\n    name\n  }\n}\n\nquery TakesListOfBooleanBang($booleans: [Boolean!]) {\n  booleanList(booleanListArg: $booleans)\n}\n"
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "The following queries are invalid:"
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": "graphql",
                      "example": true,
                      "counter": true,
                      "code": "query takesCat($cat: Cat) {\n  # ...\n}\n\nquery takesDogBang($dog: Dog!) {\n  # ...\n}\n\nquery takesListOfPet($pets: [Pet]) {\n  # ...\n}\n\nquery takesCatOrDog($catOrDog: CatOrDog) {\n  # ...\n}\n"
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "All Variable Uses Defined"
              },
              "contents": [
                {
                  "type": "Subsection",
                  "header": {
                    "type": "Subheader",
                    "title": "Formal Specification"
                  },
                  "contents": [
                    {
                      "type": "List",
                      "ordered": false,
                      "items": [
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "For each "
                            },
                            {
                              "type": "Variable",
                              "name": "operation"
                            },
                            {
                              "type": "Text",
                              "value": " in a document"
                            },
                            {
                              "type": "List",
                              "ordered": false,
                              "items": [
                                {
                                  "type": "ListItem",
                                  "contents": [
                                    {
                                      "type": "Text",
                                      "value": "For each "
                                    },
                                    {
                                      "type": "Variable",
                                      "name": "variableUsage"
                                    },
                                    {
                                      "type": "Text",
                                      "value": " in scope, variable must be in "
                                    },
                                    {
                                      "type": "Variable",
                                      "name": "operation"
                                    },
                                    {
                                      "type": "Text",
                                      "value": "‘s variable list."
                                    }
                                  ]
                                },
                                {
                                  "type": "ListItem",
                                  "contents": [
                                    {
                                      "type": "Text",
                                      "value": "Let "
                                    },
                                    {
                                      "type": "Variable",
                                      "name": "fragments"
                                    },
                                    {
                                      "type": "Text",
                                      "value": " be every fragment referenced by that "
                                    },
                                    {
                                      "type": "Variable",
                                      "name": "operation"
                                    },
                                    {
                                      "type": "Text",
                                      "value": " transitively"
                                    }
                                  ]
                                },
                                {
                                  "type": "ListItem",
                                  "contents": [
                                    {
                                      "type": "Text",
                                      "value": "For each "
                                    },
                                    {
                                      "type": "Variable",
                                      "name": "fragment"
                                    },
                                    {
                                      "type": "Text",
                                      "value": " in "
                                    },
                                    {
                                      "type": "Variable",
                                      "name": "fragments"
                                    },
                                    {
                                      "type": "List",
                                      "ordered": false,
                                      "items": [
                                        {
                                          "type": "ListItem",
                                          "contents": [
                                            {
                                              "type": "Text",
                                              "value": "For each "
                                            },
                                            {
                                              "type": "Variable",
                                              "name": "variableUsage"
                                            },
                                            {
                                              "type": "Text",
                                              "value": " in scope of "
                                            },
                                            {
                                              "type": "Variable",
                                              "name": "fragment"
                                            },
                                            {
                                              "type": "Text",
                                              "value": ", variable must be in "
                                            },
                                            {
                                              "type": "Variable",
                                              "name": "operation"
                                            },
                                            {
                                              "type": "Text",
                                              "value": "‘s variable list."
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "Subsection",
                  "header": {
                    "type": "Subheader",
                    "title": "Explanatory Text"
                  },
                  "contents": [
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Variables are scoped on a per-operation basis. That means that any variable used within the context of an operation must be defined at the top level of that operation"
                        }
                      ]
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "For example:"
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": "graphql",
                      "example": true,
                      "counter": false,
                      "code": "query variableIsDefined($atOtherHomes: Boolean) {\n  dog {\n    isHousetrained(atOtherHomes: $atOtherHomes)\n  }\n}\n"
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "is valid. $"
                        },
                        {
                          "type": "Variable",
                          "name": "atOtherHomes"
                        },
                        {
                          "type": "Text",
                          "value": " is defined by the operation."
                        }
                      ]
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "By contrast the following query is invalid:"
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": "graphql",
                      "example": true,
                      "counter": true,
                      "code": "query variableIsNotDefined {\n  dog {\n    isHousetrained(atOtherHomes: $atOtherHomes)\n  }\n}\n"
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "$"
                        },
                        {
                          "type": "Variable",
                          "name": "atOtherHomes"
                        },
                        {
                          "type": "Text",
                          "value": " is not defined by the operation."
                        }
                      ]
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Fragments complicate this rule. Any fragment transitively included by an operation has access to the variables defined by that operation. Fragments can appear within multiple operations and therefore variable usages must correspond to variable definitions in all of those operations."
                        }
                      ]
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "For example the following is valid:"
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": "graphql",
                      "example": true,
                      "counter": false,
                      "code": "query variableIsDefinedUsedInSingleFragment($atOtherHomes: Boolean) {\n  dog {\n    ...isHousetrainedFragment\n  }\n}\n\nfragment isHousetrainedFragment on Dog {\n  isHousetrained(atOtherHomes: $atOtherHomes)\n}\n"
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "since "
                        },
                        {
                          "type": "Variable",
                          "name": "isHousetrainedFragment"
                        },
                        {
                          "type": "Text",
                          "value": " is used within the context of the operation "
                        },
                        {
                          "type": "Variable",
                          "name": "variableIsDefinedUsedInSingleFragment"
                        },
                        {
                          "type": "Text",
                          "value": " and the variable is defined by that operation."
                        }
                      ]
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "On the other hand, if a fragment is included within an operation that does not define a referenced variable, the query is invalid."
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": "graphql",
                      "example": true,
                      "counter": true,
                      "code": "query variableIsNotDefinedUsedInSingleFragment {\n  dog {\n    ...isHousetrainedFragment\n  }\n}\n\nfragment isHousetrainedFragment on Dog {\n  isHousetrained(atOtherHomes: $atOtherHomes)\n}\n"
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "This applies transitively as well, so the following also fails:"
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": "graphql",
                      "example": true,
                      "counter": true,
                      "code": "query variableIsNotDefinedUsedInNestedFragment {\n  dog {\n    ...outerHousetrainedFragment\n  }\n}\n\nfragment outerHousetrainedFragment on Dog {\n  ...isHousetrainedFragment\n}\n\nfragment isHousetrainedFragment on Dog {\n  isHousetrained(atOtherHomes: $atOtherHomes)\n}\n"
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Variables must be defined in all operations in which a fragment is used."
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": "graphql",
                      "example": true,
                      "counter": false,
                      "code": "query housetrainedQueryOne($atOtherHomes: Boolean) {\n  dog {\n    ...isHousetrainedFragment\n  }\n}\n\nquery housetrainedQueryTwo($atOtherHomes: Boolean) {\n  dog {\n    ...isHousetrainedFragment\n  }\n}\n\nfragment isHousetrainedFragment on Dog {\n  isHousetrained(atOtherHomes: $atOtherHomes)\n}\n"
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "However the following does not validate:"
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": "graphql",
                      "example": true,
                      "counter": true,
                      "code": "query housetrainedQueryOne($atOtherHomes: Boolean) {\n  dog {\n    ...isHousetrainedFragment\n  }\n}\n\nquery housetrainedQueryTwoNotDefined {\n  dog {\n    ...isHousetrainedFragment\n  }\n}\n\nfragment isHousetrainedFragment on Dog {\n  isHousetrained(atOtherHomes: $atOtherHomes)\n}\n"
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "This is because "
                        },
                        {
                          "type": "Variable",
                          "name": "housetrainedQueryTwoNotDefined"
                        },
                        {
                          "type": "Text",
                          "value": " does not define a variable $"
                        },
                        {
                          "type": "Variable",
                          "name": "atOtherHomes"
                        },
                        {
                          "type": "Text",
                          "value": " but that variable is used by "
                        },
                        {
                          "type": "Variable",
                          "name": "isHousetrainedFragment"
                        },
                        {
                          "type": "Text",
                          "value": " which is included in that operation."
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "All Variables Used"
              },
              "contents": [
                {
                  "type": "Subsection",
                  "header": {
                    "type": "Subheader",
                    "title": "Formal Specification"
                  },
                  "contents": [
                    {
                      "type": "List",
                      "ordered": false,
                      "items": [
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "For every "
                            },
                            {
                              "type": "Variable",
                              "name": "operation"
                            },
                            {
                              "type": "Text",
                              "value": " in the document."
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "Let "
                            },
                            {
                              "type": "Variable",
                              "name": "variables"
                            },
                            {
                              "type": "Text",
                              "value": " be the variables defined by that "
                            },
                            {
                              "type": "Variable",
                              "name": "operation"
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "Each "
                            },
                            {
                              "type": "Variable",
                              "name": "variable"
                            },
                            {
                              "type": "Text",
                              "value": " in "
                            },
                            {
                              "type": "Variable",
                              "name": "variables"
                            },
                            {
                              "type": "Text",
                              "value": " must be used at least once in either the operation scope itself or any fragment transitively referenced by that operation."
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "Subsection",
                  "header": {
                    "type": "Subheader",
                    "title": "Explanatory Text"
                  },
                  "contents": [
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "All variables defined by an operation must be used in that operation or a fragment transitively included by that operation. Unused variables cause a validation error."
                        }
                      ]
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "For example the following is invalid:"
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": "graphql",
                      "example": true,
                      "counter": true,
                      "code": "query variableUnused($atOtherHomes: Boolean) {\n  dog {\n    isHousetrained\n  }\n}\n"
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "because $"
                        },
                        {
                          "type": "Variable",
                          "name": "atOtherHomes"
                        },
                        {
                          "type": "Text",
                          "value": " is not referenced."
                        }
                      ]
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "These rules apply to transitive fragment spreads as well:"
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": "graphql",
                      "example": true,
                      "counter": false,
                      "code": "query variableUsedInFragment($atOtherHomes: Boolean) {\n  dog {\n    ...isHousetrainedFragment\n  }\n}\n\nfragment isHousetrainedFragment on Dog {\n  isHousetrained(atOtherHomes: $atOtherHomes)\n}\n"
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "The above is valid since $"
                        },
                        {
                          "type": "Variable",
                          "name": "atOtherHomes"
                        },
                        {
                          "type": "Text",
                          "value": " is used in "
                        },
                        {
                          "type": "Variable",
                          "name": "isHousetrainedFragment"
                        },
                        {
                          "type": "Text",
                          "value": " which is included by "
                        },
                        {
                          "type": "Variable",
                          "name": "variableUsedInFragment"
                        },
                        {
                          "type": "Text",
                          "value": "."
                        }
                      ]
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "If that fragment did not have a reference to $"
                        },
                        {
                          "type": "Variable",
                          "name": "atOtherHomes"
                        },
                        {
                          "type": "Text",
                          "value": " it would be not valid:"
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": "graphql",
                      "example": true,
                      "counter": true,
                      "code": "query variableNotUsedWithinFragment($atOtherHomes: Boolean) {\n  dog {\n    ...isHousetrainedWithoutVariableFragment\n  }\n}\n\nfragment isHousetrainedWithoutVariableFragment on Dog {\n  isHousetrained\n}\n"
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "All operations in a document must use all of their variables."
                        }
                      ]
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "As a result, the following document does not validate."
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": "graphql",
                      "example": true,
                      "counter": true,
                      "code": "query queryWithUsedVar($atOtherHomes: Boolean) {\n  dog {\n    ...isHousetrainedFragment\n  }\n}\n\nquery queryWithExtraVar($atOtherHomes: Boolean, $extra: Int) {\n  dog {\n    ...isHousetrainedFragment\n  }\n}\n\nfragment isHousetrainedFragment on Dog {\n  isHousetrained(atOtherHomes: $atOtherHomes)\n}\n"
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "This document is not valid because "
                        },
                        {
                          "type": "Variable",
                          "name": "queryWithExtraVar"
                        },
                        {
                          "type": "Text",
                          "value": " defines an extraneous variable."
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "All Variable Usages are Allowed"
              },
              "contents": [
                {
                  "type": "Subsection",
                  "header": {
                    "type": "Subheader",
                    "title": "Formal Specification"
                  },
                  "contents": [
                    {
                      "type": "List",
                      "ordered": false,
                      "items": [
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "For each "
                            },
                            {
                              "type": "Variable",
                              "name": "operation"
                            },
                            {
                              "type": "Text",
                              "value": " in "
                            },
                            {
                              "type": "Variable",
                              "name": "document"
                            },
                            {
                              "type": "Text",
                              "value": ":"
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "Let "
                            },
                            {
                              "type": "Variable",
                              "name": "variableUsages"
                            },
                            {
                              "type": "Text",
                              "value": " be all usages transitively included in the "
                            },
                            {
                              "type": "Variable",
                              "name": "operation"
                            },
                            {
                              "type": "Text",
                              "value": "."
                            }
                          ]
                        },
                        {
                          "type": "ListItem",
                          "contents": [
                            {
                              "type": "Text",
                              "value": "For each "
                            },
                            {
                              "type": "Variable",
                              "name": "variableUsage"
                            },
                            {
                              "type": "Text",
                              "value": " in "
                            },
                            {
                              "type": "Variable",
                              "name": "variableUsages"
                            },
                            {
                              "type": "Text",
                              "value": ":"
                            },
                            {
                              "type": "List",
                              "ordered": false,
                              "items": [
                                {
                                  "type": "ListItem",
                                  "contents": [
                                    {
                                      "type": "Text",
                                      "value": "Let "
                                    },
                                    {
                                      "type": "Variable",
                                      "name": "variableName"
                                    },
                                    {
                                      "type": "Text",
                                      "value": " be the name of "
                                    },
                                    {
                                      "type": "Variable",
                                      "name": "variableUsage"
                                    },
                                    {
                                      "type": "Text",
                                      "value": "."
                                    }
                                  ]
                                },
                                {
                                  "type": "ListItem",
                                  "contents": [
                                    {
                                      "type": "Text",
                                      "value": "Let "
                                    },
                                    {
                                      "type": "Variable",
                                      "name": "variableDefinition"
                                    },
                                    {
                                      "type": "Text",
                                      "value": " be the "
                                    },
                                    {
                                      "type": "NonTerminal",
                                      "name": "VariableDefinition",
                                      "params": null
                                    },
                                    {
                                      "type": "Text",
                                      "value": " named "
                                    },
                                    {
                                      "type": "Variable",
                                      "name": "variableName"
                                    },
                                    {
                                      "type": "Text",
                                      "value": " defined within "
                                    },
                                    {
                                      "type": "Variable",
                                      "name": "operation"
                                    },
                                    {
                                      "type": "Text",
                                      "value": "."
                                    }
                                  ]
                                },
                                {
                                  "type": "ListItem",
                                  "contents": [
                                    {
                                      "type": "Call",
                                      "name": "IsVariableUsageAllowed",
                                      "args": [
                                        {
                                          "type": "Variable",
                                          "name": "variableDefinition"
                                        },
                                        {
                                          "type": "Variable",
                                          "name": "variableUsage"
                                        }
                                      ]
                                    },
                                    {
                                      "type": "Text",
                                      "value": " must be "
                                    },
                                    {
                                      "type": "Keyword",
                                      "value": "true"
                                    },
                                    {
                                      "type": "Text",
                                      "value": "."
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "Algorithm",
                      "call": {
                        "type": "Call",
                        "name": "IsVariableUsageAllowed",
                        "args": [
                          {
                            "type": "Variable",
                            "name": "variableDefinition"
                          },
                          {
                            "type": "Variable",
                            "name": "variableUsage"
                          }
                        ]
                      },
                      "steps": {
                        "type": "List",
                        "ordered": true,
                        "items": [
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "Let "
                              },
                              {
                                "type": "Variable",
                                "name": "variableType"
                              },
                              {
                                "type": "Text",
                                "value": " be the expected type of "
                              },
                              {
                                "type": "Variable",
                                "name": "variableDefinition"
                              },
                              {
                                "type": "Text",
                                "value": "."
                              }
                            ]
                          },
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "Let "
                              },
                              {
                                "type": "Variable",
                                "name": "locationType"
                              },
                              {
                                "type": "Text",
                                "value": " be the expected type of the "
                              },
                              {
                                "type": "NonTerminal",
                                "name": "Argument",
                                "params": null
                              },
                              {
                                "type": "Text",
                                "value": ", "
                              },
                              {
                                "type": "NonTerminal",
                                "name": "ObjectField",
                                "params": null
                              },
                              {
                                "type": "Text",
                                "value": ", or "
                              },
                              {
                                "type": "NonTerminal",
                                "name": "ListValue",
                                "params": null
                              },
                              {
                                "type": "Text",
                                "value": " entry where "
                              },
                              {
                                "type": "Variable",
                                "name": "variableUsage"
                              },
                              {
                                "type": "Text",
                                "value": " is located."
                              }
                            ]
                          },
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "If "
                              },
                              {
                                "type": "Variable",
                                "name": "locationType"
                              },
                              {
                                "type": "Text",
                                "value": " is a non-null type AND "
                              },
                              {
                                "type": "Variable",
                                "name": "variableType"
                              },
                              {
                                "type": "Text",
                                "value": " is NOT a non-null type:"
                              },
                              {
                                "type": "List",
                                "ordered": true,
                                "items": [
                                  {
                                    "type": "ListItem",
                                    "contents": [
                                      {
                                        "type": "Text",
                                        "value": "Let "
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "hasNonNullVariableDefaultValue"
                                      },
                                      {
                                        "type": "Text",
                                        "value": " be "
                                      },
                                      {
                                        "type": "Keyword",
                                        "value": "true"
                                      },
                                      {
                                        "type": "Text",
                                        "value": " if a default value exists for "
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "variableDefinition"
                                      },
                                      {
                                        "type": "Text",
                                        "value": " and is not the value "
                                      },
                                      {
                                        "type": "Keyword",
                                        "value": "null"
                                      },
                                      {
                                        "type": "Text",
                                        "value": "."
                                      }
                                    ]
                                  },
                                  {
                                    "type": "ListItem",
                                    "contents": [
                                      {
                                        "type": "Text",
                                        "value": "Let "
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "hasLocationDefaultValue"
                                      },
                                      {
                                        "type": "Text",
                                        "value": " be "
                                      },
                                      {
                                        "type": "Keyword",
                                        "value": "true"
                                      },
                                      {
                                        "type": "Text",
                                        "value": " if a default value exists for the "
                                      },
                                      {
                                        "type": "NonTerminal",
                                        "name": "Argument",
                                        "params": null
                                      },
                                      {
                                        "type": "Text",
                                        "value": " or "
                                      },
                                      {
                                        "type": "NonTerminal",
                                        "name": "ObjectField",
                                        "params": null
                                      },
                                      {
                                        "type": "Text",
                                        "value": " where "
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "variableUsage"
                                      },
                                      {
                                        "type": "Text",
                                        "value": " is located."
                                      }
                                    ]
                                  },
                                  {
                                    "type": "ListItem",
                                    "contents": [
                                      {
                                        "type": "Text",
                                        "value": "If "
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "hasNonNullVariableDefaultValue"
                                      },
                                      {
                                        "type": "Text",
                                        "value": " is NOT "
                                      },
                                      {
                                        "type": "Keyword",
                                        "value": "true"
                                      },
                                      {
                                        "type": "Text",
                                        "value": " AND "
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "hasLocationDefaultValue"
                                      },
                                      {
                                        "type": "Text",
                                        "value": " is NOT "
                                      },
                                      {
                                        "type": "Keyword",
                                        "value": "true"
                                      },
                                      {
                                        "type": "Text",
                                        "value": ", return "
                                      },
                                      {
                                        "type": "Keyword",
                                        "value": "false"
                                      },
                                      {
                                        "type": "Text",
                                        "value": "."
                                      }
                                    ]
                                  },
                                  {
                                    "type": "ListItem",
                                    "contents": [
                                      {
                                        "type": "Text",
                                        "value": "Let "
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "nullableLocationType"
                                      },
                                      {
                                        "type": "Text",
                                        "value": " be the unwrapped nullable type of "
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "locationType"
                                      },
                                      {
                                        "type": "Text",
                                        "value": "."
                                      }
                                    ]
                                  },
                                  {
                                    "type": "ListItem",
                                    "contents": [
                                      {
                                        "type": "Text",
                                        "value": "Return "
                                      },
                                      {
                                        "type": "Call",
                                        "name": "AreTypesCompatible",
                                        "args": [
                                          {
                                            "type": "Variable",
                                            "name": "variableType"
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "nullableLocationType"
                                          }
                                        ]
                                      },
                                      {
                                        "type": "Text",
                                        "value": "."
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "Return "
                              },
                              {
                                "type": "Call",
                                "name": "AreTypesCompatible",
                                "args": [
                                  {
                                    "type": "Variable",
                                    "name": "variableType"
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "locationType"
                                  }
                                ]
                              },
                              {
                                "type": "Text",
                                "value": "."
                              }
                            ]
                          }
                        ]
                      }
                    },
                    {
                      "type": "Algorithm",
                      "call": {
                        "type": "Call",
                        "name": "AreTypesCompatible",
                        "args": [
                          {
                            "type": "Variable",
                            "name": "variableType"
                          },
                          {
                            "type": "Variable",
                            "name": "locationType"
                          }
                        ]
                      },
                      "steps": {
                        "type": "List",
                        "ordered": true,
                        "items": [
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "If "
                              },
                              {
                                "type": "Variable",
                                "name": "locationType"
                              },
                              {
                                "type": "Text",
                                "value": " is a non-null type:"
                              },
                              {
                                "type": "List",
                                "ordered": true,
                                "items": [
                                  {
                                    "type": "ListItem",
                                    "contents": [
                                      {
                                        "type": "Text",
                                        "value": "If "
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "variableType"
                                      },
                                      {
                                        "type": "Text",
                                        "value": " is NOT a non-null type, return "
                                      },
                                      {
                                        "type": "Keyword",
                                        "value": "false"
                                      },
                                      {
                                        "type": "Text",
                                        "value": "."
                                      }
                                    ]
                                  },
                                  {
                                    "type": "ListItem",
                                    "contents": [
                                      {
                                        "type": "Text",
                                        "value": "Let "
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "nullableLocationType"
                                      },
                                      {
                                        "type": "Text",
                                        "value": " be the unwrapped nullable type of "
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "locationType"
                                      },
                                      {
                                        "type": "Text",
                                        "value": "."
                                      }
                                    ]
                                  },
                                  {
                                    "type": "ListItem",
                                    "contents": [
                                      {
                                        "type": "Text",
                                        "value": "Let "
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "nullableVariableType"
                                      },
                                      {
                                        "type": "Text",
                                        "value": " be the unwrapped nullable type of "
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "variableType"
                                      },
                                      {
                                        "type": "Text",
                                        "value": "."
                                      }
                                    ]
                                  },
                                  {
                                    "type": "ListItem",
                                    "contents": [
                                      {
                                        "type": "Text",
                                        "value": "Return "
                                      },
                                      {
                                        "type": "Call",
                                        "name": "AreTypesCompatible",
                                        "args": [
                                          {
                                            "type": "Variable",
                                            "name": "nullableVariableType"
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "nullableLocationType"
                                          }
                                        ]
                                      },
                                      {
                                        "type": "Text",
                                        "value": "."
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "Otherwise, if "
                              },
                              {
                                "type": "Variable",
                                "name": "variableType"
                              },
                              {
                                "type": "Text",
                                "value": " is a non-null type:"
                              },
                              {
                                "type": "List",
                                "ordered": true,
                                "items": [
                                  {
                                    "type": "ListItem",
                                    "contents": [
                                      {
                                        "type": "Text",
                                        "value": "Let "
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "nullableVariableType"
                                      },
                                      {
                                        "type": "Text",
                                        "value": " be the nullable type of "
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "variableType"
                                      },
                                      {
                                        "type": "Text",
                                        "value": "."
                                      }
                                    ]
                                  },
                                  {
                                    "type": "ListItem",
                                    "contents": [
                                      {
                                        "type": "Text",
                                        "value": "Return "
                                      },
                                      {
                                        "type": "Call",
                                        "name": "AreTypesCompatible",
                                        "args": [
                                          {
                                            "type": "Variable",
                                            "name": "nullableVariableType"
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "locationType"
                                          }
                                        ]
                                      },
                                      {
                                        "type": "Text",
                                        "value": "."
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "Otherwise, if "
                              },
                              {
                                "type": "Variable",
                                "name": "locationType"
                              },
                              {
                                "type": "Text",
                                "value": " is a list type:"
                              },
                              {
                                "type": "List",
                                "ordered": true,
                                "items": [
                                  {
                                    "type": "ListItem",
                                    "contents": [
                                      {
                                        "type": "Text",
                                        "value": "If "
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "variableType"
                                      },
                                      {
                                        "type": "Text",
                                        "value": " is NOT a list type, return "
                                      },
                                      {
                                        "type": "Keyword",
                                        "value": "false"
                                      },
                                      {
                                        "type": "Text",
                                        "value": "."
                                      }
                                    ]
                                  },
                                  {
                                    "type": "ListItem",
                                    "contents": [
                                      {
                                        "type": "Text",
                                        "value": "Let "
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "itemLocationType"
                                      },
                                      {
                                        "type": "Text",
                                        "value": " be the unwrapped item type of "
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "locationType"
                                      },
                                      {
                                        "type": "Text",
                                        "value": "."
                                      }
                                    ]
                                  },
                                  {
                                    "type": "ListItem",
                                    "contents": [
                                      {
                                        "type": "Text",
                                        "value": "Let "
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "itemVariableType"
                                      },
                                      {
                                        "type": "Text",
                                        "value": " be the unwrapped item type of "
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "variableType"
                                      },
                                      {
                                        "type": "Text",
                                        "value": "."
                                      }
                                    ]
                                  },
                                  {
                                    "type": "ListItem",
                                    "contents": [
                                      {
                                        "type": "Text",
                                        "value": "Return "
                                      },
                                      {
                                        "type": "Call",
                                        "name": "AreTypesCompatible",
                                        "args": [
                                          {
                                            "type": "Variable",
                                            "name": "itemVariableType"
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "itemLocationType"
                                          }
                                        ]
                                      },
                                      {
                                        "type": "Text",
                                        "value": "."
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "Otherwise, if "
                              },
                              {
                                "type": "Variable",
                                "name": "variableType"
                              },
                              {
                                "type": "Text",
                                "value": " is a list type, return "
                              },
                              {
                                "type": "Keyword",
                                "value": "false"
                              },
                              {
                                "type": "Text",
                                "value": "."
                              }
                            ]
                          },
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "Return "
                              },
                              {
                                "type": "Keyword",
                                "value": "true"
                              },
                              {
                                "type": "Text",
                                "value": " if "
                              },
                              {
                                "type": "Variable",
                                "name": "variableType"
                              },
                              {
                                "type": "Text",
                                "value": " and "
                              },
                              {
                                "type": "Variable",
                                "name": "locationType"
                              },
                              {
                                "type": "Text",
                                "value": " are identical, otherwise "
                              },
                              {
                                "type": "Keyword",
                                "value": "false"
                              },
                              {
                                "type": "Text",
                                "value": "."
                              }
                            ]
                          }
                        ]
                      }
                    }
                  ]
                },
                {
                  "type": "Subsection",
                  "header": {
                    "type": "Subheader",
                    "title": "Explanatory Text"
                  },
                  "contents": [
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Variable usages must be compatible with the arguments they are passed to."
                        }
                      ]
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Validation failures occur when variables are used in the context of types that are complete mismatches, or if a nullable type in a variable is passed to a non-null argument type."
                        }
                      ]
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Types must match:"
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": "graphql",
                      "example": true,
                      "counter": true,
                      "code": "query intCannotGoIntoBoolean($intArg: Int) {\n  arguments {\n    booleanArgField(booleanArg: $intArg)\n  }\n}\n"
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "$"
                        },
                        {
                          "type": "Variable",
                          "name": "intArg"
                        },
                        {
                          "type": "Text",
                          "value": " typed as "
                        },
                        {
                          "type": "NonTerminal",
                          "name": "Int",
                          "params": null
                        },
                        {
                          "type": "Text",
                          "value": " cannot be used as an argument to "
                        },
                        {
                          "type": "Variable",
                          "name": "booleanArg"
                        },
                        {
                          "type": "Text",
                          "value": ", typed as "
                        },
                        {
                          "type": "NonTerminal",
                          "name": "Boolean",
                          "params": null
                        },
                        {
                          "type": "Text",
                          "value": "."
                        }
                      ]
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "List cardinality must also be the same. For example, lists cannot be passed into singular values."
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": "graphql",
                      "example": true,
                      "counter": true,
                      "code": "query booleanListCannotGoIntoBoolean($booleanListArg: [Boolean]) {\n  arguments {\n    booleanArgField(booleanArg: $booleanListArg)\n  }\n}\n"
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Nullability must also be respected. In general a nullable variable cannot be passed to a non-null argument."
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": "graphql",
                      "example": true,
                      "counter": true,
                      "code": "query booleanArgQuery($booleanArg: Boolean) {\n  arguments {\n    nonNullBooleanArgField(nonNullBooleanArg: $booleanArg)\n  }\n}\n"
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "For list types, the same rules around nullability apply to both outer types and inner types. A nullable list cannot be passed to a non-null list, and a list of nullable values cannot be passed to a list of non-null values. The following is valid:"
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": "graphql",
                      "example": true,
                      "counter": false,
                      "code": "query nonNullListToList($nonNullBooleanList: [Boolean]!) {\n  arguments {\n    booleanListArgField(booleanListArg: $nonNullBooleanList)\n  }\n}\n"
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "However, a nullable list cannot be passed to a non-null list:"
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": "graphql",
                      "example": true,
                      "counter": true,
                      "code": "query listToNonNullList($booleanList: [Boolean]) {\n  arguments {\n    nonNullBooleanListField(nonNullBooleanListArg: $booleanList)\n  }\n}\n"
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "This would fail validation because a "
                        },
                        {
                          "type": "InlineCode",
                          "code": "[T]"
                        },
                        {
                          "type": "Text",
                          "value": " cannot be passed to a "
                        },
                        {
                          "type": "InlineCode",
                          "code": "[T]!"
                        },
                        {
                          "type": "Text",
                          "value": ". Similarly a "
                        },
                        {
                          "type": "InlineCode",
                          "code": "[T]"
                        },
                        {
                          "type": "Text",
                          "value": " cannot be passed to a "
                        },
                        {
                          "type": "InlineCode",
                          "code": "[T!]"
                        },
                        {
                          "type": "Text",
                          "value": "."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "Subsection",
                  "header": {
                    "type": "Subheader",
                    "title": "Allowing optional variables when default values exist"
                  },
                  "contents": [
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "A notable exception to typical variable type compatibility is allowing a variable definition with a nullable type to be provided to a non-null location as long as either that variable or that location provides a default value."
                        }
                      ]
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "In the example below, an optional variable "
                        },
                        {
                          "type": "InlineCode",
                          "code": "$booleanArg"
                        },
                        {
                          "type": "Text",
                          "value": " is allowed to be used in the non-null argument "
                        },
                        {
                          "type": "InlineCode",
                          "code": "optionalBooleanArg"
                        },
                        {
                          "type": "Text",
                          "value": " because the field argument is optional since it provides a default value in the schema."
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": "graphql",
                      "example": true,
                      "counter": false,
                      "code": "query booleanArgQueryWithDefault($booleanArg: Boolean) {\n  arguments {\n    optionalNonNullBooleanArgField(optionalBooleanArg: $booleanArg)\n  }\n}\n"
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "In the example below, an optional variable "
                        },
                        {
                          "type": "InlineCode",
                          "code": "$booleanArg"
                        },
                        {
                          "type": "Text",
                          "value": " is allowed to be used in the non-null argument ("
                        },
                        {
                          "type": "InlineCode",
                          "code": "nonNullBooleanArg"
                        },
                        {
                          "type": "Text",
                          "value": ") because the variable provides a default value in the query. This behavior is explicitly supported for compatibility with earlier editions of this specification. GraphQL authoring tools may wish to report this as a warning with the suggestion to replace "
                        },
                        {
                          "type": "InlineCode",
                          "code": "Boolean"
                        },
                        {
                          "type": "Text",
                          "value": " with "
                        },
                        {
                          "type": "InlineCode",
                          "code": "Boolean!"
                        },
                        {
                          "type": "Text",
                          "value": " to avoid ambiguity."
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": "graphql",
                      "example": true,
                      "counter": false,
                      "code": "query booleanArgQueryWithDefault($booleanArg: Boolean = true) {\n  arguments {\n    nonNullBooleanArgField(nonNullBooleanArg: $booleanArg)\n  }\n}\n"
                    },
                    {
                      "type": "Note",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "The value "
                        },
                        {
                          "type": "Keyword",
                          "value": "null"
                        },
                        {
                          "type": "Text",
                          "value": " could still be provided to such a variable at runtime. A non-null argument must produce a field error if provided a "
                        },
                        {
                          "type": "Keyword",
                          "value": "null"
                        },
                        {
                          "type": "Text",
                          "value": " value. "
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "Section",
      "header": {
        "type": "Header",
        "level": 1,
        "secID": null,
        "title": "Execution"
      },
      "contents": [
        {
          "type": "Paragraph",
          "contents": [
            {
              "type": "Text",
              "value": "GraphQL generates a response from a request via execution."
            }
          ]
        },
        {
          "type": "Paragraph",
          "contents": [
            {
              "type": "Text",
              "value": "A request for execution consists of a few pieces of information:"
            }
          ]
        },
        {
          "type": "List",
          "ordered": false,
          "items": [
            {
              "type": "ListItem",
              "contents": [
                {
                  "type": "Text",
                  "value": "The schema to use, typically solely provided by the GraphQL service."
                }
              ]
            },
            {
              "type": "ListItem",
              "contents": [
                {
                  "type": "Text",
                  "value": "A "
                },
                {
                  "type": "NonTerminal",
                  "name": "Document",
                  "params": null
                },
                {
                  "type": "Text",
                  "value": " which must contain GraphQL "
                },
                {
                  "type": "NonTerminal",
                  "name": "OperationDefinition",
                  "params": null
                },
                {
                  "type": "Text",
                  "value": " and may contain "
                },
                {
                  "type": "NonTerminal",
                  "name": "FragmentDefinition",
                  "params": null
                },
                {
                  "type": "Text",
                  "value": "."
                }
              ]
            },
            {
              "type": "ListItem",
              "contents": [
                {
                  "type": "Text",
                  "value": "Optionally: The name of the Operation in the Document to execute."
                }
              ]
            },
            {
              "type": "ListItem",
              "contents": [
                {
                  "type": "Text",
                  "value": "Optionally: Values for any Variables defined by the Operation."
                }
              ]
            },
            {
              "type": "ListItem",
              "contents": [
                {
                  "type": "Text",
                  "value": "An initial value corresponding to the root type being executed. Conceptually, an initial value represents the “universe” of data available via a GraphQL Service. It is common for a GraphQL Service to always use the same initial value for every request."
                }
              ]
            }
          ]
        },
        {
          "type": "Paragraph",
          "contents": [
            {
              "type": "Text",
              "value": "Given this information, the result of "
            },
            {
              "type": "Call",
              "name": "ExecuteRequest",
              "args": []
            },
            {
              "type": "Text",
              "value": " produces the response, to be formatted according to the Response section below."
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Executing Requests"
          },
          "contents": [
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "To execute a request, the executor must have a parsed "
                },
                {
                  "type": "NonTerminal",
                  "name": "Document",
                  "params": null
                },
                {
                  "type": "Text",
                  "value": " and a selected operation name to run if the document defines multiple operations, otherwise the document is expected to only contain a single operation. The result of the request is determined by the result of executing this operation according to the “Executing Operations” section below."
                }
              ]
            },
            {
              "type": "Algorithm",
              "call": {
                "type": "Call",
                "name": "ExecuteRequest",
                "args": [
                  {
                    "type": "Variable",
                    "name": "schema"
                  },
                  {
                    "type": "Variable",
                    "name": "document"
                  },
                  {
                    "type": "Variable",
                    "name": "operationName"
                  },
                  {
                    "type": "Variable",
                    "name": "variableValues"
                  },
                  {
                    "type": "Variable",
                    "name": "initialValue"
                  }
                ]
              },
              "steps": {
                "type": "List",
                "ordered": true,
                "items": [
                  {
                    "type": "ListItem",
                    "contents": [
                      {
                        "type": "Text",
                        "value": "Let "
                      },
                      {
                        "type": "Variable",
                        "name": "operation"
                      },
                      {
                        "type": "Text",
                        "value": " be the result of "
                      },
                      {
                        "type": "Call",
                        "name": "GetOperation",
                        "args": [
                          {
                            "type": "Variable",
                            "name": "document"
                          },
                          {
                            "type": "Variable",
                            "name": "operationName"
                          }
                        ]
                      },
                      {
                        "type": "Text",
                        "value": "."
                      }
                    ]
                  },
                  {
                    "type": "ListItem",
                    "contents": [
                      {
                        "type": "Text",
                        "value": "Let "
                      },
                      {
                        "type": "Variable",
                        "name": "coercedVariableValues"
                      },
                      {
                        "type": "Text",
                        "value": " be the result of "
                      },
                      {
                        "type": "Call",
                        "name": "CoerceVariableValues",
                        "args": [
                          {
                            "type": "Variable",
                            "name": "schema"
                          },
                          {
                            "type": "Variable",
                            "name": "operation"
                          },
                          {
                            "type": "Variable",
                            "name": "variableValues"
                          }
                        ]
                      },
                      {
                        "type": "Text",
                        "value": "."
                      }
                    ]
                  },
                  {
                    "type": "ListItem",
                    "contents": [
                      {
                        "type": "Text",
                        "value": "If "
                      },
                      {
                        "type": "Variable",
                        "name": "operation"
                      },
                      {
                        "type": "Text",
                        "value": " is a query operation:"
                      },
                      {
                        "type": "List",
                        "ordered": true,
                        "items": [
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "Return "
                              },
                              {
                                "type": "Call",
                                "name": "ExecuteQuery",
                                "args": [
                                  {
                                    "type": "Variable",
                                    "name": "operation"
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "schema"
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "coercedVariableValues"
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "initialValue"
                                  }
                                ]
                              },
                              {
                                "type": "Text",
                                "value": "."
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "type": "ListItem",
                    "contents": [
                      {
                        "type": "Text",
                        "value": "Otherwise if "
                      },
                      {
                        "type": "Variable",
                        "name": "operation"
                      },
                      {
                        "type": "Text",
                        "value": " is a mutation operation:"
                      },
                      {
                        "type": "List",
                        "ordered": true,
                        "items": [
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "Return "
                              },
                              {
                                "type": "Call",
                                "name": "ExecuteMutation",
                                "args": [
                                  {
                                    "type": "Variable",
                                    "name": "operation"
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "schema"
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "coercedVariableValues"
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "initialValue"
                                  }
                                ]
                              },
                              {
                                "type": "Text",
                                "value": "."
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "type": "ListItem",
                    "contents": [
                      {
                        "type": "Text",
                        "value": "Otherwise if "
                      },
                      {
                        "type": "Variable",
                        "name": "operation"
                      },
                      {
                        "type": "Text",
                        "value": " is a subscription operation:"
                      },
                      {
                        "type": "List",
                        "ordered": true,
                        "items": [
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "Return "
                              },
                              {
                                "type": "Call",
                                "name": "Subscribe",
                                "args": [
                                  {
                                    "type": "Variable",
                                    "name": "operation"
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "schema"
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "coercedVariableValues"
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "initialValue"
                                  }
                                ]
                              },
                              {
                                "type": "Text",
                                "value": "."
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            },
            {
              "type": "Algorithm",
              "call": {
                "type": "Call",
                "name": "GetOperation",
                "args": [
                  {
                    "type": "Variable",
                    "name": "document"
                  },
                  {
                    "type": "Variable",
                    "name": "operationName"
                  }
                ]
              },
              "steps": {
                "type": "List",
                "ordered": true,
                "items": [
                  {
                    "type": "ListItem",
                    "contents": [
                      {
                        "type": "Text",
                        "value": "If "
                      },
                      {
                        "type": "Variable",
                        "name": "operationName"
                      },
                      {
                        "type": "Text",
                        "value": " is "
                      },
                      {
                        "type": "Keyword",
                        "value": "null"
                      },
                      {
                        "type": "Text",
                        "value": ":"
                      },
                      {
                        "type": "List",
                        "ordered": true,
                        "items": [
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "If "
                              },
                              {
                                "type": "Variable",
                                "name": "document"
                              },
                              {
                                "type": "Text",
                                "value": " contains exactly one operation."
                              },
                              {
                                "type": "List",
                                "ordered": true,
                                "items": [
                                  {
                                    "type": "ListItem",
                                    "contents": [
                                      {
                                        "type": "Text",
                                        "value": "Return the Operation contained in the "
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "document"
                                      },
                                      {
                                        "type": "Text",
                                        "value": "."
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "Otherwise produce a query error requiring "
                              },
                              {
                                "type": "Variable",
                                "name": "operationName"
                              },
                              {
                                "type": "Text",
                                "value": "."
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "type": "ListItem",
                    "contents": [
                      {
                        "type": "Text",
                        "value": "Otherwise:"
                      },
                      {
                        "type": "List",
                        "ordered": true,
                        "items": [
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "Let "
                              },
                              {
                                "type": "Variable",
                                "name": "operation"
                              },
                              {
                                "type": "Text",
                                "value": " be the Operation named "
                              },
                              {
                                "type": "Variable",
                                "name": "operationName"
                              },
                              {
                                "type": "Text",
                                "value": " in "
                              },
                              {
                                "type": "Variable",
                                "name": "document"
                              },
                              {
                                "type": "Text",
                                "value": "."
                              }
                            ]
                          },
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "If "
                              },
                              {
                                "type": "Variable",
                                "name": "operation"
                              },
                              {
                                "type": "Text",
                                "value": " was not found, produce a query error."
                              }
                            ]
                          },
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "Return "
                              },
                              {
                                "type": "Variable",
                                "name": "operation"
                              },
                              {
                                "type": "Text",
                                "value": "."
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Validating Requests"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "As explained in the Validation section, only requests which pass all validation rules should be executed. If validation errors are known, they should be reported in the list of “errors” in the response and the request must fail without execution."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Typically validation is performed in the context of a request immediately before execution, however a GraphQL service may execute a request without immediately validating it if that exact same request is known to have been validated before. A GraphQL service should only execute requests which "
                    },
                    {
                      "type": "Italic",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "at some point"
                        }
                      ]
                    },
                    {
                      "type": "Text",
                      "value": " were known to be free of any validation errors, and have since not changed."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "For example: the request may be validated during development, provided it does not later change, or a service may validate a request once and memoize the result to avoid validating the same request again in the future."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Coercing Variable Values"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "If the operation has defined any variables, then the values for those variables need to be coerced using the input coercion rules of variable’s declared type. If a query error is encountered during input coercion of variable values, then the operation fails without execution."
                    }
                  ]
                },
                {
                  "type": "Algorithm",
                  "call": {
                    "type": "Call",
                    "name": "CoerceVariableValues",
                    "args": [
                      {
                        "type": "Variable",
                        "name": "schema"
                      },
                      {
                        "type": "Variable",
                        "name": "operation"
                      },
                      {
                        "type": "Variable",
                        "name": "variableValues"
                      }
                    ]
                  },
                  "steps": {
                    "type": "List",
                    "ordered": true,
                    "items": [
                      {
                        "type": "ListItem",
                        "contents": [
                          {
                            "type": "Text",
                            "value": "Let "
                          },
                          {
                            "type": "Variable",
                            "name": "coercedValues"
                          },
                          {
                            "type": "Text",
                            "value": " be an empty unordered Map."
                          }
                        ]
                      },
                      {
                        "type": "ListItem",
                        "contents": [
                          {
                            "type": "Text",
                            "value": "Let "
                          },
                          {
                            "type": "Variable",
                            "name": "variableDefinitions"
                          },
                          {
                            "type": "Text",
                            "value": " be the variables defined by "
                          },
                          {
                            "type": "Variable",
                            "name": "operation"
                          },
                          {
                            "type": "Text",
                            "value": "."
                          }
                        ]
                      },
                      {
                        "type": "ListItem",
                        "contents": [
                          {
                            "type": "Text",
                            "value": "For each "
                          },
                          {
                            "type": "Variable",
                            "name": "variableDefinition"
                          },
                          {
                            "type": "Text",
                            "value": " in "
                          },
                          {
                            "type": "Variable",
                            "name": "variableDefinitions"
                          },
                          {
                            "type": "Text",
                            "value": ":"
                          },
                          {
                            "type": "List",
                            "ordered": true,
                            "items": [
                              {
                                "type": "ListItem",
                                "contents": [
                                  {
                                    "type": "Text",
                                    "value": "Let "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "variableName"
                                  },
                                  {
                                    "type": "Text",
                                    "value": " be the name of "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "variableDefinition"
                                  },
                                  {
                                    "type": "Text",
                                    "value": "."
                                  }
                                ]
                              },
                              {
                                "type": "ListItem",
                                "contents": [
                                  {
                                    "type": "Text",
                                    "value": "Let "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "variableType"
                                  },
                                  {
                                    "type": "Text",
                                    "value": " be the expected type of "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "variableDefinition"
                                  },
                                  {
                                    "type": "Text",
                                    "value": "."
                                  }
                                ]
                              },
                              {
                                "type": "ListItem",
                                "contents": [
                                  {
                                    "type": "Text",
                                    "value": "Assert: "
                                  },
                                  {
                                    "type": "Call",
                                    "name": "IsInputType",
                                    "args": [
                                      {
                                        "type": "Variable",
                                        "name": "variableType"
                                      }
                                    ]
                                  },
                                  {
                                    "type": "Text",
                                    "value": " must be "
                                  },
                                  {
                                    "type": "Keyword",
                                    "value": "true"
                                  },
                                  {
                                    "type": "Text",
                                    "value": "."
                                  }
                                ]
                              },
                              {
                                "type": "ListItem",
                                "contents": [
                                  {
                                    "type": "Text",
                                    "value": "Let "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "defaultValue"
                                  },
                                  {
                                    "type": "Text",
                                    "value": " be the default value for "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "variableDefinition"
                                  },
                                  {
                                    "type": "Text",
                                    "value": "."
                                  }
                                ]
                              },
                              {
                                "type": "ListItem",
                                "contents": [
                                  {
                                    "type": "Text",
                                    "value": "Let "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "hasValue"
                                  },
                                  {
                                    "type": "Text",
                                    "value": " be "
                                  },
                                  {
                                    "type": "Keyword",
                                    "value": "true"
                                  },
                                  {
                                    "type": "Text",
                                    "value": " if "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "variableValues"
                                  },
                                  {
                                    "type": "Text",
                                    "value": " provides a value for the name "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "variableName"
                                  },
                                  {
                                    "type": "Text",
                                    "value": "."
                                  }
                                ]
                              },
                              {
                                "type": "ListItem",
                                "contents": [
                                  {
                                    "type": "Text",
                                    "value": "Let "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "value"
                                  },
                                  {
                                    "type": "Text",
                                    "value": " be the value provided in "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "variableValues"
                                  },
                                  {
                                    "type": "Text",
                                    "value": " for the name "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "variableName"
                                  },
                                  {
                                    "type": "Text",
                                    "value": "."
                                  }
                                ]
                              },
                              {
                                "type": "ListItem",
                                "contents": [
                                  {
                                    "type": "Text",
                                    "value": "If "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "hasValue"
                                  },
                                  {
                                    "type": "Text",
                                    "value": " is not "
                                  },
                                  {
                                    "type": "Keyword",
                                    "value": "true"
                                  },
                                  {
                                    "type": "Text",
                                    "value": " and "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "defaultValue"
                                  },
                                  {
                                    "type": "Text",
                                    "value": " exists (including "
                                  },
                                  {
                                    "type": "Keyword",
                                    "value": "null"
                                  },
                                  {
                                    "type": "Text",
                                    "value": "):"
                                  },
                                  {
                                    "type": "List",
                                    "ordered": true,
                                    "items": [
                                      {
                                        "type": "ListItem",
                                        "contents": [
                                          {
                                            "type": "Text",
                                            "value": "Add an entry to "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "coercedValues"
                                          },
                                          {
                                            "type": "Text",
                                            "value": " named "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "variableName"
                                          },
                                          {
                                            "type": "Text",
                                            "value": " with the value "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "defaultValue"
                                          },
                                          {
                                            "type": "Text",
                                            "value": "."
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "type": "ListItem",
                                "contents": [
                                  {
                                    "type": "Text",
                                    "value": "Otherwise if "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "variableType"
                                  },
                                  {
                                    "type": "Text",
                                    "value": " is a Non-Nullable type, and either "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "hasValue"
                                  },
                                  {
                                    "type": "Text",
                                    "value": " is not "
                                  },
                                  {
                                    "type": "Keyword",
                                    "value": "true"
                                  },
                                  {
                                    "type": "Text",
                                    "value": " or "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "value"
                                  },
                                  {
                                    "type": "Text",
                                    "value": " is "
                                  },
                                  {
                                    "type": "Keyword",
                                    "value": "null"
                                  },
                                  {
                                    "type": "Text",
                                    "value": ", throw a query error."
                                  }
                                ]
                              },
                              {
                                "type": "ListItem",
                                "contents": [
                                  {
                                    "type": "Text",
                                    "value": "Otherwise if "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "hasValue"
                                  },
                                  {
                                    "type": "Text",
                                    "value": " is true:"
                                  },
                                  {
                                    "type": "List",
                                    "ordered": true,
                                    "items": [
                                      {
                                        "type": "ListItem",
                                        "contents": [
                                          {
                                            "type": "Text",
                                            "value": "If "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "value"
                                          },
                                          {
                                            "type": "Text",
                                            "value": " is "
                                          },
                                          {
                                            "type": "Keyword",
                                            "value": "null"
                                          },
                                          {
                                            "type": "Text",
                                            "value": ":"
                                          },
                                          {
                                            "type": "List",
                                            "ordered": true,
                                            "items": [
                                              {
                                                "type": "ListItem",
                                                "contents": [
                                                  {
                                                    "type": "Text",
                                                    "value": "Add an entry to "
                                                  },
                                                  {
                                                    "type": "Variable",
                                                    "name": "coercedValues"
                                                  },
                                                  {
                                                    "type": "Text",
                                                    "value": " named "
                                                  },
                                                  {
                                                    "type": "Variable",
                                                    "name": "variableName"
                                                  },
                                                  {
                                                    "type": "Text",
                                                    "value": " with the value "
                                                  },
                                                  {
                                                    "type": "Keyword",
                                                    "value": "null"
                                                  },
                                                  {
                                                    "type": "Text",
                                                    "value": "."
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "type": "ListItem",
                                        "contents": [
                                          {
                                            "type": "Text",
                                            "value": "Otherwise:"
                                          },
                                          {
                                            "type": "List",
                                            "ordered": true,
                                            "items": [
                                              {
                                                "type": "ListItem",
                                                "contents": [
                                                  {
                                                    "type": "Text",
                                                    "value": "If "
                                                  },
                                                  {
                                                    "type": "Variable",
                                                    "name": "value"
                                                  },
                                                  {
                                                    "type": "Text",
                                                    "value": " cannot be coerced according to the input coercion rules of "
                                                  },
                                                  {
                                                    "type": "Variable",
                                                    "name": "variableType"
                                                  },
                                                  {
                                                    "type": "Text",
                                                    "value": ", throw a query error."
                                                  }
                                                ]
                                              },
                                              {
                                                "type": "ListItem",
                                                "contents": [
                                                  {
                                                    "type": "Text",
                                                    "value": "Let "
                                                  },
                                                  {
                                                    "type": "Variable",
                                                    "name": "coercedValue"
                                                  },
                                                  {
                                                    "type": "Text",
                                                    "value": " be the result of coercing "
                                                  },
                                                  {
                                                    "type": "Variable",
                                                    "name": "value"
                                                  },
                                                  {
                                                    "type": "Text",
                                                    "value": " according to the input coercion rules of "
                                                  },
                                                  {
                                                    "type": "Variable",
                                                    "name": "variableType"
                                                  },
                                                  {
                                                    "type": "Text",
                                                    "value": "."
                                                  }
                                                ]
                                              },
                                              {
                                                "type": "ListItem",
                                                "contents": [
                                                  {
                                                    "type": "Text",
                                                    "value": "Add an entry to "
                                                  },
                                                  {
                                                    "type": "Variable",
                                                    "name": "coercedValues"
                                                  },
                                                  {
                                                    "type": "Text",
                                                    "value": " named "
                                                  },
                                                  {
                                                    "type": "Variable",
                                                    "name": "variableName"
                                                  },
                                                  {
                                                    "type": "Text",
                                                    "value": " with the value "
                                                  },
                                                  {
                                                    "type": "Variable",
                                                    "name": "coercedValue"
                                                  },
                                                  {
                                                    "type": "Text",
                                                    "value": "."
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "type": "ListItem",
                        "contents": [
                          {
                            "type": "Text",
                            "value": "Return "
                          },
                          {
                            "type": "Variable",
                            "name": "coercedValues"
                          },
                          {
                            "type": "Text",
                            "value": "."
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "type": "Note",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "This algorithm is very similar to "
                    },
                    {
                      "type": "Call",
                      "name": "CoerceArgumentValues",
                      "args": []
                    },
                    {
                      "type": "Text",
                      "value": "."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Executing Operations"
          },
          "contents": [
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "The type system, as described in the “Type System” section of the spec, must provide a query root object type. If mutations or subscriptions are supported, it must also provide a mutation or subscription root object type, respectively."
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Query"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "If the operation is a query, the result of the operation is the result of executing the query’s top level selection set with the query root object type."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "An initial value may be provided when executing a query."
                    }
                  ]
                },
                {
                  "type": "Algorithm",
                  "call": {
                    "type": "Call",
                    "name": "ExecuteQuery",
                    "args": [
                      {
                        "type": "Variable",
                        "name": "query"
                      },
                      {
                        "type": "Variable",
                        "name": "schema"
                      },
                      {
                        "type": "Variable",
                        "name": "variableValues"
                      },
                      {
                        "type": "Variable",
                        "name": "initialValue"
                      }
                    ]
                  },
                  "steps": {
                    "type": "List",
                    "ordered": true,
                    "items": [
                      {
                        "type": "ListItem",
                        "contents": [
                          {
                            "type": "Text",
                            "value": "Let "
                          },
                          {
                            "type": "Variable",
                            "name": "queryType"
                          },
                          {
                            "type": "Text",
                            "value": " be the root Query type in "
                          },
                          {
                            "type": "Variable",
                            "name": "schema"
                          },
                          {
                            "type": "Text",
                            "value": "."
                          }
                        ]
                      },
                      {
                        "type": "ListItem",
                        "contents": [
                          {
                            "type": "Text",
                            "value": "Assert: "
                          },
                          {
                            "type": "Variable",
                            "name": "queryType"
                          },
                          {
                            "type": "Text",
                            "value": " is an Object type."
                          }
                        ]
                      },
                      {
                        "type": "ListItem",
                        "contents": [
                          {
                            "type": "Text",
                            "value": "Let "
                          },
                          {
                            "type": "Variable",
                            "name": "selectionSet"
                          },
                          {
                            "type": "Text",
                            "value": " be the top level Selection Set in "
                          },
                          {
                            "type": "Variable",
                            "name": "query"
                          },
                          {
                            "type": "Text",
                            "value": "."
                          }
                        ]
                      },
                      {
                        "type": "ListItem",
                        "contents": [
                          {
                            "type": "Text",
                            "value": "Let "
                          },
                          {
                            "type": "Variable",
                            "name": "data"
                          },
                          {
                            "type": "Text",
                            "value": " be the result of running "
                          },
                          {
                            "type": "Call",
                            "name": "ExecuteSelectionSet",
                            "args": [
                              {
                                "type": "Variable",
                                "name": "selectionSet"
                              },
                              {
                                "type": "Variable",
                                "name": "queryType"
                              },
                              {
                                "type": "Variable",
                                "name": "initialValue"
                              },
                              {
                                "type": "Variable",
                                "name": "variableValues"
                              }
                            ]
                          },
                          {
                            "type": "Text",
                            "value": " "
                          },
                          {
                            "type": "Italic",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "normally"
                              }
                            ]
                          },
                          {
                            "type": "Text",
                            "value": " (allowing parallelization)."
                          }
                        ]
                      },
                      {
                        "type": "ListItem",
                        "contents": [
                          {
                            "type": "Text",
                            "value": "Let "
                          },
                          {
                            "type": "Variable",
                            "name": "errors"
                          },
                          {
                            "type": "Text",
                            "value": " be any "
                          },
                          {
                            "type": "Italic",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "field errors"
                              }
                            ]
                          },
                          {
                            "type": "Text",
                            "value": " produced while executing the selection set."
                          }
                        ]
                      },
                      {
                        "type": "ListItem",
                        "contents": [
                          {
                            "type": "Text",
                            "value": "Return an unordered map containing "
                          },
                          {
                            "type": "Variable",
                            "name": "data"
                          },
                          {
                            "type": "Text",
                            "value": " and "
                          },
                          {
                            "type": "Variable",
                            "name": "errors"
                          },
                          {
                            "type": "Text",
                            "value": "."
                          }
                        ]
                      }
                    ]
                  }
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Mutation"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "If the operation is a mutation, the result of the operation is the result of executing the mutation’s top level selection set on the mutation root object type. This selection set should be executed serially."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "It is expected that the top level fields in a mutation operation perform side-effects on the underlying data system. Serial execution of the provided mutations ensures against race conditions during these side-effects."
                    }
                  ]
                },
                {
                  "type": "Algorithm",
                  "call": {
                    "type": "Call",
                    "name": "ExecuteMutation",
                    "args": [
                      {
                        "type": "Variable",
                        "name": "mutation"
                      },
                      {
                        "type": "Variable",
                        "name": "schema"
                      },
                      {
                        "type": "Variable",
                        "name": "variableValues"
                      },
                      {
                        "type": "Variable",
                        "name": "initialValue"
                      }
                    ]
                  },
                  "steps": {
                    "type": "List",
                    "ordered": true,
                    "items": [
                      {
                        "type": "ListItem",
                        "contents": [
                          {
                            "type": "Text",
                            "value": "Let "
                          },
                          {
                            "type": "Variable",
                            "name": "mutationType"
                          },
                          {
                            "type": "Text",
                            "value": " be the root Mutation type in "
                          },
                          {
                            "type": "Variable",
                            "name": "schema"
                          },
                          {
                            "type": "Text",
                            "value": "."
                          }
                        ]
                      },
                      {
                        "type": "ListItem",
                        "contents": [
                          {
                            "type": "Text",
                            "value": "Assert: "
                          },
                          {
                            "type": "Variable",
                            "name": "mutationType"
                          },
                          {
                            "type": "Text",
                            "value": " is an Object type."
                          }
                        ]
                      },
                      {
                        "type": "ListItem",
                        "contents": [
                          {
                            "type": "Text",
                            "value": "Let "
                          },
                          {
                            "type": "Variable",
                            "name": "selectionSet"
                          },
                          {
                            "type": "Text",
                            "value": " be the top level Selection Set in "
                          },
                          {
                            "type": "Variable",
                            "name": "mutation"
                          },
                          {
                            "type": "Text",
                            "value": "."
                          }
                        ]
                      },
                      {
                        "type": "ListItem",
                        "contents": [
                          {
                            "type": "Text",
                            "value": "Let "
                          },
                          {
                            "type": "Variable",
                            "name": "data"
                          },
                          {
                            "type": "Text",
                            "value": " be the result of running "
                          },
                          {
                            "type": "Call",
                            "name": "ExecuteSelectionSet",
                            "args": [
                              {
                                "type": "Variable",
                                "name": "selectionSet"
                              },
                              {
                                "type": "Variable",
                                "name": "mutationType"
                              },
                              {
                                "type": "Variable",
                                "name": "initialValue"
                              },
                              {
                                "type": "Variable",
                                "name": "variableValues"
                              }
                            ]
                          },
                          {
                            "type": "Text",
                            "value": " "
                          },
                          {
                            "type": "Italic",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "serially"
                              }
                            ]
                          },
                          {
                            "type": "Text",
                            "value": "."
                          }
                        ]
                      },
                      {
                        "type": "ListItem",
                        "contents": [
                          {
                            "type": "Text",
                            "value": "Let "
                          },
                          {
                            "type": "Variable",
                            "name": "errors"
                          },
                          {
                            "type": "Text",
                            "value": " be any "
                          },
                          {
                            "type": "Italic",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "field errors"
                              }
                            ]
                          },
                          {
                            "type": "Text",
                            "value": " produced while executing the selection set."
                          }
                        ]
                      },
                      {
                        "type": "ListItem",
                        "contents": [
                          {
                            "type": "Text",
                            "value": "Return an unordered map containing "
                          },
                          {
                            "type": "Variable",
                            "name": "data"
                          },
                          {
                            "type": "Text",
                            "value": " and "
                          },
                          {
                            "type": "Variable",
                            "name": "errors"
                          },
                          {
                            "type": "Text",
                            "value": "."
                          }
                        ]
                      }
                    ]
                  }
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Subscription"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "If the operation is a subscription, the result is an event stream called the “Response Stream” where each event in the event stream is the result of executing the operation for each new event on an underlying “Source Stream”."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Executing a subscription creates a persistent function on the service that maps an underlying Source Stream to a returned Response Stream."
                    }
                  ]
                },
                {
                  "type": "Algorithm",
                  "call": {
                    "type": "Call",
                    "name": "Subscribe",
                    "args": [
                      {
                        "type": "Variable",
                        "name": "subscription"
                      },
                      {
                        "type": "Variable",
                        "name": "schema"
                      },
                      {
                        "type": "Variable",
                        "name": "variableValues"
                      },
                      {
                        "type": "Variable",
                        "name": "initialValue"
                      }
                    ]
                  },
                  "steps": {
                    "type": "List",
                    "ordered": true,
                    "items": [
                      {
                        "type": "ListItem",
                        "contents": [
                          {
                            "type": "Text",
                            "value": "Let "
                          },
                          {
                            "type": "Variable",
                            "name": "sourceStream"
                          },
                          {
                            "type": "Text",
                            "value": " be the result of running "
                          },
                          {
                            "type": "Call",
                            "name": "CreateSourceEventStream",
                            "args": [
                              {
                                "type": "Variable",
                                "name": "subscription"
                              },
                              {
                                "type": "Variable",
                                "name": "schema"
                              },
                              {
                                "type": "Variable",
                                "name": "variableValues"
                              },
                              {
                                "type": "Variable",
                                "name": "initialValue"
                              }
                            ]
                          },
                          {
                            "type": "Text",
                            "value": "."
                          }
                        ]
                      },
                      {
                        "type": "ListItem",
                        "contents": [
                          {
                            "type": "Text",
                            "value": "Let "
                          },
                          {
                            "type": "Variable",
                            "name": "responseStream"
                          },
                          {
                            "type": "Text",
                            "value": " be the result of running "
                          },
                          {
                            "type": "Call",
                            "name": "MapSourceToResponseEvent",
                            "args": [
                              {
                                "type": "Variable",
                                "name": "sourceStream"
                              },
                              {
                                "type": "Variable",
                                "name": "subscription"
                              },
                              {
                                "type": "Variable",
                                "name": "schema"
                              },
                              {
                                "type": "Variable",
                                "name": "variableValues"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "type": "ListItem",
                        "contents": [
                          {
                            "type": "Text",
                            "value": "Return "
                          },
                          {
                            "type": "Variable",
                            "name": "responseStream"
                          },
                          {
                            "type": "Text",
                            "value": "."
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "type": "Note",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "In large scale subscription systems, the "
                    },
                    {
                      "type": "Call",
                      "name": "Subscribe",
                      "args": []
                    },
                    {
                      "type": "Text",
                      "value": " and "
                    },
                    {
                      "type": "Call",
                      "name": "ExecuteSubscriptionEvent",
                      "args": []
                    },
                    {
                      "type": "Text",
                      "value": " algorithms may be run on separate services to maintain predictable scaling properties. See the section below on Supporting Subscriptions at Scale."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "As an example, consider a chat application. To subscribe to new messages posted to the chat room, the client sends a request like so:"
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": "graphql",
                  "example": true,
                  "counter": false,
                  "code": "subscription NewMessages {\n  newMessage(roomId: 123) {\n    sender\n    text\n  }\n}\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "While the client is subscribed, whenever new messages are posted to chat room with ID “123”, the selection for “sender” and “text” will be evaluated and published to the client, for example:"
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": "json",
                  "example": true,
                  "counter": false,
                  "code": "{\n  \"data\": {\n    \"newMessage\": {\n      \"sender\": \"Hagrid\",\n      \"text\": \"You're a wizard!\"\n    }\n  }\n}\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "The “new message posted to chat room” could use a “Pub-Sub” system where the chat room ID is the “topic” and each “publish” contains the sender and text."
                    }
                  ]
                },
                {
                  "type": "Subsection",
                  "header": {
                    "type": "Subheader",
                    "title": "Event Streams"
                  },
                  "contents": [
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "An event stream represents a sequence of discrete events over time which can be observed. As an example, a “Pub-Sub” system may produce an event stream when “subscribing to a topic”, with an event occurring on that event stream for each “publish” to that topic. Event streams may produce an infinite sequence of events or may complete at any point. Event streams may complete in response to an error or simply because no more events will occur. An observer may at any point decide to stop observing an event stream by cancelling it, after which it must receive no more events from that event stream."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "Subsection",
                  "header": {
                    "type": "Subheader",
                    "title": "Supporting Subscriptions at Scale"
                  },
                  "contents": [
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Supporting subscriptions is a significant change for any GraphQL service. Query and mutation operations are stateless, allowing scaling via cloning of GraphQL service instances. Subscriptions, by contrast, are stateful and require maintaining the GraphQL document, variables, and other context over the lifetime of the subscription."
                        }
                      ]
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Consider the behavior of your system when state is lost due to the failure of a single machine in a service. Durability and availability may be improved by having separate dedicated services for managing subscription state and client connectivity."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "Subsection",
                  "header": {
                    "type": "Subheader",
                    "title": "Delivery Agnostic"
                  },
                  "contents": [
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "GraphQL subscriptions do not require any specific serialization format or transport mechanism. Subscriptions specifies algorithms for the creation of a stream, the content of each payload on that stream, and the closing of that stream. There are intentionally no specifications for message acknowledgement, buffering, resend requests, or any other quality of service (QoS) details. Message serialization, transport mechanisms, and quality of service details should be chosen by the implementing service."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "Section",
                  "header": {
                    "type": "Header",
                    "level": 4,
                    "secID": null,
                    "title": "Source Stream"
                  },
                  "contents": [
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "A Source Stream represents the sequence of events, each of which will trigger a GraphQL execution corresponding to that event. Like field value resolution, the logic to create a Source Stream is application-specific."
                        }
                      ]
                    },
                    {
                      "type": "Algorithm",
                      "call": {
                        "type": "Call",
                        "name": "CreateSourceEventStream",
                        "args": [
                          {
                            "type": "Variable",
                            "name": "subscription"
                          },
                          {
                            "type": "Variable",
                            "name": "schema"
                          },
                          {
                            "type": "Variable",
                            "name": "variableValues"
                          },
                          {
                            "type": "Variable",
                            "name": "initialValue"
                          }
                        ]
                      },
                      "steps": {
                        "type": "List",
                        "ordered": true,
                        "items": [
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "Let "
                              },
                              {
                                "type": "Variable",
                                "name": "subscriptionType"
                              },
                              {
                                "type": "Text",
                                "value": " be the root Subscription type in "
                              },
                              {
                                "type": "Variable",
                                "name": "schema"
                              },
                              {
                                "type": "Text",
                                "value": "."
                              }
                            ]
                          },
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "Assert: "
                              },
                              {
                                "type": "Variable",
                                "name": "subscriptionType"
                              },
                              {
                                "type": "Text",
                                "value": " is an Object type."
                              }
                            ]
                          },
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "Let "
                              },
                              {
                                "type": "Variable",
                                "name": "groupedFieldSet"
                              },
                              {
                                "type": "Text",
                                "value": " be the result of "
                              },
                              {
                                "type": "Call",
                                "name": "CollectFields",
                                "args": [
                                  {
                                    "type": "Variable",
                                    "name": "subscriptionType"
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "selectionSet"
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "variableValues"
                                  }
                                ]
                              },
                              {
                                "type": "Text",
                                "value": "."
                              }
                            ]
                          },
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "If "
                              },
                              {
                                "type": "Variable",
                                "name": "groupedFieldSet"
                              },
                              {
                                "type": "Text",
                                "value": " does not have exactly one entry, throw a query error."
                              }
                            ]
                          },
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "Let "
                              },
                              {
                                "type": "Variable",
                                "name": "fields"
                              },
                              {
                                "type": "Text",
                                "value": " be the value of the first entry in "
                              },
                              {
                                "type": "Variable",
                                "name": "groupedFieldSet"
                              },
                              {
                                "type": "Text",
                                "value": "."
                              }
                            ]
                          },
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "Let "
                              },
                              {
                                "type": "Variable",
                                "name": "fieldName"
                              },
                              {
                                "type": "Text",
                                "value": " be the name of the first entry in "
                              },
                              {
                                "type": "Variable",
                                "name": "fields"
                              },
                              {
                                "type": "Text",
                                "value": ". Note: This value is unaffected if an alias is used."
                              }
                            ]
                          },
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "Let "
                              },
                              {
                                "type": "Variable",
                                "name": "field"
                              },
                              {
                                "type": "Text",
                                "value": " be the first entry in "
                              },
                              {
                                "type": "Variable",
                                "name": "fields"
                              },
                              {
                                "type": "Text",
                                "value": "."
                              }
                            ]
                          },
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "Let "
                              },
                              {
                                "type": "Variable",
                                "name": "argumentValues"
                              },
                              {
                                "type": "Text",
                                "value": " be the result of "
                              },
                              {
                                "type": "Call",
                                "name": "CoerceArgumentValues",
                                "args": [
                                  {
                                    "type": "Variable",
                                    "name": "subscriptionType"
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "field"
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "variableValues"
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "Let "
                              },
                              {
                                "type": "Variable",
                                "name": "fieldStream"
                              },
                              {
                                "type": "Text",
                                "value": " be the result of running "
                              },
                              {
                                "type": "Call",
                                "name": "ResolveFieldEventStream",
                                "args": [
                                  {
                                    "type": "Variable",
                                    "name": "subscriptionType"
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "initialValue"
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "fieldName"
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "argumentValues"
                                  }
                                ]
                              },
                              {
                                "type": "Text",
                                "value": "."
                              }
                            ]
                          },
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "Return "
                              },
                              {
                                "type": "Variable",
                                "name": "fieldStream"
                              },
                              {
                                "type": "Text",
                                "value": "."
                              }
                            ]
                          }
                        ]
                      }
                    },
                    {
                      "type": "Algorithm",
                      "call": {
                        "type": "Call",
                        "name": "ResolveFieldEventStream",
                        "args": [
                          {
                            "type": "Variable",
                            "name": "subscriptionType"
                          },
                          {
                            "type": "Variable",
                            "name": "rootValue"
                          },
                          {
                            "type": "Variable",
                            "name": "fieldName"
                          },
                          {
                            "type": "Variable",
                            "name": "argumentValues"
                          }
                        ]
                      },
                      "steps": {
                        "type": "List",
                        "ordered": true,
                        "items": [
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "Let "
                              },
                              {
                                "type": "Variable",
                                "name": "resolver"
                              },
                              {
                                "type": "Text",
                                "value": " be the internal function provided by "
                              },
                              {
                                "type": "Variable",
                                "name": "subscriptionType"
                              },
                              {
                                "type": "Text",
                                "value": " for determining the resolved event stream of a subscription field named "
                              },
                              {
                                "type": "Variable",
                                "name": "fieldName"
                              },
                              {
                                "type": "Text",
                                "value": "."
                              }
                            ]
                          },
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "Return the result of calling "
                              },
                              {
                                "type": "Variable",
                                "name": "resolver"
                              },
                              {
                                "type": "Text",
                                "value": ", providing "
                              },
                              {
                                "type": "Variable",
                                "name": "rootValue"
                              },
                              {
                                "type": "Text",
                                "value": " and "
                              },
                              {
                                "type": "Variable",
                                "name": "argumentValues"
                              },
                              {
                                "type": "Text",
                                "value": "."
                              }
                            ]
                          }
                        ]
                      }
                    },
                    {
                      "type": "Note",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "This "
                        },
                        {
                          "type": "Call",
                          "name": "ResolveFieldEventStream",
                          "args": []
                        },
                        {
                          "type": "Text",
                          "value": " algorithm is intentionally similar to "
                        },
                        {
                          "type": "Call",
                          "name": "ResolveFieldValue",
                          "args": []
                        },
                        {
                          "type": "Text",
                          "value": " to enable consistency when defining resolvers on any operation type."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "Section",
                  "header": {
                    "type": "Header",
                    "level": 4,
                    "secID": null,
                    "title": "Response Stream"
                  },
                  "contents": [
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Each event in the underlying Source Stream triggers execution of the subscription selection set using that event as a root value."
                        }
                      ]
                    },
                    {
                      "type": "Algorithm",
                      "call": {
                        "type": "Call",
                        "name": "MapSourceToResponseEvent",
                        "args": [
                          {
                            "type": "Variable",
                            "name": "sourceStream"
                          },
                          {
                            "type": "Variable",
                            "name": "subscription"
                          },
                          {
                            "type": "Variable",
                            "name": "schema"
                          },
                          {
                            "type": "Variable",
                            "name": "variableValues"
                          }
                        ]
                      },
                      "steps": {
                        "type": "List",
                        "ordered": true,
                        "items": [
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "Return a new event stream "
                              },
                              {
                                "type": "Variable",
                                "name": "responseStream"
                              },
                              {
                                "type": "Text",
                                "value": " which yields events as follows:"
                              }
                            ]
                          },
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "For each "
                              },
                              {
                                "type": "Variable",
                                "name": "event"
                              },
                              {
                                "type": "Text",
                                "value": " on "
                              },
                              {
                                "type": "Variable",
                                "name": "sourceStream"
                              },
                              {
                                "type": "Text",
                                "value": ":"
                              },
                              {
                                "type": "List",
                                "ordered": true,
                                "items": [
                                  {
                                    "type": "ListItem",
                                    "contents": [
                                      {
                                        "type": "Text",
                                        "value": "Let "
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "response"
                                      },
                                      {
                                        "type": "Text",
                                        "value": " be the result of running "
                                      },
                                      {
                                        "type": "Call",
                                        "name": "ExecuteSubscriptionEvent",
                                        "args": [
                                          {
                                            "type": "Variable",
                                            "name": "subscription"
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "schema"
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "variableValues"
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "event"
                                          }
                                        ]
                                      },
                                      {
                                        "type": "Text",
                                        "value": "."
                                      }
                                    ]
                                  },
                                  {
                                    "type": "ListItem",
                                    "contents": [
                                      {
                                        "type": "Text",
                                        "value": "Yield an event containing "
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "response"
                                      },
                                      {
                                        "type": "Text",
                                        "value": "."
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "When "
                              },
                              {
                                "type": "Variable",
                                "name": "responseStream"
                              },
                              {
                                "type": "Text",
                                "value": " completes: complete this event stream."
                              }
                            ]
                          }
                        ]
                      }
                    },
                    {
                      "type": "Algorithm",
                      "call": {
                        "type": "Call",
                        "name": "ExecuteSubscriptionEvent",
                        "args": [
                          {
                            "type": "Variable",
                            "name": "subscription"
                          },
                          {
                            "type": "Variable",
                            "name": "schema"
                          },
                          {
                            "type": "Variable",
                            "name": "variableValues"
                          },
                          {
                            "type": "Variable",
                            "name": "initialValue"
                          }
                        ]
                      },
                      "steps": {
                        "type": "List",
                        "ordered": true,
                        "items": [
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "Let "
                              },
                              {
                                "type": "Variable",
                                "name": "subscriptionType"
                              },
                              {
                                "type": "Text",
                                "value": " be the root Subscription type in "
                              },
                              {
                                "type": "Variable",
                                "name": "schema"
                              },
                              {
                                "type": "Text",
                                "value": "."
                              }
                            ]
                          },
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "Assert: "
                              },
                              {
                                "type": "Variable",
                                "name": "subscriptionType"
                              },
                              {
                                "type": "Text",
                                "value": " is an Object type."
                              }
                            ]
                          },
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "Let "
                              },
                              {
                                "type": "Variable",
                                "name": "selectionSet"
                              },
                              {
                                "type": "Text",
                                "value": " be the top level Selection Set in "
                              },
                              {
                                "type": "Variable",
                                "name": "subscription"
                              },
                              {
                                "type": "Text",
                                "value": "."
                              }
                            ]
                          },
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "Let "
                              },
                              {
                                "type": "Variable",
                                "name": "data"
                              },
                              {
                                "type": "Text",
                                "value": " be the result of running "
                              },
                              {
                                "type": "Call",
                                "name": "ExecuteSelectionSet",
                                "args": [
                                  {
                                    "type": "Variable",
                                    "name": "selectionSet"
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "subscriptionType"
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "initialValue"
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "variableValues"
                                  }
                                ]
                              },
                              {
                                "type": "Text",
                                "value": " "
                              },
                              {
                                "type": "Italic",
                                "contents": [
                                  {
                                    "type": "Text",
                                    "value": "normally"
                                  }
                                ]
                              },
                              {
                                "type": "Text",
                                "value": " (allowing parallelization)."
                              }
                            ]
                          },
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "Let "
                              },
                              {
                                "type": "Variable",
                                "name": "errors"
                              },
                              {
                                "type": "Text",
                                "value": " be any "
                              },
                              {
                                "type": "Italic",
                                "contents": [
                                  {
                                    "type": "Text",
                                    "value": "field errors"
                                  }
                                ]
                              },
                              {
                                "type": "Text",
                                "value": " produced while executing the selection set."
                              }
                            ]
                          },
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "Return an unordered map containing "
                              },
                              {
                                "type": "Variable",
                                "name": "data"
                              },
                              {
                                "type": "Text",
                                "value": " and "
                              },
                              {
                                "type": "Variable",
                                "name": "errors"
                              },
                              {
                                "type": "Text",
                                "value": "."
                              }
                            ]
                          }
                        ]
                      }
                    },
                    {
                      "type": "Note",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "The "
                        },
                        {
                          "type": "Call",
                          "name": "ExecuteSubscriptionEvent",
                          "args": []
                        },
                        {
                          "type": "Text",
                          "value": " algorithm is intentionally similar to "
                        },
                        {
                          "type": "Call",
                          "name": "ExecuteQuery",
                          "args": []
                        },
                        {
                          "type": "Text",
                          "value": " since this is how each event result is produced."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "Section",
                  "header": {
                    "type": "Header",
                    "level": 4,
                    "secID": null,
                    "title": "Unsubscribe"
                  },
                  "contents": [
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Unsubscribe cancels the Response Stream when a client no longer wishes to receive payloads for a subscription. This may in turn also cancel the Source Stream. This is also a good opportunity to clean up any other resources used by the subscription."
                        }
                      ]
                    },
                    {
                      "type": "Algorithm",
                      "call": {
                        "type": "Call",
                        "name": "Unsubscribe",
                        "args": [
                          {
                            "type": "Variable",
                            "name": "responseStream"
                          }
                        ]
                      },
                      "steps": {
                        "type": "List",
                        "ordered": true,
                        "items": [
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "Cancel "
                              },
                              {
                                "type": "Variable",
                                "name": "responseStream"
                              }
                            ]
                          }
                        ]
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Executing Selection Sets"
          },
          "contents": [
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "To execute a selection set, the object value being evaluated and the object type need to be known, as well as whether it must be executed serially, or may be executed in parallel."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "First, the selection set is turned into a grouped field set; then, each represented field in the grouped field set produces an entry into a response map."
                }
              ]
            },
            {
              "type": "Algorithm",
              "call": {
                "type": "Call",
                "name": "ExecuteSelectionSet",
                "args": [
                  {
                    "type": "Variable",
                    "name": "selectionSet"
                  },
                  {
                    "type": "Variable",
                    "name": "objectType"
                  },
                  {
                    "type": "Variable",
                    "name": "objectValue"
                  },
                  {
                    "type": "Variable",
                    "name": "variableValues"
                  }
                ]
              },
              "steps": {
                "type": "List",
                "ordered": true,
                "items": [
                  {
                    "type": "ListItem",
                    "contents": [
                      {
                        "type": "Text",
                        "value": "Let "
                      },
                      {
                        "type": "Variable",
                        "name": "groupedFieldSet"
                      },
                      {
                        "type": "Text",
                        "value": " be the result of "
                      },
                      {
                        "type": "Call",
                        "name": "CollectFields",
                        "args": [
                          {
                            "type": "Variable",
                            "name": "objectType"
                          },
                          {
                            "type": "Variable",
                            "name": "selectionSet"
                          },
                          {
                            "type": "Variable",
                            "name": "variableValues"
                          }
                        ]
                      },
                      {
                        "type": "Text",
                        "value": "."
                      }
                    ]
                  },
                  {
                    "type": "ListItem",
                    "contents": [
                      {
                        "type": "Text",
                        "value": "Initialize "
                      },
                      {
                        "type": "Variable",
                        "name": "resultMap"
                      },
                      {
                        "type": "Text",
                        "value": " to an empty ordered map."
                      }
                    ]
                  },
                  {
                    "type": "ListItem",
                    "contents": [
                      {
                        "type": "Text",
                        "value": "For each "
                      },
                      {
                        "type": "Variable",
                        "name": "groupedFieldSet"
                      },
                      {
                        "type": "Text",
                        "value": " as "
                      },
                      {
                        "type": "Variable",
                        "name": "responseKey"
                      },
                      {
                        "type": "Text",
                        "value": " and "
                      },
                      {
                        "type": "Variable",
                        "name": "fields"
                      },
                      {
                        "type": "Text",
                        "value": ":"
                      },
                      {
                        "type": "List",
                        "ordered": true,
                        "items": [
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "Let "
                              },
                              {
                                "type": "Variable",
                                "name": "fieldName"
                              },
                              {
                                "type": "Text",
                                "value": " be the name of the first entry in "
                              },
                              {
                                "type": "Variable",
                                "name": "fields"
                              },
                              {
                                "type": "Text",
                                "value": ". Note: This value is unaffected if an alias is used."
                              }
                            ]
                          },
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "Let "
                              },
                              {
                                "type": "Variable",
                                "name": "fieldType"
                              },
                              {
                                "type": "Text",
                                "value": " be the return type defined for the field "
                              },
                              {
                                "type": "Variable",
                                "name": "fieldName"
                              },
                              {
                                "type": "Text",
                                "value": " of "
                              },
                              {
                                "type": "Variable",
                                "name": "objectType"
                              },
                              {
                                "type": "Text",
                                "value": "."
                              }
                            ]
                          },
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "If "
                              },
                              {
                                "type": "Variable",
                                "name": "fieldType"
                              },
                              {
                                "type": "Text",
                                "value": " is defined:"
                              },
                              {
                                "type": "List",
                                "ordered": true,
                                "items": [
                                  {
                                    "type": "ListItem",
                                    "contents": [
                                      {
                                        "type": "Text",
                                        "value": "Let "
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "responseValue"
                                      },
                                      {
                                        "type": "Text",
                                        "value": " be "
                                      },
                                      {
                                        "type": "Call",
                                        "name": "ExecuteField",
                                        "args": [
                                          {
                                            "type": "Variable",
                                            "name": "objectType"
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "objectValue"
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "fieldType"
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "fields"
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "variableValues"
                                          }
                                        ]
                                      },
                                      {
                                        "type": "Text",
                                        "value": "."
                                      }
                                    ]
                                  },
                                  {
                                    "type": "ListItem",
                                    "contents": [
                                      {
                                        "type": "Text",
                                        "value": "Set "
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "responseValue"
                                      },
                                      {
                                        "type": "Text",
                                        "value": " as the value for "
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "responseKey"
                                      },
                                      {
                                        "type": "Text",
                                        "value": " in "
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "resultMap"
                                      },
                                      {
                                        "type": "Text",
                                        "value": "."
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "type": "ListItem",
                    "contents": [
                      {
                        "type": "Text",
                        "value": "Return "
                      },
                      {
                        "type": "Variable",
                        "name": "resultMap"
                      },
                      {
                        "type": "Text",
                        "value": "."
                      }
                    ]
                  }
                ]
              }
            },
            {
              "type": "Note",
              "contents": [
                {
                  "type": "Variable",
                  "name": "resultMap"
                },
                {
                  "type": "Text",
                  "value": " is ordered by which fields appear first in the query. This is explained in greater detail in the Field Collection section below."
                }
              ]
            },
            {
              "type": "Subsection",
              "header": {
                "type": "Subheader",
                "title": "Errors and Non-Null Fields"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "If during "
                    },
                    {
                      "type": "Call",
                      "name": "ExecuteSelectionSet",
                      "args": []
                    },
                    {
                      "type": "Text",
                      "value": " a field with a non-null "
                    },
                    {
                      "type": "Variable",
                      "name": "fieldType"
                    },
                    {
                      "type": "Text",
                      "value": " throws a field error then that error must propagate to this entire selection set, either resolving to "
                    },
                    {
                      "type": "Keyword",
                      "value": "null"
                    },
                    {
                      "type": "Text",
                      "value": " if allowed or further propagated to a parent field."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "If this occurs, any sibling fields which have not yet executed or have not yet yielded a value may be cancelled to avoid unnecessary work."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "See the "
                    },
                    {
                      "type": "Link",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Errors and Non-Nullability"
                        }
                      ],
                      "url": "#sec-Errors-and-Non-Nullability"
                    },
                    {
                      "type": "Text",
                      "value": " section of Field Execution for more about this behavior."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Normal and Serial Execution"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Normally the executor can execute the entries in a grouped field set in whatever order it chooses (normally in parallel). Because the resolution of fields other than top-level mutation fields must always be side effect-free and idempotent, the execution order must not affect the result, and hence the service has the freedom to execute the field entries in whatever order it deems optimal."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "For example, given the following grouped field set to be executed normally:"
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": "graphql",
                  "example": true,
                  "counter": false,
                  "code": "{\n  birthday {\n    month\n  }\n  address {\n    street\n  }\n}\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "A valid GraphQL executor can resolve the four fields in whatever order it chose (however of course "
                    },
                    {
                      "type": "InlineCode",
                      "code": "birthday"
                    },
                    {
                      "type": "Text",
                      "value": " must be resolved before "
                    },
                    {
                      "type": "InlineCode",
                      "code": "month"
                    },
                    {
                      "type": "Text",
                      "value": ", and "
                    },
                    {
                      "type": "InlineCode",
                      "code": "address"
                    },
                    {
                      "type": "Text",
                      "value": " before "
                    },
                    {
                      "type": "InlineCode",
                      "code": "street"
                    },
                    {
                      "type": "Text",
                      "value": ")."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "When executing a mutation, the selections in the top most selection set will be executed in serial order, starting with the first appearing field textually."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "When executing a grouped field set serially, the executor must consider each entry from the grouped field set in the order provided in the grouped field set. It must determine the corresponding entry in the result map for each item to completion before it continues on to the next item in the grouped field set:"
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "For example, given the following selection set to be executed serially:"
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": "graphql",
                  "example": true,
                  "counter": false,
                  "code": "{\n  changeBirthday(birthday: $newBirthday) {\n    month\n  }\n  changeAddress(address: $newAddress) {\n    street\n  }\n}\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "The executor must, in serial:"
                    }
                  ]
                },
                {
                  "type": "List",
                  "ordered": false,
                  "items": [
                    {
                      "type": "ListItem",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Run "
                        },
                        {
                          "type": "Call",
                          "name": "ExecuteField",
                          "args": []
                        },
                        {
                          "type": "Text",
                          "value": " for "
                        },
                        {
                          "type": "InlineCode",
                          "code": "changeBirthday"
                        },
                        {
                          "type": "Text",
                          "value": ", which during "
                        },
                        {
                          "type": "Call",
                          "name": "CompleteValue",
                          "args": []
                        },
                        {
                          "type": "Text",
                          "value": " will execute the "
                        },
                        {
                          "type": "InlineCode",
                          "code": "{ month }"
                        },
                        {
                          "type": "Text",
                          "value": " sub-selection set normally."
                        }
                      ]
                    },
                    {
                      "type": "ListItem",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Run "
                        },
                        {
                          "type": "Call",
                          "name": "ExecuteField",
                          "args": []
                        },
                        {
                          "type": "Text",
                          "value": " for "
                        },
                        {
                          "type": "InlineCode",
                          "code": "changeAddress"
                        },
                        {
                          "type": "Text",
                          "value": ", which during "
                        },
                        {
                          "type": "Call",
                          "name": "CompleteValue",
                          "args": []
                        },
                        {
                          "type": "Text",
                          "value": " will execute the "
                        },
                        {
                          "type": "InlineCode",
                          "code": "{ street }"
                        },
                        {
                          "type": "Text",
                          "value": " sub-selection set normally."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "As an illustrative example, let’s assume we have a mutation field "
                    },
                    {
                      "type": "InlineCode",
                      "code": "changeTheNumber"
                    },
                    {
                      "type": "Text",
                      "value": " that returns an object containing one field, "
                    },
                    {
                      "type": "InlineCode",
                      "code": "theNumber"
                    },
                    {
                      "type": "Text",
                      "value": ". If we execute the following selection set serially:"
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": "graphql",
                  "example": true,
                  "counter": false,
                  "code": "{\n  first: changeTheNumber(newNumber: 1) {\n    theNumber\n  }\n  second: changeTheNumber(newNumber: 3) {\n    theNumber\n  }\n  third: changeTheNumber(newNumber: 2) {\n    theNumber\n  }\n}\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "The executor will execute the following serially:"
                    }
                  ]
                },
                {
                  "type": "List",
                  "ordered": false,
                  "items": [
                    {
                      "type": "ListItem",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Resolve the "
                        },
                        {
                          "type": "InlineCode",
                          "code": "changeTheNumber(newNumber: 1)"
                        },
                        {
                          "type": "Text",
                          "value": " field"
                        }
                      ]
                    },
                    {
                      "type": "ListItem",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Execute the "
                        },
                        {
                          "type": "InlineCode",
                          "code": "{ theNumber }"
                        },
                        {
                          "type": "Text",
                          "value": " sub-selection set of "
                        },
                        {
                          "type": "InlineCode",
                          "code": "first"
                        },
                        {
                          "type": "Text",
                          "value": " normally"
                        }
                      ]
                    },
                    {
                      "type": "ListItem",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Resolve the "
                        },
                        {
                          "type": "InlineCode",
                          "code": "changeTheNumber(newNumber: 3)"
                        },
                        {
                          "type": "Text",
                          "value": " field"
                        }
                      ]
                    },
                    {
                      "type": "ListItem",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Execute the "
                        },
                        {
                          "type": "InlineCode",
                          "code": "{ theNumber }"
                        },
                        {
                          "type": "Text",
                          "value": " sub-selection set of "
                        },
                        {
                          "type": "InlineCode",
                          "code": "second"
                        },
                        {
                          "type": "Text",
                          "value": " normally"
                        }
                      ]
                    },
                    {
                      "type": "ListItem",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Resolve the "
                        },
                        {
                          "type": "InlineCode",
                          "code": "changeTheNumber(newNumber: 2)"
                        },
                        {
                          "type": "Text",
                          "value": " field"
                        }
                      ]
                    },
                    {
                      "type": "ListItem",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Execute the "
                        },
                        {
                          "type": "InlineCode",
                          "code": "{ theNumber }"
                        },
                        {
                          "type": "Text",
                          "value": " sub-selection set of "
                        },
                        {
                          "type": "InlineCode",
                          "code": "third"
                        },
                        {
                          "type": "Text",
                          "value": " normally"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "A correct executor must generate the following result for that selection set:"
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": "json",
                  "example": true,
                  "counter": false,
                  "code": "{\n  \"first\": {\n    \"theNumber\": 1\n  },\n  \"second\": {\n    \"theNumber\": 3\n  },\n  \"third\": {\n    \"theNumber\": 2\n  }\n}\n"
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Field Collection"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Before execution, the selection set is converted to a grouped field set by calling "
                    },
                    {
                      "type": "Call",
                      "name": "CollectFields",
                      "args": []
                    },
                    {
                      "type": "Text",
                      "value": ". Each entry in the grouped field set is a list of fields that share a response key (the alias if defined, otherwise the field name). This ensures all fields with the same response key included via referenced fragments are executed at the same time."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "As an example, collecting the fields of this selection set would collect two instances of the field "
                    },
                    {
                      "type": "InlineCode",
                      "code": "a"
                    },
                    {
                      "type": "Text",
                      "value": " and one of field "
                    },
                    {
                      "type": "InlineCode",
                      "code": "b"
                    },
                    {
                      "type": "Text",
                      "value": ":"
                    }
                  ]
                },
                {
                  "type": "Code",
                  "raw": false,
                  "lang": "graphql",
                  "example": true,
                  "counter": false,
                  "code": "{\n  a {\n    subfield1\n  }\n  ...ExampleFragment\n}\n\nfragment ExampleFragment on Query {\n  a {\n    subfield2\n  }\n  b\n}\n"
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "The depth-first-search order of the field groups produced by "
                    },
                    {
                      "type": "Call",
                      "name": "CollectFields",
                      "args": []
                    },
                    {
                      "type": "Text",
                      "value": " is maintained through execution, ensuring that fields appear in the executed response in a stable and predictable order."
                    }
                  ]
                },
                {
                  "type": "Algorithm",
                  "call": {
                    "type": "Call",
                    "name": "CollectFields",
                    "args": [
                      {
                        "type": "Variable",
                        "name": "objectType"
                      },
                      {
                        "type": "Variable",
                        "name": "selectionSet"
                      },
                      {
                        "type": "Variable",
                        "name": "variableValues"
                      },
                      {
                        "type": "Variable",
                        "name": "visitedFragments"
                      }
                    ]
                  },
                  "steps": {
                    "type": "List",
                    "ordered": true,
                    "items": [
                      {
                        "type": "ListItem",
                        "contents": [
                          {
                            "type": "Text",
                            "value": "If "
                          },
                          {
                            "type": "Variable",
                            "name": "visitedFragments"
                          },
                          {
                            "type": "Text",
                            "value": " is not provided, initialize it to the empty set."
                          }
                        ]
                      },
                      {
                        "type": "ListItem",
                        "contents": [
                          {
                            "type": "Text",
                            "value": "Initialize "
                          },
                          {
                            "type": "Variable",
                            "name": "groupedFields"
                          },
                          {
                            "type": "Text",
                            "value": " to an empty ordered map of lists."
                          }
                        ]
                      },
                      {
                        "type": "ListItem",
                        "contents": [
                          {
                            "type": "Text",
                            "value": "For each "
                          },
                          {
                            "type": "Variable",
                            "name": "selection"
                          },
                          {
                            "type": "Text",
                            "value": " in "
                          },
                          {
                            "type": "Variable",
                            "name": "selectionSet"
                          },
                          {
                            "type": "Text",
                            "value": ":"
                          },
                          {
                            "type": "List",
                            "ordered": true,
                            "items": [
                              {
                                "type": "ListItem",
                                "contents": [
                                  {
                                    "type": "Text",
                                    "value": "If "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "selection"
                                  },
                                  {
                                    "type": "Text",
                                    "value": " provides the directive "
                                  },
                                  {
                                    "type": "InlineCode",
                                    "code": "@skip"
                                  },
                                  {
                                    "type": "Text",
                                    "value": ", let "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "skipDirective"
                                  },
                                  {
                                    "type": "Text",
                                    "value": " be that directive."
                                  },
                                  {
                                    "type": "List",
                                    "ordered": true,
                                    "items": [
                                      {
                                        "type": "ListItem",
                                        "contents": [
                                          {
                                            "type": "Text",
                                            "value": "If "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "skipDirective"
                                          },
                                          {
                                            "type": "Text",
                                            "value": "‘s "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "if"
                                          },
                                          {
                                            "type": "Text",
                                            "value": " argument is "
                                          },
                                          {
                                            "type": "Keyword",
                                            "value": "true"
                                          },
                                          {
                                            "type": "Text",
                                            "value": " or is a variable in "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "variableValues"
                                          },
                                          {
                                            "type": "Text",
                                            "value": " with the value "
                                          },
                                          {
                                            "type": "Keyword",
                                            "value": "true"
                                          },
                                          {
                                            "type": "Text",
                                            "value": ", continue with the next "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "selection"
                                          },
                                          {
                                            "type": "Text",
                                            "value": " in "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "selectionSet"
                                          },
                                          {
                                            "type": "Text",
                                            "value": "."
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "type": "ListItem",
                                "contents": [
                                  {
                                    "type": "Text",
                                    "value": "If "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "selection"
                                  },
                                  {
                                    "type": "Text",
                                    "value": " provides the directive "
                                  },
                                  {
                                    "type": "InlineCode",
                                    "code": "@include"
                                  },
                                  {
                                    "type": "Text",
                                    "value": ", let "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "includeDirective"
                                  },
                                  {
                                    "type": "Text",
                                    "value": " be that directive."
                                  },
                                  {
                                    "type": "List",
                                    "ordered": true,
                                    "items": [
                                      {
                                        "type": "ListItem",
                                        "contents": [
                                          {
                                            "type": "Text",
                                            "value": "If "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "includeDirective"
                                          },
                                          {
                                            "type": "Text",
                                            "value": "‘s "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "if"
                                          },
                                          {
                                            "type": "Text",
                                            "value": " argument is not "
                                          },
                                          {
                                            "type": "Keyword",
                                            "value": "true"
                                          },
                                          {
                                            "type": "Text",
                                            "value": " and is not a variable in "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "variableValues"
                                          },
                                          {
                                            "type": "Text",
                                            "value": " with the value "
                                          },
                                          {
                                            "type": "Keyword",
                                            "value": "true"
                                          },
                                          {
                                            "type": "Text",
                                            "value": ", continue with the next "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "selection"
                                          },
                                          {
                                            "type": "Text",
                                            "value": " in "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "selectionSet"
                                          },
                                          {
                                            "type": "Text",
                                            "value": "."
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "type": "ListItem",
                                "contents": [
                                  {
                                    "type": "Text",
                                    "value": "If "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "selection"
                                  },
                                  {
                                    "type": "Text",
                                    "value": " is a "
                                  },
                                  {
                                    "type": "NonTerminal",
                                    "name": "Field",
                                    "params": null
                                  },
                                  {
                                    "type": "Text",
                                    "value": ":"
                                  },
                                  {
                                    "type": "List",
                                    "ordered": true,
                                    "items": [
                                      {
                                        "type": "ListItem",
                                        "contents": [
                                          {
                                            "type": "Text",
                                            "value": "Let "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "responseKey"
                                          },
                                          {
                                            "type": "Text",
                                            "value": " be the response key of "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "selection"
                                          },
                                          {
                                            "type": "Text",
                                            "value": " (the alias if defined, otherwise the field name)."
                                          }
                                        ]
                                      },
                                      {
                                        "type": "ListItem",
                                        "contents": [
                                          {
                                            "type": "Text",
                                            "value": "Let "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "groupForResponseKey"
                                          },
                                          {
                                            "type": "Text",
                                            "value": " be the list in "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "groupedFields"
                                          },
                                          {
                                            "type": "Text",
                                            "value": " for "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "responseKey"
                                          },
                                          {
                                            "type": "Text",
                                            "value": "; if no such list exists, create it as an empty list."
                                          }
                                        ]
                                      },
                                      {
                                        "type": "ListItem",
                                        "contents": [
                                          {
                                            "type": "Text",
                                            "value": "Append "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "selection"
                                          },
                                          {
                                            "type": "Text",
                                            "value": " to the "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "groupForResponseKey"
                                          },
                                          {
                                            "type": "Text",
                                            "value": "."
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "type": "ListItem",
                                "contents": [
                                  {
                                    "type": "Text",
                                    "value": "If "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "selection"
                                  },
                                  {
                                    "type": "Text",
                                    "value": " is a "
                                  },
                                  {
                                    "type": "NonTerminal",
                                    "name": "FragmentSpread",
                                    "params": null
                                  },
                                  {
                                    "type": "Text",
                                    "value": ":"
                                  },
                                  {
                                    "type": "List",
                                    "ordered": true,
                                    "items": [
                                      {
                                        "type": "ListItem",
                                        "contents": [
                                          {
                                            "type": "Text",
                                            "value": "Let "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "fragmentSpreadName"
                                          },
                                          {
                                            "type": "Text",
                                            "value": " be the name of "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "selection"
                                          },
                                          {
                                            "type": "Text",
                                            "value": "."
                                          }
                                        ]
                                      },
                                      {
                                        "type": "ListItem",
                                        "contents": [
                                          {
                                            "type": "Text",
                                            "value": "If "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "fragmentSpreadName"
                                          },
                                          {
                                            "type": "Text",
                                            "value": " is in "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "visitedFragments"
                                          },
                                          {
                                            "type": "Text",
                                            "value": ", continue with the next "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "selection"
                                          },
                                          {
                                            "type": "Text",
                                            "value": " in "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "selectionSet"
                                          },
                                          {
                                            "type": "Text",
                                            "value": "."
                                          }
                                        ]
                                      },
                                      {
                                        "type": "ListItem",
                                        "contents": [
                                          {
                                            "type": "Text",
                                            "value": "Add "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "fragmentSpreadName"
                                          },
                                          {
                                            "type": "Text",
                                            "value": " to "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "visitedFragments"
                                          },
                                          {
                                            "type": "Text",
                                            "value": "."
                                          }
                                        ]
                                      },
                                      {
                                        "type": "ListItem",
                                        "contents": [
                                          {
                                            "type": "Text",
                                            "value": "Let "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "fragment"
                                          },
                                          {
                                            "type": "Text",
                                            "value": " be the Fragment in the current Document whose name is "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "fragmentSpreadName"
                                          },
                                          {
                                            "type": "Text",
                                            "value": "."
                                          }
                                        ]
                                      },
                                      {
                                        "type": "ListItem",
                                        "contents": [
                                          {
                                            "type": "Text",
                                            "value": "If no such "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "fragment"
                                          },
                                          {
                                            "type": "Text",
                                            "value": " exists, continue with the next "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "selection"
                                          },
                                          {
                                            "type": "Text",
                                            "value": " in "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "selectionSet"
                                          },
                                          {
                                            "type": "Text",
                                            "value": "."
                                          }
                                        ]
                                      },
                                      {
                                        "type": "ListItem",
                                        "contents": [
                                          {
                                            "type": "Text",
                                            "value": "Let "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "fragmentType"
                                          },
                                          {
                                            "type": "Text",
                                            "value": " be the type condition on "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "fragment"
                                          },
                                          {
                                            "type": "Text",
                                            "value": "."
                                          }
                                        ]
                                      },
                                      {
                                        "type": "ListItem",
                                        "contents": [
                                          {
                                            "type": "Text",
                                            "value": "If "
                                          },
                                          {
                                            "type": "Call",
                                            "name": "DoesFragmentTypeApply",
                                            "args": [
                                              {
                                                "type": "Variable",
                                                "name": "objectType"
                                              },
                                              {
                                                "type": "Variable",
                                                "name": "fragmentType"
                                              }
                                            ]
                                          },
                                          {
                                            "type": "Text",
                                            "value": " is false, continue with the next "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "selection"
                                          },
                                          {
                                            "type": "Text",
                                            "value": " in "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "selectionSet"
                                          },
                                          {
                                            "type": "Text",
                                            "value": "."
                                          }
                                        ]
                                      },
                                      {
                                        "type": "ListItem",
                                        "contents": [
                                          {
                                            "type": "Text",
                                            "value": "Let "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "fragmentSelectionSet"
                                          },
                                          {
                                            "type": "Text",
                                            "value": " be the top-level selection set of "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "fragment"
                                          },
                                          {
                                            "type": "Text",
                                            "value": "."
                                          }
                                        ]
                                      },
                                      {
                                        "type": "ListItem",
                                        "contents": [
                                          {
                                            "type": "Text",
                                            "value": "Let "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "fragmentGroupedFieldSet"
                                          },
                                          {
                                            "type": "Text",
                                            "value": " be the result of calling "
                                          },
                                          {
                                            "type": "Call",
                                            "name": "CollectFields",
                                            "args": [
                                              {
                                                "type": "Variable",
                                                "name": "objectType"
                                              },
                                              {
                                                "type": "Variable",
                                                "name": "fragmentSelectionSet"
                                              },
                                              {
                                                "type": "Variable",
                                                "name": "variableValues"
                                              },
                                              {
                                                "type": "Variable",
                                                "name": "visitedFragments"
                                              }
                                            ]
                                          },
                                          {
                                            "type": "Text",
                                            "value": "."
                                          }
                                        ]
                                      },
                                      {
                                        "type": "ListItem",
                                        "contents": [
                                          {
                                            "type": "Text",
                                            "value": "For each "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "fragmentGroup"
                                          },
                                          {
                                            "type": "Text",
                                            "value": " in "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "fragmentGroupedFieldSet"
                                          },
                                          {
                                            "type": "Text",
                                            "value": ":"
                                          },
                                          {
                                            "type": "List",
                                            "ordered": true,
                                            "items": [
                                              {
                                                "type": "ListItem",
                                                "contents": [
                                                  {
                                                    "type": "Text",
                                                    "value": "Let "
                                                  },
                                                  {
                                                    "type": "Variable",
                                                    "name": "responseKey"
                                                  },
                                                  {
                                                    "type": "Text",
                                                    "value": " be the response key shared by all fields in "
                                                  },
                                                  {
                                                    "type": "Variable",
                                                    "name": "fragmentGroup"
                                                  },
                                                  {
                                                    "type": "Text",
                                                    "value": "."
                                                  }
                                                ]
                                              },
                                              {
                                                "type": "ListItem",
                                                "contents": [
                                                  {
                                                    "type": "Text",
                                                    "value": "Let "
                                                  },
                                                  {
                                                    "type": "Variable",
                                                    "name": "groupForResponseKey"
                                                  },
                                                  {
                                                    "type": "Text",
                                                    "value": " be the list in "
                                                  },
                                                  {
                                                    "type": "Variable",
                                                    "name": "groupedFields"
                                                  },
                                                  {
                                                    "type": "Text",
                                                    "value": " for "
                                                  },
                                                  {
                                                    "type": "Variable",
                                                    "name": "responseKey"
                                                  },
                                                  {
                                                    "type": "Text",
                                                    "value": "; if no such list exists, create it as an empty list."
                                                  }
                                                ]
                                              },
                                              {
                                                "type": "ListItem",
                                                "contents": [
                                                  {
                                                    "type": "Text",
                                                    "value": "Append all items in "
                                                  },
                                                  {
                                                    "type": "Variable",
                                                    "name": "fragmentGroup"
                                                  },
                                                  {
                                                    "type": "Text",
                                                    "value": " to "
                                                  },
                                                  {
                                                    "type": "Variable",
                                                    "name": "groupForResponseKey"
                                                  },
                                                  {
                                                    "type": "Text",
                                                    "value": "."
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "type": "ListItem",
                                "contents": [
                                  {
                                    "type": "Text",
                                    "value": "If "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "selection"
                                  },
                                  {
                                    "type": "Text",
                                    "value": " is an "
                                  },
                                  {
                                    "type": "NonTerminal",
                                    "name": "InlineFragment",
                                    "params": null
                                  },
                                  {
                                    "type": "Text",
                                    "value": ":"
                                  },
                                  {
                                    "type": "List",
                                    "ordered": true,
                                    "items": [
                                      {
                                        "type": "ListItem",
                                        "contents": [
                                          {
                                            "type": "Text",
                                            "value": "Let "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "fragmentType"
                                          },
                                          {
                                            "type": "Text",
                                            "value": " be the type condition on "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "selection"
                                          },
                                          {
                                            "type": "Text",
                                            "value": "."
                                          }
                                        ]
                                      },
                                      {
                                        "type": "ListItem",
                                        "contents": [
                                          {
                                            "type": "Text",
                                            "value": "If "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "fragmentType"
                                          },
                                          {
                                            "type": "Text",
                                            "value": " is not "
                                          },
                                          {
                                            "type": "Keyword",
                                            "value": "null"
                                          },
                                          {
                                            "type": "Text",
                                            "value": " and "
                                          },
                                          {
                                            "type": "Call",
                                            "name": "DoesFragmentTypeApply",
                                            "args": [
                                              {
                                                "type": "Variable",
                                                "name": "objectType"
                                              },
                                              {
                                                "type": "Variable",
                                                "name": "fragmentType"
                                              }
                                            ]
                                          },
                                          {
                                            "type": "Text",
                                            "value": " is false, continue with the next "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "selection"
                                          },
                                          {
                                            "type": "Text",
                                            "value": " in "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "selectionSet"
                                          },
                                          {
                                            "type": "Text",
                                            "value": "."
                                          }
                                        ]
                                      },
                                      {
                                        "type": "ListItem",
                                        "contents": [
                                          {
                                            "type": "Text",
                                            "value": "Let "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "fragmentSelectionSet"
                                          },
                                          {
                                            "type": "Text",
                                            "value": " be the top-level selection set of "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "selection"
                                          },
                                          {
                                            "type": "Text",
                                            "value": "."
                                          }
                                        ]
                                      },
                                      {
                                        "type": "ListItem",
                                        "contents": [
                                          {
                                            "type": "Text",
                                            "value": "Let "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "fragmentGroupedFieldSet"
                                          },
                                          {
                                            "type": "Text",
                                            "value": " be the result of calling "
                                          },
                                          {
                                            "type": "Call",
                                            "name": "CollectFields",
                                            "args": [
                                              {
                                                "type": "Variable",
                                                "name": "objectType"
                                              },
                                              {
                                                "type": "Variable",
                                                "name": "fragmentSelectionSet"
                                              },
                                              {
                                                "type": "Variable",
                                                "name": "variableValues"
                                              },
                                              {
                                                "type": "Variable",
                                                "name": "visitedFragments"
                                              }
                                            ]
                                          },
                                          {
                                            "type": "Text",
                                            "value": "."
                                          }
                                        ]
                                      },
                                      {
                                        "type": "ListItem",
                                        "contents": [
                                          {
                                            "type": "Text",
                                            "value": "For each "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "fragmentGroup"
                                          },
                                          {
                                            "type": "Text",
                                            "value": " in "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "fragmentGroupedFieldSet"
                                          },
                                          {
                                            "type": "Text",
                                            "value": ":"
                                          },
                                          {
                                            "type": "List",
                                            "ordered": true,
                                            "items": [
                                              {
                                                "type": "ListItem",
                                                "contents": [
                                                  {
                                                    "type": "Text",
                                                    "value": "Let "
                                                  },
                                                  {
                                                    "type": "Variable",
                                                    "name": "responseKey"
                                                  },
                                                  {
                                                    "type": "Text",
                                                    "value": " be the response key shared by all fields in "
                                                  },
                                                  {
                                                    "type": "Variable",
                                                    "name": "fragmentGroup"
                                                  },
                                                  {
                                                    "type": "Text",
                                                    "value": "."
                                                  }
                                                ]
                                              },
                                              {
                                                "type": "ListItem",
                                                "contents": [
                                                  {
                                                    "type": "Text",
                                                    "value": "Let "
                                                  },
                                                  {
                                                    "type": "Variable",
                                                    "name": "groupForResponseKey"
                                                  },
                                                  {
                                                    "type": "Text",
                                                    "value": " be the list in "
                                                  },
                                                  {
                                                    "type": "Variable",
                                                    "name": "groupedFields"
                                                  },
                                                  {
                                                    "type": "Text",
                                                    "value": " for "
                                                  },
                                                  {
                                                    "type": "Variable",
                                                    "name": "responseKey"
                                                  },
                                                  {
                                                    "type": "Text",
                                                    "value": "; if no such list exists, create it as an empty list."
                                                  }
                                                ]
                                              },
                                              {
                                                "type": "ListItem",
                                                "contents": [
                                                  {
                                                    "type": "Text",
                                                    "value": "Append all items in "
                                                  },
                                                  {
                                                    "type": "Variable",
                                                    "name": "fragmentGroup"
                                                  },
                                                  {
                                                    "type": "Text",
                                                    "value": " to "
                                                  },
                                                  {
                                                    "type": "Variable",
                                                    "name": "groupForResponseKey"
                                                  },
                                                  {
                                                    "type": "Text",
                                                    "value": "."
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "type": "ListItem",
                        "contents": [
                          {
                            "type": "Text",
                            "value": "Return "
                          },
                          {
                            "type": "Variable",
                            "name": "groupedFields"
                          },
                          {
                            "type": "Text",
                            "value": "."
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "type": "Algorithm",
                  "call": {
                    "type": "Call",
                    "name": "DoesFragmentTypeApply",
                    "args": [
                      {
                        "type": "Variable",
                        "name": "objectType"
                      },
                      {
                        "type": "Variable",
                        "name": "fragmentType"
                      }
                    ]
                  },
                  "steps": {
                    "type": "List",
                    "ordered": true,
                    "items": [
                      {
                        "type": "ListItem",
                        "contents": [
                          {
                            "type": "Text",
                            "value": "If "
                          },
                          {
                            "type": "Variable",
                            "name": "fragmentType"
                          },
                          {
                            "type": "Text",
                            "value": " is an Object Type:"
                          },
                          {
                            "type": "List",
                            "ordered": true,
                            "items": [
                              {
                                "type": "ListItem",
                                "contents": [
                                  {
                                    "type": "Text",
                                    "value": "if "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "objectType"
                                  },
                                  {
                                    "type": "Text",
                                    "value": " and "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "fragmentType"
                                  },
                                  {
                                    "type": "Text",
                                    "value": " are the same type, return "
                                  },
                                  {
                                    "type": "Keyword",
                                    "value": "true"
                                  },
                                  {
                                    "type": "Text",
                                    "value": ", otherwise return "
                                  },
                                  {
                                    "type": "Keyword",
                                    "value": "false"
                                  },
                                  {
                                    "type": "Text",
                                    "value": "."
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "type": "ListItem",
                        "contents": [
                          {
                            "type": "Text",
                            "value": "If "
                          },
                          {
                            "type": "Variable",
                            "name": "fragmentType"
                          },
                          {
                            "type": "Text",
                            "value": " is an Interface Type:"
                          },
                          {
                            "type": "List",
                            "ordered": true,
                            "items": [
                              {
                                "type": "ListItem",
                                "contents": [
                                  {
                                    "type": "Text",
                                    "value": "if "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "objectType"
                                  },
                                  {
                                    "type": "Text",
                                    "value": " is an implementation of "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "fragmentType"
                                  },
                                  {
                                    "type": "Text",
                                    "value": ", return "
                                  },
                                  {
                                    "type": "Keyword",
                                    "value": "true"
                                  },
                                  {
                                    "type": "Text",
                                    "value": " otherwise return "
                                  },
                                  {
                                    "type": "Keyword",
                                    "value": "false"
                                  },
                                  {
                                    "type": "Text",
                                    "value": "."
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "type": "ListItem",
                        "contents": [
                          {
                            "type": "Text",
                            "value": "If "
                          },
                          {
                            "type": "Variable",
                            "name": "fragmentType"
                          },
                          {
                            "type": "Text",
                            "value": " is a Union:"
                          },
                          {
                            "type": "List",
                            "ordered": true,
                            "items": [
                              {
                                "type": "ListItem",
                                "contents": [
                                  {
                                    "type": "Text",
                                    "value": "if "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "objectType"
                                  },
                                  {
                                    "type": "Text",
                                    "value": " is a possible type of "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "fragmentType"
                                  },
                                  {
                                    "type": "Text",
                                    "value": ", return "
                                  },
                                  {
                                    "type": "Keyword",
                                    "value": "true"
                                  },
                                  {
                                    "type": "Text",
                                    "value": " otherwise return "
                                  },
                                  {
                                    "type": "Keyword",
                                    "value": "false"
                                  },
                                  {
                                    "type": "Text",
                                    "value": "."
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "type": "Note",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "The steps in "
                    },
                    {
                      "type": "Call",
                      "name": "CollectFields",
                      "args": []
                    },
                    {
                      "type": "Text",
                      "value": " evaluating the "
                    },
                    {
                      "type": "InlineCode",
                      "code": "@skip"
                    },
                    {
                      "type": "Text",
                      "value": " and "
                    },
                    {
                      "type": "InlineCode",
                      "code": "@include"
                    },
                    {
                      "type": "Text",
                      "value": " directives may be applied in either order since they apply commutatively."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Executing Fields"
          },
          "contents": [
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Each field requested in the grouped field set that is defined on the selected objectType will result in an entry in the response map. Field execution first coerces any provided argument values, then resolves a value for the field, and finally completes that value either by recursively executing another selection set or coercing a scalar value."
                }
              ]
            },
            {
              "type": "Algorithm",
              "call": {
                "type": "Call",
                "name": "ExecuteField",
                "args": [
                  {
                    "type": "Variable",
                    "name": "objectType"
                  },
                  {
                    "type": "Variable",
                    "name": "objectValue"
                  },
                  {
                    "type": "Variable",
                    "name": "fieldType"
                  },
                  {
                    "type": "Variable",
                    "name": "fields"
                  },
                  {
                    "type": "Variable",
                    "name": "variableValues"
                  }
                ]
              },
              "steps": {
                "type": "List",
                "ordered": true,
                "items": [
                  {
                    "type": "ListItem",
                    "contents": [
                      {
                        "type": "Text",
                        "value": "Let "
                      },
                      {
                        "type": "Variable",
                        "name": "field"
                      },
                      {
                        "type": "Text",
                        "value": " be the first entry in "
                      },
                      {
                        "type": "Variable",
                        "name": "fields"
                      },
                      {
                        "type": "Text",
                        "value": "."
                      }
                    ]
                  },
                  {
                    "type": "ListItem",
                    "contents": [
                      {
                        "type": "Text",
                        "value": "Let "
                      },
                      {
                        "type": "Variable",
                        "name": "fieldName"
                      },
                      {
                        "type": "Text",
                        "value": " be the field name of "
                      },
                      {
                        "type": "Variable",
                        "name": "field"
                      },
                      {
                        "type": "Text",
                        "value": "."
                      }
                    ]
                  },
                  {
                    "type": "ListItem",
                    "contents": [
                      {
                        "type": "Text",
                        "value": "Let "
                      },
                      {
                        "type": "Variable",
                        "name": "argumentValues"
                      },
                      {
                        "type": "Text",
                        "value": " be the result of "
                      },
                      {
                        "type": "Call",
                        "name": "CoerceArgumentValues",
                        "args": [
                          {
                            "type": "Variable",
                            "name": "objectType"
                          },
                          {
                            "type": "Variable",
                            "name": "field"
                          },
                          {
                            "type": "Variable",
                            "name": "variableValues"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "type": "ListItem",
                    "contents": [
                      {
                        "type": "Text",
                        "value": "Let "
                      },
                      {
                        "type": "Variable",
                        "name": "resolvedValue"
                      },
                      {
                        "type": "Text",
                        "value": " be "
                      },
                      {
                        "type": "Call",
                        "name": "ResolveFieldValue",
                        "args": [
                          {
                            "type": "Variable",
                            "name": "objectType"
                          },
                          {
                            "type": "Variable",
                            "name": "objectValue"
                          },
                          {
                            "type": "Variable",
                            "name": "fieldName"
                          },
                          {
                            "type": "Variable",
                            "name": "argumentValues"
                          }
                        ]
                      },
                      {
                        "type": "Text",
                        "value": "."
                      }
                    ]
                  },
                  {
                    "type": "ListItem",
                    "contents": [
                      {
                        "type": "Text",
                        "value": "Return the result of "
                      },
                      {
                        "type": "Call",
                        "name": "CompleteValue",
                        "args": [
                          {
                            "type": "Variable",
                            "name": "fieldType"
                          },
                          {
                            "type": "Variable",
                            "name": "fields"
                          },
                          {
                            "type": "Variable",
                            "name": "resolvedValue"
                          },
                          {
                            "type": "Variable",
                            "name": "variableValues"
                          }
                        ]
                      },
                      {
                        "type": "Text",
                        "value": "."
                      }
                    ]
                  }
                ]
              }
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Coercing Field Arguments"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Fields may include arguments which are provided to the underlying runtime in order to correctly produce a value. These arguments are defined by the field in the type system to have a specific input type."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "At each argument position in a query may be a literal "
                    },
                    {
                      "type": "NonTerminal",
                      "name": "Value",
                      "params": null
                    },
                    {
                      "type": "Text",
                      "value": ", or a "
                    },
                    {
                      "type": "NonTerminal",
                      "name": "Variable",
                      "params": null
                    },
                    {
                      "type": "Text",
                      "value": " to be provided at runtime."
                    }
                  ]
                },
                {
                  "type": "Algorithm",
                  "call": {
                    "type": "Call",
                    "name": "CoerceArgumentValues",
                    "args": [
                      {
                        "type": "Variable",
                        "name": "objectType"
                      },
                      {
                        "type": "Variable",
                        "name": "field"
                      },
                      {
                        "type": "Variable",
                        "name": "variableValues"
                      }
                    ]
                  },
                  "steps": {
                    "type": "List",
                    "ordered": true,
                    "items": [
                      {
                        "type": "ListItem",
                        "contents": [
                          {
                            "type": "Text",
                            "value": "Let "
                          },
                          {
                            "type": "Variable",
                            "name": "coercedValues"
                          },
                          {
                            "type": "Text",
                            "value": " be an empty unordered Map."
                          }
                        ]
                      },
                      {
                        "type": "ListItem",
                        "contents": [
                          {
                            "type": "Text",
                            "value": "Let "
                          },
                          {
                            "type": "Variable",
                            "name": "argumentValues"
                          },
                          {
                            "type": "Text",
                            "value": " be the argument values provided in "
                          },
                          {
                            "type": "Variable",
                            "name": "field"
                          },
                          {
                            "type": "Text",
                            "value": "."
                          }
                        ]
                      },
                      {
                        "type": "ListItem",
                        "contents": [
                          {
                            "type": "Text",
                            "value": "Let "
                          },
                          {
                            "type": "Variable",
                            "name": "fieldName"
                          },
                          {
                            "type": "Text",
                            "value": " be the name of "
                          },
                          {
                            "type": "Variable",
                            "name": "field"
                          },
                          {
                            "type": "Text",
                            "value": "."
                          }
                        ]
                      },
                      {
                        "type": "ListItem",
                        "contents": [
                          {
                            "type": "Text",
                            "value": "Let "
                          },
                          {
                            "type": "Variable",
                            "name": "argumentDefinitions"
                          },
                          {
                            "type": "Text",
                            "value": " be the arguments defined by "
                          },
                          {
                            "type": "Variable",
                            "name": "objectType"
                          },
                          {
                            "type": "Text",
                            "value": " for the field named "
                          },
                          {
                            "type": "Variable",
                            "name": "fieldName"
                          },
                          {
                            "type": "Text",
                            "value": "."
                          }
                        ]
                      },
                      {
                        "type": "ListItem",
                        "contents": [
                          {
                            "type": "Text",
                            "value": "For each "
                          },
                          {
                            "type": "Variable",
                            "name": "argumentDefinition"
                          },
                          {
                            "type": "Text",
                            "value": " in "
                          },
                          {
                            "type": "Variable",
                            "name": "argumentDefinitions"
                          },
                          {
                            "type": "Text",
                            "value": ":"
                          },
                          {
                            "type": "List",
                            "ordered": true,
                            "items": [
                              {
                                "type": "ListItem",
                                "contents": [
                                  {
                                    "type": "Text",
                                    "value": "Let "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "argumentName"
                                  },
                                  {
                                    "type": "Text",
                                    "value": " be the name of "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "argumentDefinition"
                                  },
                                  {
                                    "type": "Text",
                                    "value": "."
                                  }
                                ]
                              },
                              {
                                "type": "ListItem",
                                "contents": [
                                  {
                                    "type": "Text",
                                    "value": "Let "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "argumentType"
                                  },
                                  {
                                    "type": "Text",
                                    "value": " be the expected type of "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "argumentDefinition"
                                  },
                                  {
                                    "type": "Text",
                                    "value": "."
                                  }
                                ]
                              },
                              {
                                "type": "ListItem",
                                "contents": [
                                  {
                                    "type": "Text",
                                    "value": "Let "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "defaultValue"
                                  },
                                  {
                                    "type": "Text",
                                    "value": " be the default value for "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "argumentDefinition"
                                  },
                                  {
                                    "type": "Text",
                                    "value": "."
                                  }
                                ]
                              },
                              {
                                "type": "ListItem",
                                "contents": [
                                  {
                                    "type": "Text",
                                    "value": "Let "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "hasValue"
                                  },
                                  {
                                    "type": "Text",
                                    "value": " be "
                                  },
                                  {
                                    "type": "Keyword",
                                    "value": "true"
                                  },
                                  {
                                    "type": "Text",
                                    "value": " if "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "argumentValues"
                                  },
                                  {
                                    "type": "Text",
                                    "value": " provides a value for the name "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "argumentName"
                                  },
                                  {
                                    "type": "Text",
                                    "value": "."
                                  }
                                ]
                              },
                              {
                                "type": "ListItem",
                                "contents": [
                                  {
                                    "type": "Text",
                                    "value": "Let "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "argumentValue"
                                  },
                                  {
                                    "type": "Text",
                                    "value": " be the value provided in "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "argumentValues"
                                  },
                                  {
                                    "type": "Text",
                                    "value": " for the name "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "argumentName"
                                  },
                                  {
                                    "type": "Text",
                                    "value": "."
                                  }
                                ]
                              },
                              {
                                "type": "ListItem",
                                "contents": [
                                  {
                                    "type": "Text",
                                    "value": "If "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "argumentValue"
                                  },
                                  {
                                    "type": "Text",
                                    "value": " is a "
                                  },
                                  {
                                    "type": "NonTerminal",
                                    "name": "Variable",
                                    "params": null
                                  },
                                  {
                                    "type": "Text",
                                    "value": ":"
                                  },
                                  {
                                    "type": "List",
                                    "ordered": true,
                                    "items": [
                                      {
                                        "type": "ListItem",
                                        "contents": [
                                          {
                                            "type": "Text",
                                            "value": "Let "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "variableName"
                                          },
                                          {
                                            "type": "Text",
                                            "value": " be the name of "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "argumentValue"
                                          },
                                          {
                                            "type": "Text",
                                            "value": "."
                                          }
                                        ]
                                      },
                                      {
                                        "type": "ListItem",
                                        "contents": [
                                          {
                                            "type": "Text",
                                            "value": "Let "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "hasValue"
                                          },
                                          {
                                            "type": "Text",
                                            "value": " be "
                                          },
                                          {
                                            "type": "Keyword",
                                            "value": "true"
                                          },
                                          {
                                            "type": "Text",
                                            "value": " if "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "variableValues"
                                          },
                                          {
                                            "type": "Text",
                                            "value": " provides a value for the name "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "variableName"
                                          },
                                          {
                                            "type": "Text",
                                            "value": "."
                                          }
                                        ]
                                      },
                                      {
                                        "type": "ListItem",
                                        "contents": [
                                          {
                                            "type": "Text",
                                            "value": "Let "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "value"
                                          },
                                          {
                                            "type": "Text",
                                            "value": " be the value provided in "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "variableValues"
                                          },
                                          {
                                            "type": "Text",
                                            "value": " for the name "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "variableName"
                                          },
                                          {
                                            "type": "Text",
                                            "value": "."
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "type": "ListItem",
                                "contents": [
                                  {
                                    "type": "Text",
                                    "value": "Otherwise, let "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "value"
                                  },
                                  {
                                    "type": "Text",
                                    "value": " be "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "argumentValue"
                                  },
                                  {
                                    "type": "Text",
                                    "value": "."
                                  }
                                ]
                              },
                              {
                                "type": "ListItem",
                                "contents": [
                                  {
                                    "type": "Text",
                                    "value": "If "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "hasValue"
                                  },
                                  {
                                    "type": "Text",
                                    "value": " is not "
                                  },
                                  {
                                    "type": "Keyword",
                                    "value": "true"
                                  },
                                  {
                                    "type": "Text",
                                    "value": " and "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "defaultValue"
                                  },
                                  {
                                    "type": "Text",
                                    "value": " exists (including "
                                  },
                                  {
                                    "type": "Keyword",
                                    "value": "null"
                                  },
                                  {
                                    "type": "Text",
                                    "value": "):"
                                  },
                                  {
                                    "type": "List",
                                    "ordered": true,
                                    "items": [
                                      {
                                        "type": "ListItem",
                                        "contents": [
                                          {
                                            "type": "Text",
                                            "value": "Add an entry to "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "coercedValues"
                                          },
                                          {
                                            "type": "Text",
                                            "value": " named "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "argumentName"
                                          },
                                          {
                                            "type": "Text",
                                            "value": " with the value "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "defaultValue"
                                          },
                                          {
                                            "type": "Text",
                                            "value": "."
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "type": "ListItem",
                                "contents": [
                                  {
                                    "type": "Text",
                                    "value": "Otherwise if "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "argumentType"
                                  },
                                  {
                                    "type": "Text",
                                    "value": " is a Non-Nullable type, and either "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "hasValue"
                                  },
                                  {
                                    "type": "Text",
                                    "value": " is not "
                                  },
                                  {
                                    "type": "Keyword",
                                    "value": "true"
                                  },
                                  {
                                    "type": "Text",
                                    "value": " or "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "value"
                                  },
                                  {
                                    "type": "Text",
                                    "value": " is "
                                  },
                                  {
                                    "type": "Keyword",
                                    "value": "null"
                                  },
                                  {
                                    "type": "Text",
                                    "value": ", throw a field error."
                                  }
                                ]
                              },
                              {
                                "type": "ListItem",
                                "contents": [
                                  {
                                    "type": "Text",
                                    "value": "Otherwise if "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "hasValue"
                                  },
                                  {
                                    "type": "Text",
                                    "value": " is true:"
                                  },
                                  {
                                    "type": "List",
                                    "ordered": true,
                                    "items": [
                                      {
                                        "type": "ListItem",
                                        "contents": [
                                          {
                                            "type": "Text",
                                            "value": "If "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "value"
                                          },
                                          {
                                            "type": "Text",
                                            "value": " is "
                                          },
                                          {
                                            "type": "Keyword",
                                            "value": "null"
                                          },
                                          {
                                            "type": "Text",
                                            "value": ":"
                                          },
                                          {
                                            "type": "List",
                                            "ordered": true,
                                            "items": [
                                              {
                                                "type": "ListItem",
                                                "contents": [
                                                  {
                                                    "type": "Text",
                                                    "value": "Add an entry to "
                                                  },
                                                  {
                                                    "type": "Variable",
                                                    "name": "coercedValues"
                                                  },
                                                  {
                                                    "type": "Text",
                                                    "value": " named "
                                                  },
                                                  {
                                                    "type": "Variable",
                                                    "name": "argumentName"
                                                  },
                                                  {
                                                    "type": "Text",
                                                    "value": " with the value "
                                                  },
                                                  {
                                                    "type": "Keyword",
                                                    "value": "null"
                                                  },
                                                  {
                                                    "type": "Text",
                                                    "value": "."
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "type": "ListItem",
                                        "contents": [
                                          {
                                            "type": "Text",
                                            "value": "Otherwise, if "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "argumentValue"
                                          },
                                          {
                                            "type": "Text",
                                            "value": " is a "
                                          },
                                          {
                                            "type": "NonTerminal",
                                            "name": "Variable",
                                            "params": null
                                          },
                                          {
                                            "type": "Text",
                                            "value": ":"
                                          },
                                          {
                                            "type": "List",
                                            "ordered": true,
                                            "items": [
                                              {
                                                "type": "ListItem",
                                                "contents": [
                                                  {
                                                    "type": "Text",
                                                    "value": "Add an entry to "
                                                  },
                                                  {
                                                    "type": "Variable",
                                                    "name": "coercedValues"
                                                  },
                                                  {
                                                    "type": "Text",
                                                    "value": " named "
                                                  },
                                                  {
                                                    "type": "Variable",
                                                    "name": "argumentName"
                                                  },
                                                  {
                                                    "type": "Text",
                                                    "value": " with the value "
                                                  },
                                                  {
                                                    "type": "Variable",
                                                    "name": "value"
                                                  },
                                                  {
                                                    "type": "Text",
                                                    "value": "."
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "type": "ListItem",
                                        "contents": [
                                          {
                                            "type": "Text",
                                            "value": "Otherwise:"
                                          },
                                          {
                                            "type": "List",
                                            "ordered": true,
                                            "items": [
                                              {
                                                "type": "ListItem",
                                                "contents": [
                                                  {
                                                    "type": "Text",
                                                    "value": "If "
                                                  },
                                                  {
                                                    "type": "Variable",
                                                    "name": "value"
                                                  },
                                                  {
                                                    "type": "Text",
                                                    "value": " cannot be coerced according to the input coercion rules of "
                                                  },
                                                  {
                                                    "type": "Variable",
                                                    "name": "argumentType"
                                                  },
                                                  {
                                                    "type": "Text",
                                                    "value": ", throw a field error."
                                                  }
                                                ]
                                              },
                                              {
                                                "type": "ListItem",
                                                "contents": [
                                                  {
                                                    "type": "Text",
                                                    "value": "Let "
                                                  },
                                                  {
                                                    "type": "Variable",
                                                    "name": "coercedValue"
                                                  },
                                                  {
                                                    "type": "Text",
                                                    "value": " be the result of coercing "
                                                  },
                                                  {
                                                    "type": "Variable",
                                                    "name": "value"
                                                  },
                                                  {
                                                    "type": "Text",
                                                    "value": " according to the input coercion rules of "
                                                  },
                                                  {
                                                    "type": "Variable",
                                                    "name": "argumentType"
                                                  },
                                                  {
                                                    "type": "Text",
                                                    "value": "."
                                                  }
                                                ]
                                              },
                                              {
                                                "type": "ListItem",
                                                "contents": [
                                                  {
                                                    "type": "Text",
                                                    "value": "Add an entry to "
                                                  },
                                                  {
                                                    "type": "Variable",
                                                    "name": "coercedValues"
                                                  },
                                                  {
                                                    "type": "Text",
                                                    "value": " named "
                                                  },
                                                  {
                                                    "type": "Variable",
                                                    "name": "argumentName"
                                                  },
                                                  {
                                                    "type": "Text",
                                                    "value": " with the value "
                                                  },
                                                  {
                                                    "type": "Variable",
                                                    "name": "coercedValue"
                                                  },
                                                  {
                                                    "type": "Text",
                                                    "value": "."
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "type": "ListItem",
                        "contents": [
                          {
                            "type": "Text",
                            "value": "Return "
                          },
                          {
                            "type": "Variable",
                            "name": "coercedValues"
                          },
                          {
                            "type": "Text",
                            "value": "."
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "type": "Note",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Variable values are not coerced because they are expected to be coerced before executing the operation in "
                    },
                    {
                      "type": "Call",
                      "name": "CoerceVariableValues",
                      "args": []
                    },
                    {
                      "type": "Text",
                      "value": ", and valid queries must only allow usage of variables of appropriate types."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Value Resolution"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "While nearly all of GraphQL execution can be described generically, ultimately the internal system exposing the GraphQL interface must provide values. This is exposed via "
                    },
                    {
                      "type": "NonTerminal",
                      "name": "ResolveFieldValue",
                      "params": null
                    },
                    {
                      "type": "Text",
                      "value": ", which produces a value for a given field on a type for a real value."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "As an example, this might accept the "
                    },
                    {
                      "type": "Variable",
                      "name": "objectType"
                    },
                    {
                      "type": "Text",
                      "value": " "
                    },
                    {
                      "type": "InlineCode",
                      "code": "Person"
                    },
                    {
                      "type": "Text",
                      "value": ", the "
                    },
                    {
                      "type": "Variable",
                      "name": "field"
                    },
                    {
                      "type": "Text",
                      "value": " "
                    },
                    {
                      "type": "StringLiteral",
                      "value": "\"soulMate\""
                    },
                    {
                      "type": "Text",
                      "value": ", and the "
                    },
                    {
                      "type": "Variable",
                      "name": "objectValue"
                    },
                    {
                      "type": "Text",
                      "value": " representing John Lennon. It would be expected to yield the value representing Yoko Ono."
                    }
                  ]
                },
                {
                  "type": "Algorithm",
                  "call": {
                    "type": "Call",
                    "name": "ResolveFieldValue",
                    "args": [
                      {
                        "type": "Variable",
                        "name": "objectType"
                      },
                      {
                        "type": "Variable",
                        "name": "objectValue"
                      },
                      {
                        "type": "Variable",
                        "name": "fieldName"
                      },
                      {
                        "type": "Variable",
                        "name": "argumentValues"
                      }
                    ]
                  },
                  "steps": {
                    "type": "List",
                    "ordered": true,
                    "items": [
                      {
                        "type": "ListItem",
                        "contents": [
                          {
                            "type": "Text",
                            "value": "Let "
                          },
                          {
                            "type": "Variable",
                            "name": "resolver"
                          },
                          {
                            "type": "Text",
                            "value": " be the internal function provided by "
                          },
                          {
                            "type": "Variable",
                            "name": "objectType"
                          },
                          {
                            "type": "Text",
                            "value": " for determining the resolved value of a field named "
                          },
                          {
                            "type": "Variable",
                            "name": "fieldName"
                          },
                          {
                            "type": "Text",
                            "value": "."
                          }
                        ]
                      },
                      {
                        "type": "ListItem",
                        "contents": [
                          {
                            "type": "Text",
                            "value": "Return the result of calling "
                          },
                          {
                            "type": "Variable",
                            "name": "resolver"
                          },
                          {
                            "type": "Text",
                            "value": ", providing "
                          },
                          {
                            "type": "Variable",
                            "name": "objectValue"
                          },
                          {
                            "type": "Text",
                            "value": " and "
                          },
                          {
                            "type": "Variable",
                            "name": "argumentValues"
                          },
                          {
                            "type": "Text",
                            "value": "."
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "type": "Note",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "It is common for "
                    },
                    {
                      "type": "Variable",
                      "name": "resolver"
                    },
                    {
                      "type": "Text",
                      "value": " to be asynchronous due to relying on reading an underlying database or networked service to produce a value. This necessitates the rest of a GraphQL executor to handle an asynchronous execution flow."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Value Completion"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "After resolving the value for a field, it is completed by ensuring it adheres to the expected return type. If the return type is another Object type, then the field execution process continues recursively."
                    }
                  ]
                },
                {
                  "type": "Algorithm",
                  "call": {
                    "type": "Call",
                    "name": "CompleteValue",
                    "args": [
                      {
                        "type": "Variable",
                        "name": "fieldType"
                      },
                      {
                        "type": "Variable",
                        "name": "fields"
                      },
                      {
                        "type": "Variable",
                        "name": "result"
                      },
                      {
                        "type": "Variable",
                        "name": "variableValues"
                      }
                    ]
                  },
                  "steps": {
                    "type": "List",
                    "ordered": true,
                    "items": [
                      {
                        "type": "ListItem",
                        "contents": [
                          {
                            "type": "Text",
                            "value": "If the "
                          },
                          {
                            "type": "Variable",
                            "name": "fieldType"
                          },
                          {
                            "type": "Text",
                            "value": " is a Non-Null type:"
                          },
                          {
                            "type": "List",
                            "ordered": true,
                            "items": [
                              {
                                "type": "ListItem",
                                "contents": [
                                  {
                                    "type": "Text",
                                    "value": "Let "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "innerType"
                                  },
                                  {
                                    "type": "Text",
                                    "value": " be the inner type of "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "fieldType"
                                  },
                                  {
                                    "type": "Text",
                                    "value": "."
                                  }
                                ]
                              },
                              {
                                "type": "ListItem",
                                "contents": [
                                  {
                                    "type": "Text",
                                    "value": "Let "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "completedResult"
                                  },
                                  {
                                    "type": "Text",
                                    "value": " be the result of calling "
                                  },
                                  {
                                    "type": "Call",
                                    "name": "CompleteValue",
                                    "args": [
                                      {
                                        "type": "Variable",
                                        "name": "innerType"
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "fields"
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "result"
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "variableValues"
                                      }
                                    ]
                                  },
                                  {
                                    "type": "Text",
                                    "value": "."
                                  }
                                ]
                              },
                              {
                                "type": "ListItem",
                                "contents": [
                                  {
                                    "type": "Text",
                                    "value": "If "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "completedResult"
                                  },
                                  {
                                    "type": "Text",
                                    "value": " is "
                                  },
                                  {
                                    "type": "Keyword",
                                    "value": "null"
                                  },
                                  {
                                    "type": "Text",
                                    "value": ", throw a field error."
                                  }
                                ]
                              },
                              {
                                "type": "ListItem",
                                "contents": [
                                  {
                                    "type": "Text",
                                    "value": "Return "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "completedResult"
                                  },
                                  {
                                    "type": "Text",
                                    "value": "."
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "type": "ListItem",
                        "contents": [
                          {
                            "type": "Text",
                            "value": "If "
                          },
                          {
                            "type": "Variable",
                            "name": "result"
                          },
                          {
                            "type": "Text",
                            "value": " is "
                          },
                          {
                            "type": "Keyword",
                            "value": "null"
                          },
                          {
                            "type": "Text",
                            "value": " (or another internal value similar to "
                          },
                          {
                            "type": "Keyword",
                            "value": "null"
                          },
                          {
                            "type": "Text",
                            "value": " such as "
                          },
                          {
                            "type": "Keyword",
                            "value": "undefined"
                          },
                          {
                            "type": "Text",
                            "value": " or "
                          },
                          {
                            "type": "NonTerminal",
                            "name": "NaN",
                            "params": null
                          },
                          {
                            "type": "Text",
                            "value": "), return "
                          },
                          {
                            "type": "Keyword",
                            "value": "null"
                          },
                          {
                            "type": "Text",
                            "value": "."
                          }
                        ]
                      },
                      {
                        "type": "ListItem",
                        "contents": [
                          {
                            "type": "Text",
                            "value": "If "
                          },
                          {
                            "type": "Variable",
                            "name": "fieldType"
                          },
                          {
                            "type": "Text",
                            "value": " is a List type:"
                          },
                          {
                            "type": "List",
                            "ordered": true,
                            "items": [
                              {
                                "type": "ListItem",
                                "contents": [
                                  {
                                    "type": "Text",
                                    "value": "If "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "result"
                                  },
                                  {
                                    "type": "Text",
                                    "value": " is not a collection of values, throw a field error."
                                  }
                                ]
                              },
                              {
                                "type": "ListItem",
                                "contents": [
                                  {
                                    "type": "Text",
                                    "value": "Let "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "innerType"
                                  },
                                  {
                                    "type": "Text",
                                    "value": " be the inner type of "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "fieldType"
                                  },
                                  {
                                    "type": "Text",
                                    "value": "."
                                  }
                                ]
                              },
                              {
                                "type": "ListItem",
                                "contents": [
                                  {
                                    "type": "Text",
                                    "value": "Return a list where each list item is the result of calling "
                                  },
                                  {
                                    "type": "Call",
                                    "name": "CompleteValue",
                                    "args": [
                                      {
                                        "type": "Variable",
                                        "name": "innerType"
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "fields"
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "resultItem"
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "variableValues"
                                      }
                                    ]
                                  },
                                  {
                                    "type": "Text",
                                    "value": ", where "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "resultItem"
                                  },
                                  {
                                    "type": "Text",
                                    "value": " is each item in "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "result"
                                  },
                                  {
                                    "type": "Text",
                                    "value": "."
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "type": "ListItem",
                        "contents": [
                          {
                            "type": "Text",
                            "value": "If "
                          },
                          {
                            "type": "Variable",
                            "name": "fieldType"
                          },
                          {
                            "type": "Text",
                            "value": " is a Scalar or Enum type:"
                          },
                          {
                            "type": "List",
                            "ordered": true,
                            "items": [
                              {
                                "type": "ListItem",
                                "contents": [
                                  {
                                    "type": "Text",
                                    "value": "Return the result of “coercing” "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "result"
                                  },
                                  {
                                    "type": "Text",
                                    "value": ", ensuring it is a legal value of "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "fieldType"
                                  },
                                  {
                                    "type": "Text",
                                    "value": ", otherwise "
                                  },
                                  {
                                    "type": "Keyword",
                                    "value": "null"
                                  },
                                  {
                                    "type": "Text",
                                    "value": "."
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "type": "ListItem",
                        "contents": [
                          {
                            "type": "Text",
                            "value": "If "
                          },
                          {
                            "type": "Variable",
                            "name": "fieldType"
                          },
                          {
                            "type": "Text",
                            "value": " is an Object, Interface, or Union type:"
                          },
                          {
                            "type": "List",
                            "ordered": true,
                            "items": [
                              {
                                "type": "ListItem",
                                "contents": [
                                  {
                                    "type": "Text",
                                    "value": "If "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "fieldType"
                                  },
                                  {
                                    "type": "Text",
                                    "value": " is an Object type."
                                  },
                                  {
                                    "type": "List",
                                    "ordered": true,
                                    "items": [
                                      {
                                        "type": "ListItem",
                                        "contents": [
                                          {
                                            "type": "Text",
                                            "value": "Let "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "objectType"
                                          },
                                          {
                                            "type": "Text",
                                            "value": " be "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "fieldType"
                                          },
                                          {
                                            "type": "Text",
                                            "value": "."
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "type": "ListItem",
                                "contents": [
                                  {
                                    "type": "Text",
                                    "value": "Otherwise if "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "fieldType"
                                  },
                                  {
                                    "type": "Text",
                                    "value": " is an Interface or Union type."
                                  },
                                  {
                                    "type": "List",
                                    "ordered": true,
                                    "items": [
                                      {
                                        "type": "ListItem",
                                        "contents": [
                                          {
                                            "type": "Text",
                                            "value": "Let "
                                          },
                                          {
                                            "type": "Variable",
                                            "name": "objectType"
                                          },
                                          {
                                            "type": "Text",
                                            "value": " be "
                                          },
                                          {
                                            "type": "Call",
                                            "name": "ResolveAbstractType",
                                            "args": [
                                              {
                                                "type": "Variable",
                                                "name": "fieldType"
                                              },
                                              {
                                                "type": "Variable",
                                                "name": "result"
                                              }
                                            ]
                                          },
                                          {
                                            "type": "Text",
                                            "value": "."
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "type": "ListItem",
                                "contents": [
                                  {
                                    "type": "Text",
                                    "value": "Let "
                                  },
                                  {
                                    "type": "Variable",
                                    "name": "subSelectionSet"
                                  },
                                  {
                                    "type": "Text",
                                    "value": " be the result of calling "
                                  },
                                  {
                                    "type": "Call",
                                    "name": "MergeSelectionSets",
                                    "args": [
                                      {
                                        "type": "Variable",
                                        "name": "fields"
                                      }
                                    ]
                                  },
                                  {
                                    "type": "Text",
                                    "value": "."
                                  }
                                ]
                              },
                              {
                                "type": "ListItem",
                                "contents": [
                                  {
                                    "type": "Text",
                                    "value": "Return the result of evaluating "
                                  },
                                  {
                                    "type": "Call",
                                    "name": "ExecuteSelectionSet",
                                    "args": [
                                      {
                                        "type": "Variable",
                                        "name": "subSelectionSet"
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "objectType"
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "result"
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "variableValues"
                                      }
                                    ]
                                  },
                                  {
                                    "type": "Text",
                                    "value": " "
                                  },
                                  {
                                    "type": "Italic",
                                    "contents": [
                                      {
                                        "type": "Text",
                                        "value": "normally"
                                      }
                                    ]
                                  },
                                  {
                                    "type": "Text",
                                    "value": " (allowing for parallelization)."
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "type": "Subsection",
                  "header": {
                    "type": "Subheader",
                    "title": "Resolving Abstract Types"
                  },
                  "contents": [
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "When completing a field with an abstract return type, that is an Interface or Union return type, first the abstract type must be resolved to a relevant Object type. This determination is made by the internal system using whatever means appropriate."
                        }
                      ]
                    },
                    {
                      "type": "Note",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "A common method of determining the Object type for an "
                        },
                        {
                          "type": "Variable",
                          "name": "objectValue"
                        },
                        {
                          "type": "Text",
                          "value": " in object-oriented environments, such as Java or C#, is to use the class name of the "
                        },
                        {
                          "type": "Variable",
                          "name": "objectValue"
                        },
                        {
                          "type": "Text",
                          "value": "."
                        }
                      ]
                    },
                    {
                      "type": "Algorithm",
                      "call": {
                        "type": "Call",
                        "name": "ResolveAbstractType",
                        "args": [
                          {
                            "type": "Variable",
                            "name": "abstractType"
                          },
                          {
                            "type": "Variable",
                            "name": "objectValue"
                          }
                        ]
                      },
                      "steps": {
                        "type": "List",
                        "ordered": true,
                        "items": [
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "Return the result of calling the internal method provided by the type system for determining the Object type of "
                              },
                              {
                                "type": "Variable",
                                "name": "abstractType"
                              },
                              {
                                "type": "Text",
                                "value": " given the value "
                              },
                              {
                                "type": "Variable",
                                "name": "objectValue"
                              },
                              {
                                "type": "Text",
                                "value": "."
                              }
                            ]
                          }
                        ]
                      }
                    }
                  ]
                },
                {
                  "type": "Subsection",
                  "header": {
                    "type": "Subheader",
                    "title": "Merging Selection Sets"
                  },
                  "contents": [
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "When more than one field of the same name is executed in parallel, their selection sets are merged together when completing the value in order to continue execution of the sub-selection sets."
                        }
                      ]
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "An example query illustrating parallel fields with the same name with sub-selections."
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": "graphql",
                      "example": true,
                      "counter": false,
                      "code": "{\n  me {\n    firstName\n  }\n  me {\n    lastName\n  }\n}\n"
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "After resolving the value for "
                        },
                        {
                          "type": "InlineCode",
                          "code": "me"
                        },
                        {
                          "type": "Text",
                          "value": ", the selection sets are merged together so "
                        },
                        {
                          "type": "InlineCode",
                          "code": "firstName"
                        },
                        {
                          "type": "Text",
                          "value": " and "
                        },
                        {
                          "type": "InlineCode",
                          "code": "lastName"
                        },
                        {
                          "type": "Text",
                          "value": " can be resolved for one value."
                        }
                      ]
                    },
                    {
                      "type": "Algorithm",
                      "call": {
                        "type": "Call",
                        "name": "MergeSelectionSets",
                        "args": [
                          {
                            "type": "Variable",
                            "name": "fields"
                          }
                        ]
                      },
                      "steps": {
                        "type": "List",
                        "ordered": true,
                        "items": [
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "Let "
                              },
                              {
                                "type": "Variable",
                                "name": "selectionSet"
                              },
                              {
                                "type": "Text",
                                "value": " be an empty list."
                              }
                            ]
                          },
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "For each "
                              },
                              {
                                "type": "Variable",
                                "name": "field"
                              },
                              {
                                "type": "Text",
                                "value": " in "
                              },
                              {
                                "type": "Variable",
                                "name": "fields"
                              },
                              {
                                "type": "Text",
                                "value": ":"
                              },
                              {
                                "type": "List",
                                "ordered": true,
                                "items": [
                                  {
                                    "type": "ListItem",
                                    "contents": [
                                      {
                                        "type": "Text",
                                        "value": "Let "
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "fieldSelectionSet"
                                      },
                                      {
                                        "type": "Text",
                                        "value": " be the selection set of "
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "field"
                                      },
                                      {
                                        "type": "Text",
                                        "value": "."
                                      }
                                    ]
                                  },
                                  {
                                    "type": "ListItem",
                                    "contents": [
                                      {
                                        "type": "Text",
                                        "value": "If "
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "fieldSelectionSet"
                                      },
                                      {
                                        "type": "Text",
                                        "value": " is null or empty, continue to the next field."
                                      }
                                    ]
                                  },
                                  {
                                    "type": "ListItem",
                                    "contents": [
                                      {
                                        "type": "Text",
                                        "value": "Append all selections in "
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "fieldSelectionSet"
                                      },
                                      {
                                        "type": "Text",
                                        "value": " to "
                                      },
                                      {
                                        "type": "Variable",
                                        "name": "selectionSet"
                                      },
                                      {
                                        "type": "Text",
                                        "value": "."
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "Return "
                              },
                              {
                                "type": "Variable",
                                "name": "selectionSet"
                              },
                              {
                                "type": "Text",
                                "value": "."
                              }
                            ]
                          }
                        ]
                      }
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Errors and Non-Nullability"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "If an error is thrown while resolving a field, it should be treated as though the field returned "
                    },
                    {
                      "type": "Keyword",
                      "value": "null"
                    },
                    {
                      "type": "Text",
                      "value": ", and an error must be added to the "
                    },
                    {
                      "type": "StringLiteral",
                      "value": "\"errors\""
                    },
                    {
                      "type": "Text",
                      "value": " list in the response."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "If the result of resolving a field is "
                    },
                    {
                      "type": "Keyword",
                      "value": "null"
                    },
                    {
                      "type": "Text",
                      "value": " (either because the function to resolve the field returned "
                    },
                    {
                      "type": "Keyword",
                      "value": "null"
                    },
                    {
                      "type": "Text",
                      "value": " or because an error occurred), and that field is of a "
                    },
                    {
                      "type": "InlineCode",
                      "code": "Non-Null"
                    },
                    {
                      "type": "Text",
                      "value": " type, then a field error is thrown. The error must be added to the "
                    },
                    {
                      "type": "StringLiteral",
                      "value": "\"errors\""
                    },
                    {
                      "type": "Text",
                      "value": " list in the response."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "If the field returns "
                    },
                    {
                      "type": "Keyword",
                      "value": "null"
                    },
                    {
                      "type": "Text",
                      "value": " because of an error which has already been added to the "
                    },
                    {
                      "type": "StringLiteral",
                      "value": "\"errors\""
                    },
                    {
                      "type": "Text",
                      "value": " list in the response, the "
                    },
                    {
                      "type": "StringLiteral",
                      "value": "\"errors\""
                    },
                    {
                      "type": "Text",
                      "value": " list must not be further affected. That is, only one error should be added to the errors list per field."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Since "
                    },
                    {
                      "type": "InlineCode",
                      "code": "Non-Null"
                    },
                    {
                      "type": "Text",
                      "value": " type fields cannot be "
                    },
                    {
                      "type": "Keyword",
                      "value": "null"
                    },
                    {
                      "type": "Text",
                      "value": ", field errors are propagated to be handled by the parent field. If the parent field may be "
                    },
                    {
                      "type": "Keyword",
                      "value": "null"
                    },
                    {
                      "type": "Text",
                      "value": " then it resolves to "
                    },
                    {
                      "type": "Keyword",
                      "value": "null"
                    },
                    {
                      "type": "Text",
                      "value": ", otherwise if it is a "
                    },
                    {
                      "type": "InlineCode",
                      "code": "Non-Null"
                    },
                    {
                      "type": "Text",
                      "value": " type, the field error is further propagated to it’s parent field."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "If a "
                    },
                    {
                      "type": "InlineCode",
                      "code": "List"
                    },
                    {
                      "type": "Text",
                      "value": " type wraps a "
                    },
                    {
                      "type": "InlineCode",
                      "code": "Non-Null"
                    },
                    {
                      "type": "Text",
                      "value": " type, and one of the elements of that list resolves to "
                    },
                    {
                      "type": "Keyword",
                      "value": "null"
                    },
                    {
                      "type": "Text",
                      "value": ", then the entire list must resolve to "
                    },
                    {
                      "type": "Keyword",
                      "value": "null"
                    },
                    {
                      "type": "Text",
                      "value": ". If the "
                    },
                    {
                      "type": "InlineCode",
                      "code": "List"
                    },
                    {
                      "type": "Text",
                      "value": " type is also wrapped in a "
                    },
                    {
                      "type": "InlineCode",
                      "code": "Non-Null"
                    },
                    {
                      "type": "Text",
                      "value": ", the field error continues to propagate upwards."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "If all fields from the root of the request to the source of the field error return "
                    },
                    {
                      "type": "InlineCode",
                      "code": "Non-Null"
                    },
                    {
                      "type": "Text",
                      "value": " types, then the "
                    },
                    {
                      "type": "StringLiteral",
                      "value": "\"data\""
                    },
                    {
                      "type": "Text",
                      "value": " entry in the response should be "
                    },
                    {
                      "type": "Keyword",
                      "value": "null"
                    },
                    {
                      "type": "Text",
                      "value": ". "
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "Section",
      "header": {
        "type": "Header",
        "level": 1,
        "secID": null,
        "title": "Response"
      },
      "contents": [
        {
          "type": "Paragraph",
          "contents": [
            {
              "type": "Text",
              "value": "When a GraphQL service receives a request, it must return a well-formed response. The service’s response describes the result of executing the requested operation if successful, and describes any errors encountered during the request."
            }
          ]
        },
        {
          "type": "Paragraph",
          "contents": [
            {
              "type": "Text",
              "value": "A response may contain both a partial response as well as encountered errors in the case that a field error occurred on a field which was replaced with "
            },
            {
              "type": "Keyword",
              "value": "null"
            },
            {
              "type": "Text",
              "value": "."
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Response Format"
          },
          "contents": [
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "A response to a GraphQL operation must be a map."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "If the operation encountered any errors, the response map must contain an entry with key "
                },
                {
                  "type": "InlineCode",
                  "code": "errors"
                },
                {
                  "type": "Text",
                  "value": ". The value of this entry is described in the “Errors” section. If the operation completed without encountering any errors, this entry must not be present."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "If the operation included execution, the response map must contain an entry with key "
                },
                {
                  "type": "InlineCode",
                  "code": "data"
                },
                {
                  "type": "Text",
                  "value": ". The value of this entry is described in the “Data” section. If the operation failed before execution, due to a syntax error, missing information, or validation error, this entry must not be present."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "The response map may also contain an entry with key "
                },
                {
                  "type": "InlineCode",
                  "code": "extensions"
                },
                {
                  "type": "Text",
                  "value": ". This entry, if set, must have a map as its value. This entry is reserved for implementors to extend the protocol however they see fit, and hence there are no additional restrictions on its contents."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "To ensure future changes to the protocol do not break existing services and clients, the top level response map must not contain any entries other than the three described above."
                }
              ]
            },
            {
              "type": "Note",
              "contents": [
                {
                  "type": "Text",
                  "value": "When "
                },
                {
                  "type": "InlineCode",
                  "code": "errors"
                },
                {
                  "type": "Text",
                  "value": " is present in the response, it may be helpful for it to appear first when serialized to make it more clear when errors are present in a response during debugging."
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Data"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "The "
                    },
                    {
                      "type": "InlineCode",
                      "code": "data"
                    },
                    {
                      "type": "Text",
                      "value": " entry in the response will be the result of the execution of the requested operation. If the operation was a query, this output will be an object of the schema’s query root type; if the operation was a mutation, this output will be an object of the schema’s mutation root type."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "If an error was encountered before execution begins, the "
                    },
                    {
                      "type": "InlineCode",
                      "code": "data"
                    },
                    {
                      "type": "Text",
                      "value": " entry should not be present in the result."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "If an error was encountered during the execution that prevented a valid response, the "
                    },
                    {
                      "type": "InlineCode",
                      "code": "data"
                    },
                    {
                      "type": "Text",
                      "value": " entry in the response should be "
                    },
                    {
                      "type": "InlineCode",
                      "code": "null"
                    },
                    {
                      "type": "Text",
                      "value": "."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Errors"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "The "
                    },
                    {
                      "type": "InlineCode",
                      "code": "errors"
                    },
                    {
                      "type": "Text",
                      "value": " entry in the response is a non-empty list of errors, where each error is a map."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "If no errors were encountered during the requested operation, the "
                    },
                    {
                      "type": "InlineCode",
                      "code": "errors"
                    },
                    {
                      "type": "Text",
                      "value": " entry should not be present in the result."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "If the "
                    },
                    {
                      "type": "InlineCode",
                      "code": "data"
                    },
                    {
                      "type": "Text",
                      "value": " entry in the response is not present, the "
                    },
                    {
                      "type": "InlineCode",
                      "code": "errors"
                    },
                    {
                      "type": "Text",
                      "value": " entry in the response must not be empty. It must contain at least one error. The errors it contains should indicate why no data was able to be returned."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "If the "
                    },
                    {
                      "type": "InlineCode",
                      "code": "data"
                    },
                    {
                      "type": "Text",
                      "value": " entry in the response is present (including if it is the value "
                    },
                    {
                      "type": "Keyword",
                      "value": "null"
                    },
                    {
                      "type": "Text",
                      "value": "), the "
                    },
                    {
                      "type": "InlineCode",
                      "code": "errors"
                    },
                    {
                      "type": "Text",
                      "value": " entry in the response may contain any errors that occurred during execution. If errors occurred during execution, it should contain those errors."
                    }
                  ]
                },
                {
                  "type": "Subsection",
                  "header": {
                    "type": "Subheader",
                    "title": "Error result format"
                  },
                  "contents": [
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Every error must contain an entry with the key "
                        },
                        {
                          "type": "InlineCode",
                          "code": "message"
                        },
                        {
                          "type": "Text",
                          "value": " with a string description of the error intended for the developer as a guide to understand and correct the error."
                        }
                      ]
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "If an error can be associated to a particular point in the requested GraphQL document, it should contain an entry with the key "
                        },
                        {
                          "type": "InlineCode",
                          "code": "locations"
                        },
                        {
                          "type": "Text",
                          "value": " with a list of locations, where each location is a map with the keys "
                        },
                        {
                          "type": "InlineCode",
                          "code": "line"
                        },
                        {
                          "type": "Text",
                          "value": " and "
                        },
                        {
                          "type": "InlineCode",
                          "code": "column"
                        },
                        {
                          "type": "Text",
                          "value": ", both positive numbers starting from "
                        },
                        {
                          "type": "InlineCode",
                          "code": "1"
                        },
                        {
                          "type": "Text",
                          "value": " which describe the beginning of an associated syntax element."
                        }
                      ]
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "If an error can be associated to a particular field in the GraphQL result, it must contain an entry with the key "
                        },
                        {
                          "type": "InlineCode",
                          "code": "path"
                        },
                        {
                          "type": "Text",
                          "value": " that details the path of the response field which experienced the error. This allows clients to identify whether a "
                        },
                        {
                          "type": "InlineCode",
                          "code": "null"
                        },
                        {
                          "type": "Text",
                          "value": " result is intentional or caused by a runtime error."
                        }
                      ]
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "This field should be a list of path segments starting at the root of the response and ending with the field associated with the error. Path segments that represent fields should be strings, and path segments that represent list indices should be 0-indexed integers. If the error happens in an aliased field, the path to the error should use the aliased name, since it represents a path in the response, not in the query."
                        }
                      ]
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "For example, if fetching one of the friends’ names fails in the following query:"
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": "graphql",
                      "example": true,
                      "counter": false,
                      "code": "{\n  hero(episode: $episode) {\n    name\n    heroFriends: friends {\n      id\n      name\n    }\n  }\n}\n"
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "The response might look like:"
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": "json",
                      "example": true,
                      "counter": false,
                      "code": "{\n  \"errors\": [\n    {\n      \"message\": \"Name for character with ID 1002 could not be fetched.\",\n      \"locations\": [ { \"line\": 6, \"column\": 7 } ],\n      \"path\": [ \"hero\", \"heroFriends\", 1, \"name\" ]\n    }\n  ],\n  \"data\": {\n    \"hero\": {\n      \"name\": \"R2-D2\",\n      \"heroFriends\": [\n        {\n          \"id\": \"1000\",\n          \"name\": \"Luke Skywalker\"\n        },\n        {\n          \"id\": \"1002\",\n          \"name\": null\n        },\n        {\n          \"id\": \"1003\",\n          \"name\": \"Leia Organa\"\n        }\n      ]\n    }\n  }\n}\n"
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "If the field which experienced an error was declared as "
                        },
                        {
                          "type": "InlineCode",
                          "code": "Non-Null"
                        },
                        {
                          "type": "Text",
                          "value": ", the "
                        },
                        {
                          "type": "InlineCode",
                          "code": "null"
                        },
                        {
                          "type": "Text",
                          "value": " result will bubble up to the next nullable field. In that case, the "
                        },
                        {
                          "type": "InlineCode",
                          "code": "path"
                        },
                        {
                          "type": "Text",
                          "value": " for the error should include the full path to the result field where the error occurred, even if that field is not present in the response."
                        }
                      ]
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "For example, if the "
                        },
                        {
                          "type": "InlineCode",
                          "code": "name"
                        },
                        {
                          "type": "Text",
                          "value": " field from above had declared a "
                        },
                        {
                          "type": "InlineCode",
                          "code": "Non-Null"
                        },
                        {
                          "type": "Text",
                          "value": " return type in the schema, the result would look different but the error reported would be the same:"
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": "json",
                      "example": true,
                      "counter": false,
                      "code": "{\n  \"errors\": [\n    {\n      \"message\": \"Name for character with ID 1002 could not be fetched.\",\n      \"locations\": [ { \"line\": 6, \"column\": 7 } ],\n      \"path\": [ \"hero\", \"heroFriends\", 1, \"name\" ]\n    }\n  ],\n  \"data\": {\n    \"hero\": {\n      \"name\": \"R2-D2\",\n      \"heroFriends\": [\n        {\n          \"id\": \"1000\",\n          \"name\": \"Luke Skywalker\"\n        },\n        null,\n        {\n          \"id\": \"1003\",\n          \"name\": \"Leia Organa\"\n        }\n      ]\n    }\n  }\n}\n"
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "GraphQL services may provide an additional entry to errors with key "
                        },
                        {
                          "type": "InlineCode",
                          "code": "extensions"
                        },
                        {
                          "type": "Text",
                          "value": ". This entry, if set, must have a map as its value. This entry is reserved for implementors to add additional information to errors however they see fit, and there are no additional restrictions on its contents."
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": "json",
                      "example": true,
                      "counter": false,
                      "code": "{\n  \"errors\": [\n    {\n      \"message\": \"Name for character with ID 1002 could not be fetched.\",\n      \"locations\": [ { \"line\": 6, \"column\": 7 } ],\n      \"path\": [ \"hero\", \"heroFriends\", 1, \"name\" ],\n      \"extensions\": {\n        \"code\": \"CAN_NOT_FETCH_BY_ID\",\n        \"timestamp\": \"Fri Feb 9 14:33:09 UTC 2018\"\n      }\n    }\n  ]\n}\n"
                    },
                    {
                      "type": "Paragraph",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "GraphQL services should not provide any additional entries to the error format since they could conflict with additional entries that may be added in future versions of this specification."
                        }
                      ]
                    },
                    {
                      "type": "Note",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "Previous versions of this spec did not describe the "
                        },
                        {
                          "type": "InlineCode",
                          "code": "extensions"
                        },
                        {
                          "type": "Text",
                          "value": " entry for error formatting. While non-specified entries are not violations, they are still discouraged."
                        }
                      ]
                    },
                    {
                      "type": "Code",
                      "raw": false,
                      "lang": "json",
                      "example": true,
                      "counter": true,
                      "code": "{\n  \"errors\": [\n    {\n      \"message\": \"Name for character with ID 1002 could not be fetched.\",\n      \"locations\": [ { \"line\": 6, \"column\": 7 } ],\n      \"path\": [ \"hero\", \"heroFriends\", 1, \"name\" ],\n      \"code\": \"CAN_NOT_FETCH_BY_ID\",\n      \"timestamp\": \"Fri Feb 9 14:33:09 UTC 2018\"\n    }\n  ]\n}\n"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Serialization Format"
          },
          "contents": [
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "GraphQL does not require a specific serialization format. However, clients should use a serialization format that supports the major primitives in the GraphQL response. In particular, the serialization format must at least support representations of the following four primitives:"
                }
              ]
            },
            {
              "type": "List",
              "ordered": false,
              "items": [
                {
                  "type": "ListItem",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Map"
                    }
                  ]
                },
                {
                  "type": "ListItem",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "List"
                    }
                  ]
                },
                {
                  "type": "ListItem",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "String"
                    }
                  ]
                },
                {
                  "type": "ListItem",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Null"
                    }
                  ]
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "A serialization format should also support the following primitives, each representing one of the common GraphQL scalar types, however a string or simpler primitive may be used as a substitute if any are not directly supported:"
                }
              ]
            },
            {
              "type": "List",
              "ordered": false,
              "items": [
                {
                  "type": "ListItem",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Boolean"
                    }
                  ]
                },
                {
                  "type": "ListItem",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Int"
                    }
                  ]
                },
                {
                  "type": "ListItem",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Float"
                    }
                  ]
                },
                {
                  "type": "ListItem",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Enum Value"
                    }
                  ]
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "This is not meant to be an exhaustive list of what a serialization format may encode. For example custom scalars representing a Date, Time, URI, or number with a different precision may be represented in whichever relevant format a given serialization format may support."
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "JSON Serialization"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "JSON is the most common serialization format for GraphQL. Though as mentioned above, GraphQL does not require a specific serialization format."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "When using JSON as a serialization of GraphQL responses, the following JSON values should be used to encode the related GraphQL values:"
                    }
                  ]
                },
                {
                  "type": "Table",
                  "headers": [
                    [
                      {
                        "type": "Text",
                        "value": "GraphQL Value"
                      }
                    ],
                    [
                      {
                        "type": "Text",
                        "value": "JSON Value"
                      }
                    ]
                  ],
                  "rows": [
                    [
                      [
                        {
                          "type": "Text",
                          "value": "Map"
                        }
                      ],
                      [
                        {
                          "type": "Text",
                          "value": "Object"
                        }
                      ]
                    ],
                    [
                      [
                        {
                          "type": "Text",
                          "value": "List"
                        }
                      ],
                      [
                        {
                          "type": "Text",
                          "value": "Array"
                        }
                      ]
                    ],
                    [
                      [
                        {
                          "type": "Text",
                          "value": "Null"
                        }
                      ],
                      [
                        {
                          "type": "Keyword",
                          "value": "null"
                        }
                      ]
                    ],
                    [
                      [
                        {
                          "type": "Text",
                          "value": "String"
                        }
                      ],
                      [
                        {
                          "type": "Text",
                          "value": "String"
                        }
                      ]
                    ],
                    [
                      [
                        {
                          "type": "Text",
                          "value": "Boolean"
                        }
                      ],
                      [
                        {
                          "type": "Keyword",
                          "value": "true"
                        },
                        {
                          "type": "Text",
                          "value": " or "
                        },
                        {
                          "type": "Keyword",
                          "value": "false"
                        }
                      ]
                    ],
                    [
                      [
                        {
                          "type": "Text",
                          "value": "Int"
                        }
                      ],
                      [
                        {
                          "type": "Text",
                          "value": "Number"
                        }
                      ]
                    ],
                    [
                      [
                        {
                          "type": "Text",
                          "value": "Float"
                        }
                      ],
                      [
                        {
                          "type": "Text",
                          "value": "Number"
                        }
                      ]
                    ],
                    [
                      [
                        {
                          "type": "Text",
                          "value": "Enum Value"
                        }
                      ],
                      [
                        {
                          "type": "Text",
                          "value": "String"
                        }
                      ]
                    ]
                  ]
                },
                {
                  "type": "Note",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "For consistency and ease of notation, examples of responses are given in JSON format throughout this document."
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "header": {
                "type": "Header",
                "level": 3,
                "secID": null,
                "title": "Serialized Map Ordering"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Since the result of evaluating a selection set is ordered, the serialized Map of results should preserve this order by writing the map entries in the same order as those fields were requested as defined by query execution. Producing a serialized response where fields are represented in the same order in which they appear in the request improves human readability during debugging and enables more efficient parsing of responses if the order of properties can be anticipated."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "Serialization formats which represent an ordered map should preserve the order of requested fields as defined by "
                    },
                    {
                      "type": "Call",
                      "name": "CollectFields",
                      "args": []
                    },
                    {
                      "type": "Text",
                      "value": " in the Execution section. Serialization formats which only represent unordered maps but where order is still implicit in the serialization’s textual order (such as JSON) should preserve the order of requested fields textually."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "For example, if the request was "
                    },
                    {
                      "type": "InlineCode",
                      "code": "{ name, age }"
                    },
                    {
                      "type": "Text",
                      "value": ", a GraphQL service responding in JSON should respond with "
                    },
                    {
                      "type": "InlineCode",
                      "code": "{ \"name\": \"Mark\", \"age\": 30 }"
                    },
                    {
                      "type": "Text",
                      "value": " and should not respond with "
                    },
                    {
                      "type": "InlineCode",
                      "code": "{ \"age\": 30, \"name\": \"Mark\" }"
                    },
                    {
                      "type": "Text",
                      "value": "."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "While JSON Objects are specified as an "
                    },
                    {
                      "type": "Link",
                      "contents": [
                        {
                          "type": "Text",
                          "value": "unordered collection of key-value pairs"
                        }
                      ],
                      "url": "https://tools.ietf.org/html/rfc7159#section-4"
                    },
                    {
                      "type": "Text",
                      "value": " the pairs are represented in an ordered manner. In other words, while the JSON strings "
                    },
                    {
                      "type": "InlineCode",
                      "code": "{ \"name\": \"Mark\", \"age\": 30 }"
                    },
                    {
                      "type": "Text",
                      "value": " and "
                    },
                    {
                      "type": "InlineCode",
                      "code": "{ \"age\": 30, \"name\": \"Mark\" }"
                    },
                    {
                      "type": "Text",
                      "value": " encode the same value, they also have observably different property orderings."
                    }
                  ]
                },
                {
                  "type": "Note",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "This does not violate the JSON spec, as clients may still interpret objects in the response as unordered Maps and arrive at a valid value. "
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "Section",
      "header": {
        "type": "Header",
        "level": 1,
        "secID": [
          "A"
        ],
        "title": "Appendix: Notation Conventions"
      },
      "contents": [
        {
          "type": "Paragraph",
          "contents": [
            {
              "type": "Text",
              "value": "This specification document contains a number of notation conventions used to describe technical concepts such as language grammar and semantics as well as runtime algorithms."
            }
          ]
        },
        {
          "type": "Paragraph",
          "contents": [
            {
              "type": "Text",
              "value": "This appendix seeks to explain these notations in greater detail to avoid ambiguity."
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Context-Free Grammar"
          },
          "contents": [
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "A context-free grammar consists of a number of productions. Each production has an abstract symbol called a “non-terminal” as its left-hand side, and zero or more possible sequences of non-terminal symbols and or terminal characters as its right-hand side."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Starting from a single goal non-terminal symbol, a context-free grammar describes a language: the set of possible sequences of characters that can be described by repeatedly replacing any non-terminal in the goal sequence with one of the sequences it is defined by, until all non-terminal symbols have been replaced by terminal characters."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Terminals are represented in this document in a monospace font in two forms: a specific Unicode character or sequence of Unicode characters (ie. "
                },
                {
                  "type": "Terminal",
                  "value": "="
                },
                {
                  "type": "Text",
                  "value": " or "
                },
                {
                  "type": "Terminal",
                  "value": "terminal"
                },
                {
                  "type": "Text",
                  "value": "), and prose typically describing a specific Unicode code-point "
                },
                {
                  "type": "StringLiteral",
                  "value": "\"Space (U+0020)\""
                },
                {
                  "type": "Text",
                  "value": ". Sequences of Unicode characters only appear in syntactic grammars and represent a "
                },
                {
                  "type": "NonTerminal",
                  "name": "Name",
                  "params": null
                },
                {
                  "type": "Text",
                  "value": " token of that specific sequence."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "Non-terminal production rules are represented in this document using the following notation for a non-terminal with a single definition:"
                }
              ]
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "NonTerminalWithSingleDefinition",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "NonTerminal",
                    "name": "NonTerminal",
                    "params": null
                  },
                  {
                    "type": "Terminal",
                    "value": "terminal"
                  }
                ]
              }
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "While using the following notation for a production with a list of definitions:"
                }
              ]
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "NonTerminalWithManyDefinitions",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "ListRHS",
                "defs": [
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "OtherNonTerminal",
                        "params": null
                      },
                      {
                        "type": "Terminal",
                        "value": "terminal"
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Terminal",
                        "value": "terminal"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "A definition may refer to itself, which describes repetitive sequences, for example:"
                }
              ]
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "ListOfLetterA",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "ListRHS",
                "defs": [
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "ListOfLetterA",
                        "params": null
                      },
                      {
                        "type": "Terminal",
                        "value": "a"
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Terminal",
                        "value": "a"
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Lexical and Syntactical Grammar"
          },
          "contents": [
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "The GraphQL language is defined in a syntactic grammar where terminal symbols are tokens. Tokens are defined in a lexical grammar which matches patterns of source characters. The result of parsing a source text sequence of Unicode characters first produces a sequence of lexical tokens according to the lexical grammar which then produces abstract syntax tree (AST) according to the syntactical grammar."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "A lexical grammar production describes non-terminal “tokens” by patterns of terminal Unicode characters. No “whitespace” or other ignored characters may appear between any terminal Unicode characters in the lexical grammar production. A lexical grammar production is distinguished by a two colon "
                },
                {
                  "type": "InlineCode",
                  "code": "::"
                },
                {
                  "type": "Text",
                  "value": " definition."
                }
              ]
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "Word",
                "params": null
              },
              "defType": 2,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "Letter",
                      "params": null
                    },
                    "isList": true,
                    "isOptional": false
                  }
                ]
              }
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "A Syntactical grammar production describes non-terminal “rules” by patterns of terminal Tokens. "
                },
                {
                  "type": "NonTerminal",
                  "name": "WhiteSpace",
                  "params": null
                },
                {
                  "type": "Text",
                  "value": " and other "
                },
                {
                  "type": "NonTerminal",
                  "name": "Ignored",
                  "params": null
                },
                {
                  "type": "Text",
                  "value": " sequences may appear before or after any terminal "
                },
                {
                  "type": "NonTerminal",
                  "name": "Token",
                  "params": null
                },
                {
                  "type": "Text",
                  "value": ". A syntactical grammar production is distinguished by a one colon "
                },
                {
                  "type": "InlineCode",
                  "code": ":"
                },
                {
                  "type": "Text",
                  "value": " definition."
                }
              ]
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "Sentence",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "Word",
                      "params": null
                    },
                    "isList": true,
                    "isOptional": false
                  },
                  {
                    "type": "Terminal",
                    "value": "."
                  }
                ]
              }
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Grammar Notation"
          },
          "contents": [
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "This specification uses some additional notation to describe common patterns, such as optional or repeated patterns, or parameterized alterations of the definition of a non-terminal. This section explains these short-hand notations and their expanded definitions in the context-free grammar."
                }
              ]
            },
            {
              "type": "Subsection",
              "header": {
                "type": "Subheader",
                "title": "Constraints"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "A grammar production may specify that certain expansions are not permitted by using the phrase “but not” and then indicating the expansions to be excluded."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "For example, the following production means that the nonterminal "
                    },
                    {
                      "type": "NonTerminal",
                      "name": "SafeWord",
                      "params": null
                    },
                    {
                      "type": "Text",
                      "value": " may be replaced by any sequence of characters that could replace "
                    },
                    {
                      "type": "NonTerminal",
                      "name": "Word",
                      "params": null
                    },
                    {
                      "type": "Text",
                      "value": " provided that the same sequence of characters could not replace "
                    },
                    {
                      "type": "NonTerminal",
                      "name": "SevenCarlinWords",
                      "params": null
                    },
                    {
                      "type": "Text",
                      "value": "."
                    }
                  ]
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "SafeWord",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Constrained",
                        "token": {
                          "type": "NonTerminal",
                          "name": "Word",
                          "params": null
                        },
                        "constraint": {
                          "type": "ButNot",
                          "tokens": [
                            {
                              "type": "NonTerminal",
                              "name": "SevenCarlinWords",
                              "params": null
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "A grammar may also list a number of restrictions after “but not” separated by “or”."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "For example:"
                    }
                  ]
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "NonBooleanName",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Constrained",
                        "token": {
                          "type": "NonTerminal",
                          "name": "Name",
                          "params": null
                        },
                        "constraint": {
                          "type": "ButNot",
                          "tokens": [
                            {
                              "type": "Terminal",
                              "value": "true"
                            },
                            {
                              "type": "Terminal",
                              "value": "false"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            {
              "type": "Subsection",
              "header": {
                "type": "Subheader",
                "title": "Lookahead Restrictions"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "A grammar production may specify that certain characters or tokens are not permitted to follow it by using the pattern "
                    },
                    {
                      "type": "Lookahead",
                      "not": true,
                      "nt": true,
                      "set": [
                        {
                          "type": "NonTerminal",
                          "name": "NotAllowed",
                          "params": null
                        }
                      ]
                    },
                    {
                      "type": "Text",
                      "value": ". Lookahead restrictions are often used to remove ambiguity from the grammar."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "The following example makes it clear that "
                    },
                    {
                      "type": "Quantified",
                      "token": {
                        "type": "NonTerminal",
                        "name": "Letter",
                        "params": null
                      },
                      "isList": true,
                      "isOptional": false
                    },
                    {
                      "type": "Text",
                      "value": " must be greedy, since "
                    },
                    {
                      "type": "NonTerminal",
                      "name": "Word",
                      "params": null
                    },
                    {
                      "type": "Text",
                      "value": " cannot be followed by yet another "
                    },
                    {
                      "type": "NonTerminal",
                      "name": "Letter",
                      "params": null
                    },
                    {
                      "type": "Text",
                      "value": "."
                    }
                  ]
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "Word",
                    "params": null
                  },
                  "defType": 2,
                  "rhs": {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Quantified",
                        "token": {
                          "type": "NonTerminal",
                          "name": "Letter",
                          "params": null
                        },
                        "isList": true,
                        "isOptional": false
                      },
                      {
                        "type": "Lookahead",
                        "not": true,
                        "nt": true,
                        "set": [
                          {
                            "type": "NonTerminal",
                            "name": "Letter",
                            "params": null
                          }
                        ]
                      }
                    ]
                  }
                }
              ]
            },
            {
              "type": "Subsection",
              "header": {
                "type": "Subheader",
                "title": "Optionality and Lists"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "A subscript suffix “"
                    },
                    {
                      "type": "Quantified",
                      "token": {
                        "type": "NonTerminal",
                        "name": "Symbol",
                        "params": null
                      },
                      "isList": false,
                      "isOptional": true
                    },
                    {
                      "type": "Text",
                      "value": "” is shorthand for two possible sequences, one including that symbol and one excluding it."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "As an example:"
                    }
                  ]
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "Sentence",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "Noun",
                        "params": null
                      },
                      {
                        "type": "NonTerminal",
                        "name": "Verb",
                        "params": null
                      },
                      {
                        "type": "Quantified",
                        "token": {
                          "type": "NonTerminal",
                          "name": "Adverb",
                          "params": null
                        },
                        "isList": false,
                        "isOptional": true
                      }
                    ]
                  }
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "is shorthand for"
                    }
                  ]
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "Sentence",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "ListRHS",
                    "defs": [
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "Noun",
                            "params": null
                          },
                          {
                            "type": "NonTerminal",
                            "name": "Verb",
                            "params": null
                          },
                          {
                            "type": "NonTerminal",
                            "name": "Adverb",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "Noun",
                            "params": null
                          },
                          {
                            "type": "NonTerminal",
                            "name": "Verb",
                            "params": null
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "A subscript suffix “"
                    },
                    {
                      "type": "Quantified",
                      "token": {
                        "type": "NonTerminal",
                        "name": "Symbol",
                        "params": null
                      },
                      "isList": true,
                      "isOptional": false
                    },
                    {
                      "type": "Text",
                      "value": "” is shorthand for a list of one or more of that symbol, represented as an additional recursive production."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "As an example:"
                    }
                  ]
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "Book",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "Cover",
                        "params": null
                      },
                      {
                        "type": "Quantified",
                        "token": {
                          "type": "NonTerminal",
                          "name": "Page",
                          "params": null
                        },
                        "isList": true,
                        "isOptional": false
                      },
                      {
                        "type": "NonTerminal",
                        "name": "Cover",
                        "params": null
                      }
                    ]
                  }
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "is shorthand for"
                    }
                  ]
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "Book",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "Cover",
                        "params": null
                      },
                      {
                        "type": "NonTerminal",
                        "name": "Page_list",
                        "params": null
                      },
                      {
                        "type": "NonTerminal",
                        "name": "Cover",
                        "params": null
                      }
                    ]
                  }
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "Page_list",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "ListRHS",
                    "defs": [
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "Page_list",
                            "params": null
                          },
                          {
                            "type": "NonTerminal",
                            "name": "Page",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "Page",
                            "params": null
                          }
                        ]
                      }
                    ]
                  }
                }
              ]
            },
            {
              "type": "Subsection",
              "header": {
                "type": "Subheader",
                "title": "Parameterized Grammar Productions"
              },
              "contents": [
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "A symbol definition subscript suffix parameter in braces “"
                    },
                    {
                      "type": "NonTerminal",
                      "name": "Symbol",
                      "params": [
                        {
                          "type": "NonTerminalParam",
                          "conditional": false,
                          "negated": false,
                          "name": "Param"
                        }
                      ]
                    },
                    {
                      "type": "Text",
                      "value": "” is shorthand for two symbol definitions, one appended with that parameter name, the other without. The same subscript suffix on a symbol is shorthand for that variant of the definition. If the parameter starts with “?”, that form of the symbol is used if in a symbol definition with the same parameter. Some possible sequences can be included or excluded conditionally when respectively prefixed with “[+Param]” and “[~Param]”."
                    }
                  ]
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "As an example:"
                    }
                  ]
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "Example",
                    "params": [
                      {
                        "type": "NonTerminalParam",
                        "conditional": false,
                        "negated": false,
                        "name": "Param"
                      }
                    ]
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "ListRHS",
                    "defs": [
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "A",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "B",
                            "params": [
                              {
                                "type": "NonTerminalParam",
                                "conditional": false,
                                "negated": false,
                                "name": "Param"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "C",
                            "params": [
                              {
                                "type": "NonTerminalParam",
                                "conditional": true,
                                "negated": false,
                                "name": "Param"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": {
                          "type": "Condition",
                          "param": "Param",
                          "not": false
                        },
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "D",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": {
                          "type": "Condition",
                          "param": "Param",
                          "not": true
                        },
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "E",
                            "params": null
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "type": "Paragraph",
                  "contents": [
                    {
                      "type": "Text",
                      "value": "is shorthand for"
                    }
                  ]
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "Example",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "ListRHS",
                    "defs": [
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "A",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "B_param",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "C",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "E",
                            "params": null
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "type": "Production",
                  "token": {
                    "type": "NonTerminal",
                    "name": "Example_param",
                    "params": null
                  },
                  "defType": 1,
                  "rhs": {
                    "type": "ListRHS",
                    "defs": [
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "A",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "B_param",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "C_param",
                            "params": null
                          }
                        ]
                      },
                      {
                        "type": "RHS",
                        "condition": null,
                        "tokens": [
                          {
                            "type": "NonTerminal",
                            "name": "D",
                            "params": null
                          }
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Grammar Semantics"
          },
          "contents": [
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "This specification describes the semantic value of many grammar productions in the form of a list of algorithmic steps."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "For example, this describes how a parser should interpret a string literal:"
                }
              ]
            },
            {
              "type": "Semantic",
              "name": {
                "type": "NonTerminal",
                "name": "StringValue",
                "params": null
              },
              "defType": 2,
              "rhs": {
                "type": "RHS",
                "tokens": [
                  {
                    "type": "Terminal",
                    "value": "\"\""
                  }
                ]
              },
              "steps": {
                "type": "List",
                "ordered": true,
                "items": [
                  {
                    "type": "ListItem",
                    "contents": [
                      {
                        "type": "Text",
                        "value": "Return an empty Unicode character sequence."
                      }
                    ]
                  }
                ]
              }
            },
            {
              "type": "Semantic",
              "name": {
                "type": "NonTerminal",
                "name": "StringValue",
                "params": null
              },
              "defType": 2,
              "rhs": {
                "type": "RHS",
                "tokens": [
                  {
                    "type": "Terminal",
                    "value": "\""
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "StringCharacter",
                      "params": null
                    },
                    "isList": true,
                    "isOptional": false
                  },
                  {
                    "type": "Terminal",
                    "value": "\""
                  }
                ]
              },
              "steps": {
                "type": "List",
                "ordered": true,
                "items": [
                  {
                    "type": "ListItem",
                    "contents": [
                      {
                        "type": "Text",
                        "value": "Return the Unicode character sequence of all "
                      },
                      {
                        "type": "NonTerminal",
                        "name": "StringCharacter",
                        "params": null
                      },
                      {
                        "type": "Text",
                        "value": " Unicode character values."
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Algorithms"
          },
          "contents": [
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "This specification describes some algorithms used by the static and runtime semantics, they’re defined in the form of a function-like syntax with the algorithm’s name and the arguments it accepts along with a list of algorithmic steps to take in the order listed. Each step may establish references to other values, check various conditions, call other algorithms, and eventually return a value representing the outcome of the algorithm for the provided arguments."
                }
              ]
            },
            {
              "type": "Paragraph",
              "contents": [
                {
                  "type": "Text",
                  "value": "For example, the following example describes an algorithm named "
                },
                {
                  "type": "NonTerminal",
                  "name": "Fibonacci",
                  "params": null
                },
                {
                  "type": "Text",
                  "value": " which accepts a single argument "
                },
                {
                  "type": "Variable",
                  "name": "number"
                },
                {
                  "type": "Text",
                  "value": ". The algoritm’s steps produce the next number in the Fibonacci sequence:"
                }
              ]
            },
            {
              "type": "Algorithm",
              "call": {
                "type": "Call",
                "name": "Fibonacci",
                "args": [
                  {
                    "type": "Variable",
                    "name": "number"
                  }
                ]
              },
              "steps": {
                "type": "List",
                "ordered": true,
                "items": [
                  {
                    "type": "ListItem",
                    "contents": [
                      {
                        "type": "Text",
                        "value": "If "
                      },
                      {
                        "type": "Variable",
                        "name": "number"
                      },
                      {
                        "type": "Text",
                        "value": " is "
                      },
                      {
                        "type": "Terminal",
                        "value": "0"
                      },
                      {
                        "type": "Text",
                        "value": ":"
                      },
                      {
                        "type": "List",
                        "ordered": true,
                        "items": [
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "Return "
                              },
                              {
                                "type": "Terminal",
                                "value": "1"
                              },
                              {
                                "type": "Text",
                                "value": "."
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "type": "ListItem",
                    "contents": [
                      {
                        "type": "Text",
                        "value": "If "
                      },
                      {
                        "type": "Variable",
                        "name": "number"
                      },
                      {
                        "type": "Text",
                        "value": " is "
                      },
                      {
                        "type": "Terminal",
                        "value": "1"
                      },
                      {
                        "type": "Text",
                        "value": ":"
                      },
                      {
                        "type": "List",
                        "ordered": true,
                        "items": [
                          {
                            "type": "ListItem",
                            "contents": [
                              {
                                "type": "Text",
                                "value": "Return "
                              },
                              {
                                "type": "Terminal",
                                "value": "2"
                              },
                              {
                                "type": "Text",
                                "value": "."
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "type": "ListItem",
                    "contents": [
                      {
                        "type": "Text",
                        "value": "Let "
                      },
                      {
                        "type": "Variable",
                        "name": "previousNumber"
                      },
                      {
                        "type": "Text",
                        "value": " be "
                      },
                      {
                        "type": "Variable",
                        "name": "number"
                      },
                      {
                        "type": "Text",
                        "value": " - "
                      },
                      {
                        "type": "Terminal",
                        "value": "1"
                      },
                      {
                        "type": "Text",
                        "value": "."
                      }
                    ]
                  },
                  {
                    "type": "ListItem",
                    "contents": [
                      {
                        "type": "Text",
                        "value": "Let "
                      },
                      {
                        "type": "Variable",
                        "name": "previousPreviousNumber"
                      },
                      {
                        "type": "Text",
                        "value": " be "
                      },
                      {
                        "type": "Variable",
                        "name": "number"
                      },
                      {
                        "type": "Text",
                        "value": " - "
                      },
                      {
                        "type": "Terminal",
                        "value": "2"
                      },
                      {
                        "type": "Text",
                        "value": "."
                      }
                    ]
                  },
                  {
                    "type": "ListItem",
                    "contents": [
                      {
                        "type": "Text",
                        "value": "Return "
                      },
                      {
                        "type": "Call",
                        "name": "Fibonacci",
                        "args": [
                          {
                            "type": "Variable",
                            "name": "previousNumber"
                          }
                        ]
                      },
                      {
                        "type": "Text",
                        "value": " + "
                      },
                      {
                        "type": "Call",
                        "name": "Fibonacci",
                        "args": [
                          {
                            "type": "Variable",
                            "name": "previousPreviousNumber"
                          }
                        ]
                      },
                      {
                        "type": "Text",
                        "value": "."
                      }
                    ]
                  }
                ]
              }
            },
            {
              "type": "Note",
              "contents": [
                {
                  "type": "Text",
                  "value": "Algorithms described in this document are written to be easy to understand. Implementers are encouraged to include equivalent but optimized implementations. "
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "Section",
      "header": {
        "type": "Header",
        "level": 1,
        "secID": [
          "B"
        ],
        "title": "Appendix: Grammar Summary"
      },
      "contents": [
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Source Text"
          },
          "contents": [
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "SourceCharacter",
                "params": null
              },
              "defType": 2,
              "rhs": {
                "type": "ListRHS",
                "defs": [
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Prose",
                        "text": "U+0009"
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Prose",
                        "text": "U+000A"
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Prose",
                        "text": "U+000D"
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Prose",
                        "text": "U+0020–U+FFFF"
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Ignored Tokens"
          },
          "contents": [
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "Ignored",
                "params": null
              },
              "defType": 2,
              "rhs": {
                "type": "ListRHS",
                "defs": [
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "UnicodeBOM",
                        "params": null
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "WhiteSpace",
                        "params": null
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "LineTerminator",
                        "params": null
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "Comment",
                        "params": null
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "Comma",
                        "params": null
                      }
                    ]
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "UnicodeBOM",
                "params": null
              },
              "defType": 2,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "Prose",
                    "text": "Byte Order Mark (U+FEFF)"
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "WhiteSpace",
                "params": null
              },
              "defType": 2,
              "rhs": {
                "type": "ListRHS",
                "defs": [
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Prose",
                        "text": "Horizontal Tab (U+0009)"
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Prose",
                        "text": "Space (U+0020)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "LineTerminator",
                "params": null
              },
              "defType": 2,
              "rhs": {
                "type": "ListRHS",
                "defs": [
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Prose",
                        "text": "New Line (U+000A)"
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Prose",
                        "text": "Carriage Return (U+000D)"
                      },
                      {
                        "type": "Lookahead",
                        "not": true,
                        "nt": false,
                        "set": [
                          {
                            "type": "Prose",
                            "text": "New Line (U+000A)"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Prose",
                        "text": "Carriage Return (U+000D)"
                      },
                      {
                        "type": "Prose",
                        "text": "New Line (U+000A)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "Comment",
                "params": null
              },
              "defType": 2,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "Terminal",
                    "value": "#"
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "CommentChar",
                      "params": null
                    },
                    "isList": true,
                    "isOptional": true
                  },
                  {
                    "type": "Lookahead",
                    "not": true,
                    "nt": true,
                    "set": [
                      {
                        "type": "NonTerminal",
                        "name": "CommentChar",
                        "params": null
                      }
                    ]
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "CommentChar",
                "params": null
              },
              "defType": 2,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "Constrained",
                    "token": {
                      "type": "NonTerminal",
                      "name": "SourceCharacter",
                      "params": null
                    },
                    "constraint": {
                      "type": "ButNot",
                      "tokens": [
                        {
                          "type": "NonTerminal",
                          "name": "LineTerminator",
                          "params": null
                        }
                      ]
                    }
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "Comma",
                "params": null
              },
              "defType": 2,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "Terminal",
                    "value": ","
                  }
                ]
              }
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Lexical Tokens"
          },
          "contents": [
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "Token",
                "params": null
              },
              "defType": 2,
              "rhs": {
                "type": "ListRHS",
                "defs": [
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "Punctuator",
                        "params": null
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "Name",
                        "params": null
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "IntValue",
                        "params": null
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "FloatValue",
                        "params": null
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "StringValue",
                        "params": null
                      }
                    ]
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "Punctuator",
                "params": null
              },
              "defType": 2,
              "rhs": {
                "type": "OneOfRHS",
                "rows": [
                  [
                    {
                      "type": "Terminal",
                      "value": "!"
                    },
                    {
                      "type": "Terminal",
                      "value": "$"
                    },
                    {
                      "type": "Terminal",
                      "value": "&"
                    },
                    {
                      "type": "Terminal",
                      "value": "("
                    },
                    {
                      "type": "Terminal",
                      "value": ")"
                    },
                    {
                      "type": "Terminal",
                      "value": "..."
                    },
                    {
                      "type": "Terminal",
                      "value": ":"
                    },
                    {
                      "type": "Terminal",
                      "value": "="
                    },
                    {
                      "type": "Terminal",
                      "value": "@"
                    },
                    {
                      "type": "Terminal",
                      "value": "["
                    },
                    {
                      "type": "Terminal",
                      "value": "]"
                    },
                    {
                      "type": "Terminal",
                      "value": "{"
                    },
                    {
                      "type": "Terminal",
                      "value": "|"
                    },
                    {
                      "type": "Terminal",
                      "value": "}"
                    }
                  ]
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "Name",
                "params": null
              },
              "defType": 2,
              "rhs": {
                "type": "ListRHS",
                "defs": [
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "NameStart",
                        "params": null
                      },
                      {
                        "type": "Quantified",
                        "token": {
                          "type": "NonTerminal",
                          "name": "NameContinue",
                          "params": null
                        },
                        "isList": true,
                        "isOptional": true
                      },
                      {
                        "type": "Lookahead",
                        "not": true,
                        "nt": true,
                        "set": [
                          {
                            "type": "NonTerminal",
                            "name": "NameContinue",
                            "params": null
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "NameStart",
                "params": null
              },
              "defType": 2,
              "rhs": {
                "type": "ListRHS",
                "defs": [
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "Letter",
                        "params": null
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Terminal",
                        "value": "_"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "NameContinue",
                "params": null
              },
              "defType": 2,
              "rhs": {
                "type": "ListRHS",
                "defs": [
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "Letter",
                        "params": null
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "Digit",
                        "params": null
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Terminal",
                        "value": "_"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "Letter",
                "params": null
              },
              "defType": 2,
              "rhs": {
                "type": "OneOfRHS",
                "rows": [
                  [
                    {
                      "type": "Terminal",
                      "value": "A"
                    },
                    {
                      "type": "Terminal",
                      "value": "B"
                    },
                    {
                      "type": "Terminal",
                      "value": "C"
                    },
                    {
                      "type": "Terminal",
                      "value": "D"
                    },
                    {
                      "type": "Terminal",
                      "value": "E"
                    },
                    {
                      "type": "Terminal",
                      "value": "F"
                    },
                    {
                      "type": "Terminal",
                      "value": "G"
                    },
                    {
                      "type": "Terminal",
                      "value": "H"
                    },
                    {
                      "type": "Terminal",
                      "value": "I"
                    },
                    {
                      "type": "Terminal",
                      "value": "J"
                    },
                    {
                      "type": "Terminal",
                      "value": "K"
                    },
                    {
                      "type": "Terminal",
                      "value": "L"
                    },
                    {
                      "type": "Terminal",
                      "value": "M"
                    }
                  ],
                  [
                    {
                      "type": "Terminal",
                      "value": "N"
                    },
                    {
                      "type": "Terminal",
                      "value": "O"
                    },
                    {
                      "type": "Terminal",
                      "value": "P"
                    },
                    {
                      "type": "Terminal",
                      "value": "Q"
                    },
                    {
                      "type": "Terminal",
                      "value": "R"
                    },
                    {
                      "type": "Terminal",
                      "value": "S"
                    },
                    {
                      "type": "Terminal",
                      "value": "T"
                    },
                    {
                      "type": "Terminal",
                      "value": "U"
                    },
                    {
                      "type": "Terminal",
                      "value": "V"
                    },
                    {
                      "type": "Terminal",
                      "value": "W"
                    },
                    {
                      "type": "Terminal",
                      "value": "X"
                    },
                    {
                      "type": "Terminal",
                      "value": "Y"
                    },
                    {
                      "type": "Terminal",
                      "value": "Z"
                    }
                  ],
                  [
                    {
                      "type": "Terminal",
                      "value": "a"
                    },
                    {
                      "type": "Terminal",
                      "value": "b"
                    },
                    {
                      "type": "Terminal",
                      "value": "c"
                    },
                    {
                      "type": "Terminal",
                      "value": "d"
                    },
                    {
                      "type": "Terminal",
                      "value": "e"
                    },
                    {
                      "type": "Terminal",
                      "value": "f"
                    },
                    {
                      "type": "Terminal",
                      "value": "g"
                    },
                    {
                      "type": "Terminal",
                      "value": "h"
                    },
                    {
                      "type": "Terminal",
                      "value": "i"
                    },
                    {
                      "type": "Terminal",
                      "value": "j"
                    },
                    {
                      "type": "Terminal",
                      "value": "k"
                    },
                    {
                      "type": "Terminal",
                      "value": "l"
                    },
                    {
                      "type": "Terminal",
                      "value": "m"
                    }
                  ],
                  [
                    {
                      "type": "Terminal",
                      "value": "n"
                    },
                    {
                      "type": "Terminal",
                      "value": "o"
                    },
                    {
                      "type": "Terminal",
                      "value": "p"
                    },
                    {
                      "type": "Terminal",
                      "value": "q"
                    },
                    {
                      "type": "Terminal",
                      "value": "r"
                    },
                    {
                      "type": "Terminal",
                      "value": "s"
                    },
                    {
                      "type": "Terminal",
                      "value": "t"
                    },
                    {
                      "type": "Terminal",
                      "value": "u"
                    },
                    {
                      "type": "Terminal",
                      "value": "v"
                    },
                    {
                      "type": "Terminal",
                      "value": "w"
                    },
                    {
                      "type": "Terminal",
                      "value": "x"
                    },
                    {
                      "type": "Terminal",
                      "value": "y"
                    },
                    {
                      "type": "Terminal",
                      "value": "z"
                    }
                  ]
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "Digit",
                "params": null
              },
              "defType": 2,
              "rhs": {
                "type": "OneOfRHS",
                "rows": [
                  [
                    {
                      "type": "Terminal",
                      "value": "0"
                    },
                    {
                      "type": "Terminal",
                      "value": "1"
                    },
                    {
                      "type": "Terminal",
                      "value": "2"
                    },
                    {
                      "type": "Terminal",
                      "value": "3"
                    },
                    {
                      "type": "Terminal",
                      "value": "4"
                    },
                    {
                      "type": "Terminal",
                      "value": "5"
                    },
                    {
                      "type": "Terminal",
                      "value": "6"
                    },
                    {
                      "type": "Terminal",
                      "value": "7"
                    },
                    {
                      "type": "Terminal",
                      "value": "8"
                    },
                    {
                      "type": "Terminal",
                      "value": "9"
                    }
                  ]
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "IntValue",
                "params": null
              },
              "defType": 2,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "NonTerminal",
                    "name": "IntegerPart",
                    "params": null
                  },
                  {
                    "type": "Lookahead",
                    "not": true,
                    "nt": false,
                    "set": [
                      {
                        "type": "NonTerminal",
                        "name": "Digit",
                        "params": null
                      },
                      {
                        "type": "Terminal",
                        "value": "."
                      },
                      {
                        "type": "NonTerminal",
                        "name": "NameStart",
                        "params": null
                      }
                    ]
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "IntegerPart",
                "params": null
              },
              "defType": 2,
              "rhs": {
                "type": "ListRHS",
                "defs": [
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Quantified",
                        "token": {
                          "type": "NonTerminal",
                          "name": "NegativeSign",
                          "params": null
                        },
                        "isList": false,
                        "isOptional": true
                      },
                      {
                        "type": "Terminal",
                        "value": "0"
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Quantified",
                        "token": {
                          "type": "NonTerminal",
                          "name": "NegativeSign",
                          "params": null
                        },
                        "isList": false,
                        "isOptional": true
                      },
                      {
                        "type": "NonTerminal",
                        "name": "NonZeroDigit",
                        "params": null
                      },
                      {
                        "type": "Quantified",
                        "token": {
                          "type": "NonTerminal",
                          "name": "Digit",
                          "params": null
                        },
                        "isList": true,
                        "isOptional": true
                      }
                    ]
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "NegativeSign",
                "params": null
              },
              "defType": 2,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "Terminal",
                    "value": "-"
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "NonZeroDigit",
                "params": null
              },
              "defType": 2,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "Constrained",
                    "token": {
                      "type": "NonTerminal",
                      "name": "Digit",
                      "params": null
                    },
                    "constraint": {
                      "type": "ButNot",
                      "tokens": [
                        {
                          "type": "Terminal",
                          "value": "0"
                        }
                      ]
                    }
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "FloatValue",
                "params": null
              },
              "defType": 2,
              "rhs": {
                "type": "ListRHS",
                "defs": [
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "IntegerPart",
                        "params": null
                      },
                      {
                        "type": "NonTerminal",
                        "name": "FractionalPart",
                        "params": null
                      },
                      {
                        "type": "NonTerminal",
                        "name": "ExponentPart",
                        "params": null
                      },
                      {
                        "type": "Lookahead",
                        "not": true,
                        "nt": false,
                        "set": [
                          {
                            "type": "NonTerminal",
                            "name": "Digit",
                            "params": null
                          },
                          {
                            "type": "Terminal",
                            "value": "."
                          },
                          {
                            "type": "NonTerminal",
                            "name": "NameStart",
                            "params": null
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "IntegerPart",
                        "params": null
                      },
                      {
                        "type": "NonTerminal",
                        "name": "FractionalPart",
                        "params": null
                      },
                      {
                        "type": "Lookahead",
                        "not": true,
                        "nt": false,
                        "set": [
                          {
                            "type": "NonTerminal",
                            "name": "Digit",
                            "params": null
                          },
                          {
                            "type": "Terminal",
                            "value": "."
                          },
                          {
                            "type": "NonTerminal",
                            "name": "NameStart",
                            "params": null
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "IntegerPart",
                        "params": null
                      },
                      {
                        "type": "NonTerminal",
                        "name": "ExponentPart",
                        "params": null
                      },
                      {
                        "type": "Lookahead",
                        "not": true,
                        "nt": false,
                        "set": [
                          {
                            "type": "NonTerminal",
                            "name": "Digit",
                            "params": null
                          },
                          {
                            "type": "Terminal",
                            "value": "."
                          },
                          {
                            "type": "NonTerminal",
                            "name": "NameStart",
                            "params": null
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "FractionalPart",
                "params": null
              },
              "defType": 2,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "Terminal",
                    "value": "."
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "Digit",
                      "params": null
                    },
                    "isList": true,
                    "isOptional": false
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "ExponentPart",
                "params": null
              },
              "defType": 2,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "NonTerminal",
                    "name": "ExponentIndicator",
                    "params": null
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "Sign",
                      "params": null
                    },
                    "isList": false,
                    "isOptional": true
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "Digit",
                      "params": null
                    },
                    "isList": true,
                    "isOptional": false
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "ExponentIndicator",
                "params": null
              },
              "defType": 2,
              "rhs": {
                "type": "OneOfRHS",
                "rows": [
                  [
                    {
                      "type": "Terminal",
                      "value": "e"
                    },
                    {
                      "type": "Terminal",
                      "value": "E"
                    }
                  ]
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "Sign",
                "params": null
              },
              "defType": 2,
              "rhs": {
                "type": "OneOfRHS",
                "rows": [
                  [
                    {
                      "type": "Terminal",
                      "value": "+"
                    },
                    {
                      "type": "Terminal",
                      "value": "-"
                    }
                  ]
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "StringValue",
                "params": null
              },
              "defType": 2,
              "rhs": {
                "type": "ListRHS",
                "defs": [
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Terminal",
                        "value": "\"\""
                      },
                      {
                        "type": "Lookahead",
                        "not": true,
                        "nt": false,
                        "set": [
                          {
                            "type": "Terminal",
                            "value": "\""
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Terminal",
                        "value": "\""
                      },
                      {
                        "type": "Quantified",
                        "token": {
                          "type": "NonTerminal",
                          "name": "StringCharacter",
                          "params": null
                        },
                        "isList": true,
                        "isOptional": false
                      },
                      {
                        "type": "Terminal",
                        "value": "\""
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Terminal",
                        "value": "\"\"\""
                      },
                      {
                        "type": "Quantified",
                        "token": {
                          "type": "NonTerminal",
                          "name": "BlockStringCharacter",
                          "params": null
                        },
                        "isList": true,
                        "isOptional": true
                      },
                      {
                        "type": "Terminal",
                        "value": "\"\"\""
                      }
                    ]
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "StringCharacter",
                "params": null
              },
              "defType": 2,
              "rhs": {
                "type": "ListRHS",
                "defs": [
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Constrained",
                        "token": {
                          "type": "NonTerminal",
                          "name": "SourceCharacter",
                          "params": null
                        },
                        "constraint": {
                          "type": "ButNot",
                          "tokens": [
                            {
                              "type": "Terminal",
                              "value": "\""
                            },
                            {
                              "type": "Terminal",
                              "value": "\\"
                            },
                            {
                              "type": "NonTerminal",
                              "name": "LineTerminator",
                              "params": null
                            }
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Terminal",
                        "value": "\\u"
                      },
                      {
                        "type": "NonTerminal",
                        "name": "EscapedUnicode",
                        "params": null
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Terminal",
                        "value": "\\"
                      },
                      {
                        "type": "NonTerminal",
                        "name": "EscapedCharacter",
                        "params": null
                      }
                    ]
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "EscapedUnicode",
                "params": null
              },
              "defType": 2,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "RegExp",
                    "value": "/[0-9A-Fa-f]{4}/"
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "EscapedCharacter",
                "params": null
              },
              "defType": 2,
              "rhs": {
                "type": "OneOfRHS",
                "rows": [
                  [
                    {
                      "type": "Terminal",
                      "value": "\""
                    },
                    {
                      "type": "Terminal",
                      "value": "\\"
                    },
                    {
                      "type": "Terminal",
                      "value": "/"
                    },
                    {
                      "type": "Terminal",
                      "value": "b"
                    },
                    {
                      "type": "Terminal",
                      "value": "f"
                    },
                    {
                      "type": "Terminal",
                      "value": "n"
                    },
                    {
                      "type": "Terminal",
                      "value": "r"
                    },
                    {
                      "type": "Terminal",
                      "value": "t"
                    }
                  ]
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "BlockStringCharacter",
                "params": null
              },
              "defType": 2,
              "rhs": {
                "type": "ListRHS",
                "defs": [
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Constrained",
                        "token": {
                          "type": "NonTerminal",
                          "name": "SourceCharacter",
                          "params": null
                        },
                        "constraint": {
                          "type": "ButNot",
                          "tokens": [
                            {
                              "type": "Terminal",
                              "value": "\"\"\""
                            },
                            {
                              "type": "Terminal",
                              "value": "\\\"\"\""
                            }
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Terminal",
                        "value": "\\\"\"\""
                      }
                    ]
                  }
                ]
              }
            },
            {
              "type": "Note",
              "contents": [
                {
                  "type": "Text",
                  "value": "Block string values are interpreted to exclude blank initial and trailing lines and uniform indentation with "
                },
                {
                  "type": "Call",
                  "name": "BlockStringValue",
                  "args": []
                },
                {
                  "type": "Text",
                  "value": "."
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "header": {
            "type": "Header",
            "level": 2,
            "secID": null,
            "title": "Document Syntax"
          },
          "contents": [
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "Document",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "Definition",
                      "params": null
                    },
                    "isList": true,
                    "isOptional": false
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "Definition",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "ListRHS",
                "defs": [
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "ExecutableDefinition",
                        "params": null
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "TypeSystemDefinition",
                        "params": null
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "TypeSystemExtension",
                        "params": null
                      }
                    ]
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "ExecutableDefinition",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "ListRHS",
                "defs": [
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "OperationDefinition",
                        "params": null
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "FragmentDefinition",
                        "params": null
                      }
                    ]
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "OperationDefinition",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "ListRHS",
                "defs": [
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "OperationType",
                        "params": null
                      },
                      {
                        "type": "Quantified",
                        "token": {
                          "type": "NonTerminal",
                          "name": "Name",
                          "params": null
                        },
                        "isList": false,
                        "isOptional": true
                      },
                      {
                        "type": "Quantified",
                        "token": {
                          "type": "NonTerminal",
                          "name": "VariableDefinitions",
                          "params": null
                        },
                        "isList": false,
                        "isOptional": true
                      },
                      {
                        "type": "Quantified",
                        "token": {
                          "type": "NonTerminal",
                          "name": "Directives",
                          "params": null
                        },
                        "isList": false,
                        "isOptional": true
                      },
                      {
                        "type": "NonTerminal",
                        "name": "SelectionSet",
                        "params": null
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "SelectionSet",
                        "params": null
                      }
                    ]
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "OperationType",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "OneOfRHS",
                "rows": [
                  [
                    {
                      "type": "Terminal",
                      "value": "query"
                    },
                    {
                      "type": "Terminal",
                      "value": "mutation"
                    },
                    {
                      "type": "Terminal",
                      "value": "subscription"
                    }
                  ]
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "SelectionSet",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "Terminal",
                    "value": "{"
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "Selection",
                      "params": null
                    },
                    "isList": true,
                    "isOptional": false
                  },
                  {
                    "type": "Terminal",
                    "value": "}"
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "Selection",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "ListRHS",
                "defs": [
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "Field",
                        "params": null
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "FragmentSpread",
                        "params": null
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "InlineFragment",
                        "params": null
                      }
                    ]
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "Field",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "Alias",
                      "params": null
                    },
                    "isList": false,
                    "isOptional": true
                  },
                  {
                    "type": "NonTerminal",
                    "name": "Name",
                    "params": null
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "Arguments",
                      "params": null
                    },
                    "isList": false,
                    "isOptional": true
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "Directives",
                      "params": null
                    },
                    "isList": false,
                    "isOptional": true
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "SelectionSet",
                      "params": null
                    },
                    "isList": false,
                    "isOptional": true
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "Alias",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "NonTerminal",
                    "name": "Name",
                    "params": null
                  },
                  {
                    "type": "Terminal",
                    "value": ":"
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "Arguments",
                "params": [
                  {
                    "type": "NonTerminalParam",
                    "conditional": false,
                    "negated": false,
                    "name": "Const"
                  }
                ]
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "Terminal",
                    "value": "("
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "Argument",
                      "params": [
                        {
                          "type": "NonTerminalParam",
                          "conditional": true,
                          "negated": false,
                          "name": "Const"
                        }
                      ]
                    },
                    "isList": true,
                    "isOptional": false
                  },
                  {
                    "type": "Terminal",
                    "value": ")"
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "Argument",
                "params": [
                  {
                    "type": "NonTerminalParam",
                    "conditional": false,
                    "negated": false,
                    "name": "Const"
                  }
                ]
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "NonTerminal",
                    "name": "Name",
                    "params": null
                  },
                  {
                    "type": "Terminal",
                    "value": ":"
                  },
                  {
                    "type": "NonTerminal",
                    "name": "Value",
                    "params": [
                      {
                        "type": "NonTerminalParam",
                        "conditional": true,
                        "negated": false,
                        "name": "Const"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "FragmentSpread",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "Terminal",
                    "value": "..."
                  },
                  {
                    "type": "NonTerminal",
                    "name": "FragmentName",
                    "params": null
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "Directives",
                      "params": null
                    },
                    "isList": false,
                    "isOptional": true
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "InlineFragment",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "Terminal",
                    "value": "..."
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "TypeCondition",
                      "params": null
                    },
                    "isList": false,
                    "isOptional": true
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "Directives",
                      "params": null
                    },
                    "isList": false,
                    "isOptional": true
                  },
                  {
                    "type": "NonTerminal",
                    "name": "SelectionSet",
                    "params": null
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "FragmentDefinition",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "Terminal",
                    "value": "fragment"
                  },
                  {
                    "type": "NonTerminal",
                    "name": "FragmentName",
                    "params": null
                  },
                  {
                    "type": "NonTerminal",
                    "name": "TypeCondition",
                    "params": null
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "Directives",
                      "params": null
                    },
                    "isList": false,
                    "isOptional": true
                  },
                  {
                    "type": "NonTerminal",
                    "name": "SelectionSet",
                    "params": null
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "FragmentName",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "Constrained",
                    "token": {
                      "type": "NonTerminal",
                      "name": "Name",
                      "params": null
                    },
                    "constraint": {
                      "type": "ButNot",
                      "tokens": [
                        {
                          "type": "Terminal",
                          "value": "on"
                        }
                      ]
                    }
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "TypeCondition",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "Terminal",
                    "value": "on"
                  },
                  {
                    "type": "NonTerminal",
                    "name": "NamedType",
                    "params": null
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "Value",
                "params": [
                  {
                    "type": "NonTerminalParam",
                    "conditional": false,
                    "negated": false,
                    "name": "Const"
                  }
                ]
              },
              "defType": 1,
              "rhs": {
                "type": "ListRHS",
                "defs": [
                  {
                    "type": "RHS",
                    "condition": {
                      "type": "Condition",
                      "param": "Const",
                      "not": true
                    },
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "Variable",
                        "params": null
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "IntValue",
                        "params": null
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "FloatValue",
                        "params": null
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "StringValue",
                        "params": null
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "BooleanValue",
                        "params": null
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "NullValue",
                        "params": null
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "EnumValue",
                        "params": null
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "ListValue",
                        "params": [
                          {
                            "type": "NonTerminalParam",
                            "conditional": true,
                            "negated": false,
                            "name": "Const"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "ObjectValue",
                        "params": [
                          {
                            "type": "NonTerminalParam",
                            "conditional": true,
                            "negated": false,
                            "name": "Const"
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "BooleanValue",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "OneOfRHS",
                "rows": [
                  [
                    {
                      "type": "Terminal",
                      "value": "true"
                    },
                    {
                      "type": "Terminal",
                      "value": "false"
                    }
                  ]
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "NullValue",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "Terminal",
                    "value": "null"
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "EnumValue",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "Constrained",
                    "token": {
                      "type": "NonTerminal",
                      "name": "Name",
                      "params": null
                    },
                    "constraint": {
                      "type": "ButNot",
                      "tokens": [
                        {
                          "type": "Terminal",
                          "value": "true"
                        },
                        {
                          "type": "Terminal",
                          "value": "false"
                        },
                        {
                          "type": "Terminal",
                          "value": "null"
                        }
                      ]
                    }
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "ListValue",
                "params": [
                  {
                    "type": "NonTerminalParam",
                    "conditional": false,
                    "negated": false,
                    "name": "Const"
                  }
                ]
              },
              "defType": 1,
              "rhs": {
                "type": "ListRHS",
                "defs": [
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Terminal",
                        "value": "["
                      },
                      {
                        "type": "Terminal",
                        "value": "]"
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Terminal",
                        "value": "["
                      },
                      {
                        "type": "Quantified",
                        "token": {
                          "type": "NonTerminal",
                          "name": "Value",
                          "params": [
                            {
                              "type": "NonTerminalParam",
                              "conditional": true,
                              "negated": false,
                              "name": "Const"
                            }
                          ]
                        },
                        "isList": true,
                        "isOptional": false
                      },
                      {
                        "type": "Terminal",
                        "value": "]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "ObjectValue",
                "params": [
                  {
                    "type": "NonTerminalParam",
                    "conditional": false,
                    "negated": false,
                    "name": "Const"
                  }
                ]
              },
              "defType": 1,
              "rhs": {
                "type": "ListRHS",
                "defs": [
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Terminal",
                        "value": "{"
                      },
                      {
                        "type": "Terminal",
                        "value": "}"
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Terminal",
                        "value": "{"
                      },
                      {
                        "type": "Quantified",
                        "token": {
                          "type": "NonTerminal",
                          "name": "ObjectField",
                          "params": [
                            {
                              "type": "NonTerminalParam",
                              "conditional": true,
                              "negated": false,
                              "name": "Const"
                            }
                          ]
                        },
                        "isList": true,
                        "isOptional": false
                      },
                      {
                        "type": "Terminal",
                        "value": "}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "ObjectField",
                "params": [
                  {
                    "type": "NonTerminalParam",
                    "conditional": false,
                    "negated": false,
                    "name": "Const"
                  }
                ]
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "NonTerminal",
                    "name": "Name",
                    "params": null
                  },
                  {
                    "type": "Terminal",
                    "value": ":"
                  },
                  {
                    "type": "NonTerminal",
                    "name": "Value",
                    "params": [
                      {
                        "type": "NonTerminalParam",
                        "conditional": true,
                        "negated": false,
                        "name": "Const"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "VariableDefinitions",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "Terminal",
                    "value": "("
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "VariableDefinition",
                      "params": null
                    },
                    "isList": true,
                    "isOptional": false
                  },
                  {
                    "type": "Terminal",
                    "value": ")"
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "VariableDefinition",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "NonTerminal",
                    "name": "Variable",
                    "params": null
                  },
                  {
                    "type": "Terminal",
                    "value": ":"
                  },
                  {
                    "type": "NonTerminal",
                    "name": "Type",
                    "params": null
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "DefaultValue",
                      "params": null
                    },
                    "isList": false,
                    "isOptional": true
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "Directives",
                      "params": [
                        {
                          "type": "NonTerminalParam",
                          "conditional": false,
                          "negated": false,
                          "name": "Const"
                        }
                      ]
                    },
                    "isList": false,
                    "isOptional": true
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "Variable",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "Terminal",
                    "value": "$"
                  },
                  {
                    "type": "NonTerminal",
                    "name": "Name",
                    "params": null
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "DefaultValue",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "Terminal",
                    "value": "="
                  },
                  {
                    "type": "NonTerminal",
                    "name": "Value",
                    "params": [
                      {
                        "type": "NonTerminalParam",
                        "conditional": false,
                        "negated": false,
                        "name": "Const"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "Type",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "ListRHS",
                "defs": [
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "NamedType",
                        "params": null
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "ListType",
                        "params": null
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "NonNullType",
                        "params": null
                      }
                    ]
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "NamedType",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "NonTerminal",
                    "name": "Name",
                    "params": null
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "ListType",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "Terminal",
                    "value": "["
                  },
                  {
                    "type": "NonTerminal",
                    "name": "Type",
                    "params": null
                  },
                  {
                    "type": "Terminal",
                    "value": "]"
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "NonNullType",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "ListRHS",
                "defs": [
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "NamedType",
                        "params": null
                      },
                      {
                        "type": "Terminal",
                        "value": "!"
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "ListType",
                        "params": null
                      },
                      {
                        "type": "Terminal",
                        "value": "!"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "Directives",
                "params": [
                  {
                    "type": "NonTerminalParam",
                    "conditional": false,
                    "negated": false,
                    "name": "Const"
                  }
                ]
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "Directive",
                      "params": [
                        {
                          "type": "NonTerminalParam",
                          "conditional": true,
                          "negated": false,
                          "name": "Const"
                        }
                      ]
                    },
                    "isList": true,
                    "isOptional": false
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "Directive",
                "params": [
                  {
                    "type": "NonTerminalParam",
                    "conditional": false,
                    "negated": false,
                    "name": "Const"
                  }
                ]
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "Terminal",
                    "value": "@"
                  },
                  {
                    "type": "NonTerminal",
                    "name": "Name",
                    "params": null
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "Arguments",
                      "params": [
                        {
                          "type": "NonTerminalParam",
                          "conditional": true,
                          "negated": false,
                          "name": "Const"
                        }
                      ]
                    },
                    "isList": false,
                    "isOptional": true
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "TypeSystemDefinition",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "ListRHS",
                "defs": [
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "SchemaDefinition",
                        "params": null
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "TypeDefinition",
                        "params": null
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "DirectiveDefinition",
                        "params": null
                      }
                    ]
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "TypeSystemExtension",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "ListRHS",
                "defs": [
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "SchemaExtension",
                        "params": null
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "TypeExtension",
                        "params": null
                      }
                    ]
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "SchemaDefinition",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "Description",
                      "params": null
                    },
                    "isList": false,
                    "isOptional": true
                  },
                  {
                    "type": "Terminal",
                    "value": "schema"
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "Directives",
                      "params": [
                        {
                          "type": "NonTerminalParam",
                          "conditional": false,
                          "negated": false,
                          "name": "Const"
                        }
                      ]
                    },
                    "isList": false,
                    "isOptional": true
                  },
                  {
                    "type": "Terminal",
                    "value": "{"
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "RootOperationTypeDefinition",
                      "params": null
                    },
                    "isList": true,
                    "isOptional": false
                  },
                  {
                    "type": "Terminal",
                    "value": "}"
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "SchemaExtension",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "ListRHS",
                "defs": [
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Terminal",
                        "value": "extend"
                      },
                      {
                        "type": "Terminal",
                        "value": "schema"
                      },
                      {
                        "type": "Quantified",
                        "token": {
                          "type": "NonTerminal",
                          "name": "Directives",
                          "params": [
                            {
                              "type": "NonTerminalParam",
                              "conditional": false,
                              "negated": false,
                              "name": "Const"
                            }
                          ]
                        },
                        "isList": false,
                        "isOptional": true
                      },
                      {
                        "type": "Terminal",
                        "value": "{"
                      },
                      {
                        "type": "Quantified",
                        "token": {
                          "type": "NonTerminal",
                          "name": "RootOperationTypeDefinition",
                          "params": null
                        },
                        "isList": true,
                        "isOptional": false
                      },
                      {
                        "type": "Terminal",
                        "value": "}"
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Terminal",
                        "value": "extend"
                      },
                      {
                        "type": "Terminal",
                        "value": "schema"
                      },
                      {
                        "type": "NonTerminal",
                        "name": "Directives",
                        "params": [
                          {
                            "type": "NonTerminalParam",
                            "conditional": false,
                            "negated": false,
                            "name": "Const"
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "RootOperationTypeDefinition",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "NonTerminal",
                    "name": "OperationType",
                    "params": null
                  },
                  {
                    "type": "Terminal",
                    "value": ":"
                  },
                  {
                    "type": "NonTerminal",
                    "name": "NamedType",
                    "params": null
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "Description",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "NonTerminal",
                    "name": "StringValue",
                    "params": null
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "TypeDefinition",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "ListRHS",
                "defs": [
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "ScalarTypeDefinition",
                        "params": null
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "ObjectTypeDefinition",
                        "params": null
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "InterfaceTypeDefinition",
                        "params": null
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "UnionTypeDefinition",
                        "params": null
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "EnumTypeDefinition",
                        "params": null
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "InputObjectTypeDefinition",
                        "params": null
                      }
                    ]
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "TypeExtension",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "ListRHS",
                "defs": [
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "ScalarTypeExtension",
                        "params": null
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "ObjectTypeExtension",
                        "params": null
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "InterfaceTypeExtension",
                        "params": null
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "UnionTypeExtension",
                        "params": null
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "EnumTypeExtension",
                        "params": null
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "InputObjectTypeExtension",
                        "params": null
                      }
                    ]
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "ScalarTypeDefinition",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "Description",
                      "params": null
                    },
                    "isList": false,
                    "isOptional": true
                  },
                  {
                    "type": "Terminal",
                    "value": "scalar"
                  },
                  {
                    "type": "NonTerminal",
                    "name": "Name",
                    "params": null
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "Directives",
                      "params": [
                        {
                          "type": "NonTerminalParam",
                          "conditional": false,
                          "negated": false,
                          "name": "Const"
                        }
                      ]
                    },
                    "isList": false,
                    "isOptional": true
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "ScalarTypeExtension",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "ListRHS",
                "defs": [
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Terminal",
                        "value": "extend"
                      },
                      {
                        "type": "Terminal",
                        "value": "scalar"
                      },
                      {
                        "type": "NonTerminal",
                        "name": "Name",
                        "params": null
                      },
                      {
                        "type": "NonTerminal",
                        "name": "Directives",
                        "params": [
                          {
                            "type": "NonTerminalParam",
                            "conditional": false,
                            "negated": false,
                            "name": "Const"
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "ObjectTypeDefinition",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "Description",
                      "params": null
                    },
                    "isList": false,
                    "isOptional": true
                  },
                  {
                    "type": "Terminal",
                    "value": "type"
                  },
                  {
                    "type": "NonTerminal",
                    "name": "Name",
                    "params": null
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "ImplementsInterfaces",
                      "params": null
                    },
                    "isList": false,
                    "isOptional": true
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "Directives",
                      "params": [
                        {
                          "type": "NonTerminalParam",
                          "conditional": false,
                          "negated": false,
                          "name": "Const"
                        }
                      ]
                    },
                    "isList": false,
                    "isOptional": true
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "FieldsDefinition",
                      "params": null
                    },
                    "isList": false,
                    "isOptional": true
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "ObjectTypeExtension",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "ListRHS",
                "defs": [
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Terminal",
                        "value": "extend"
                      },
                      {
                        "type": "Terminal",
                        "value": "type"
                      },
                      {
                        "type": "NonTerminal",
                        "name": "Name",
                        "params": null
                      },
                      {
                        "type": "Quantified",
                        "token": {
                          "type": "NonTerminal",
                          "name": "ImplementsInterfaces",
                          "params": null
                        },
                        "isList": false,
                        "isOptional": true
                      },
                      {
                        "type": "Quantified",
                        "token": {
                          "type": "NonTerminal",
                          "name": "Directives",
                          "params": [
                            {
                              "type": "NonTerminalParam",
                              "conditional": false,
                              "negated": false,
                              "name": "Const"
                            }
                          ]
                        },
                        "isList": false,
                        "isOptional": true
                      },
                      {
                        "type": "NonTerminal",
                        "name": "FieldsDefinition",
                        "params": null
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Terminal",
                        "value": "extend"
                      },
                      {
                        "type": "Terminal",
                        "value": "type"
                      },
                      {
                        "type": "NonTerminal",
                        "name": "Name",
                        "params": null
                      },
                      {
                        "type": "Quantified",
                        "token": {
                          "type": "NonTerminal",
                          "name": "ImplementsInterfaces",
                          "params": null
                        },
                        "isList": false,
                        "isOptional": true
                      },
                      {
                        "type": "NonTerminal",
                        "name": "Directives",
                        "params": [
                          {
                            "type": "NonTerminalParam",
                            "conditional": false,
                            "negated": false,
                            "name": "Const"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Terminal",
                        "value": "extend"
                      },
                      {
                        "type": "Terminal",
                        "value": "type"
                      },
                      {
                        "type": "NonTerminal",
                        "name": "Name",
                        "params": null
                      },
                      {
                        "type": "NonTerminal",
                        "name": "ImplementsInterfaces",
                        "params": null
                      }
                    ]
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "ImplementsInterfaces",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "ListRHS",
                "defs": [
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "ImplementsInterfaces",
                        "params": null
                      },
                      {
                        "type": "Terminal",
                        "value": "&"
                      },
                      {
                        "type": "NonTerminal",
                        "name": "NamedType",
                        "params": null
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Terminal",
                        "value": "implements"
                      },
                      {
                        "type": "Quantified",
                        "token": {
                          "type": "Terminal",
                          "value": "&"
                        },
                        "isList": false,
                        "isOptional": true
                      },
                      {
                        "type": "NonTerminal",
                        "name": "NamedType",
                        "params": null
                      }
                    ]
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "FieldsDefinition",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "Terminal",
                    "value": "{"
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "FieldDefinition",
                      "params": null
                    },
                    "isList": true,
                    "isOptional": false
                  },
                  {
                    "type": "Terminal",
                    "value": "}"
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "FieldDefinition",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "Description",
                      "params": null
                    },
                    "isList": false,
                    "isOptional": true
                  },
                  {
                    "type": "NonTerminal",
                    "name": "Name",
                    "params": null
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "ArgumentsDefinition",
                      "params": null
                    },
                    "isList": false,
                    "isOptional": true
                  },
                  {
                    "type": "Terminal",
                    "value": ":"
                  },
                  {
                    "type": "NonTerminal",
                    "name": "Type",
                    "params": null
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "Directives",
                      "params": [
                        {
                          "type": "NonTerminalParam",
                          "conditional": false,
                          "negated": false,
                          "name": "Const"
                        }
                      ]
                    },
                    "isList": false,
                    "isOptional": true
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "ArgumentsDefinition",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "Terminal",
                    "value": "("
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "InputValueDefinition",
                      "params": null
                    },
                    "isList": true,
                    "isOptional": false
                  },
                  {
                    "type": "Terminal",
                    "value": ")"
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "InputValueDefinition",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "Description",
                      "params": null
                    },
                    "isList": false,
                    "isOptional": true
                  },
                  {
                    "type": "NonTerminal",
                    "name": "Name",
                    "params": null
                  },
                  {
                    "type": "Terminal",
                    "value": ":"
                  },
                  {
                    "type": "NonTerminal",
                    "name": "Type",
                    "params": null
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "DefaultValue",
                      "params": null
                    },
                    "isList": false,
                    "isOptional": true
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "Directives",
                      "params": [
                        {
                          "type": "NonTerminalParam",
                          "conditional": false,
                          "negated": false,
                          "name": "Const"
                        }
                      ]
                    },
                    "isList": false,
                    "isOptional": true
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "InterfaceTypeDefinition",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "Description",
                      "params": null
                    },
                    "isList": false,
                    "isOptional": true
                  },
                  {
                    "type": "Terminal",
                    "value": "interface"
                  },
                  {
                    "type": "NonTerminal",
                    "name": "Name",
                    "params": null
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "ImplementsInterfaces",
                      "params": null
                    },
                    "isList": false,
                    "isOptional": true
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "Directives",
                      "params": [
                        {
                          "type": "NonTerminalParam",
                          "conditional": false,
                          "negated": false,
                          "name": "Const"
                        }
                      ]
                    },
                    "isList": false,
                    "isOptional": true
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "FieldsDefinition",
                      "params": null
                    },
                    "isList": false,
                    "isOptional": true
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "InterfaceTypeExtension",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "ListRHS",
                "defs": [
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Terminal",
                        "value": "extend"
                      },
                      {
                        "type": "Terminal",
                        "value": "interface"
                      },
                      {
                        "type": "NonTerminal",
                        "name": "Name",
                        "params": null
                      },
                      {
                        "type": "Quantified",
                        "token": {
                          "type": "NonTerminal",
                          "name": "ImplementsInterfaces",
                          "params": null
                        },
                        "isList": false,
                        "isOptional": true
                      },
                      {
                        "type": "Quantified",
                        "token": {
                          "type": "NonTerminal",
                          "name": "Directives",
                          "params": [
                            {
                              "type": "NonTerminalParam",
                              "conditional": false,
                              "negated": false,
                              "name": "Const"
                            }
                          ]
                        },
                        "isList": false,
                        "isOptional": true
                      },
                      {
                        "type": "NonTerminal",
                        "name": "FieldsDefinition",
                        "params": null
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Terminal",
                        "value": "extend"
                      },
                      {
                        "type": "Terminal",
                        "value": "interface"
                      },
                      {
                        "type": "NonTerminal",
                        "name": "Name",
                        "params": null
                      },
                      {
                        "type": "Quantified",
                        "token": {
                          "type": "NonTerminal",
                          "name": "ImplementsInterfaces",
                          "params": null
                        },
                        "isList": false,
                        "isOptional": true
                      },
                      {
                        "type": "NonTerminal",
                        "name": "Directives",
                        "params": [
                          {
                            "type": "NonTerminalParam",
                            "conditional": false,
                            "negated": false,
                            "name": "Const"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Terminal",
                        "value": "extend"
                      },
                      {
                        "type": "Terminal",
                        "value": "interface"
                      },
                      {
                        "type": "NonTerminal",
                        "name": "Name",
                        "params": null
                      },
                      {
                        "type": "NonTerminal",
                        "name": "ImplementsInterfaces",
                        "params": null
                      }
                    ]
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "UnionTypeDefinition",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "Description",
                      "params": null
                    },
                    "isList": false,
                    "isOptional": true
                  },
                  {
                    "type": "Terminal",
                    "value": "union"
                  },
                  {
                    "type": "NonTerminal",
                    "name": "Name",
                    "params": null
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "Directives",
                      "params": [
                        {
                          "type": "NonTerminalParam",
                          "conditional": false,
                          "negated": false,
                          "name": "Const"
                        }
                      ]
                    },
                    "isList": false,
                    "isOptional": true
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "UnionMemberTypes",
                      "params": null
                    },
                    "isList": false,
                    "isOptional": true
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "UnionMemberTypes",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "ListRHS",
                "defs": [
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "UnionMemberTypes",
                        "params": null
                      },
                      {
                        "type": "Terminal",
                        "value": "|"
                      },
                      {
                        "type": "NonTerminal",
                        "name": "NamedType",
                        "params": null
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Terminal",
                        "value": "="
                      },
                      {
                        "type": "Quantified",
                        "token": {
                          "type": "Terminal",
                          "value": "|"
                        },
                        "isList": false,
                        "isOptional": true
                      },
                      {
                        "type": "NonTerminal",
                        "name": "NamedType",
                        "params": null
                      }
                    ]
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "UnionTypeExtension",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "ListRHS",
                "defs": [
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Terminal",
                        "value": "extend"
                      },
                      {
                        "type": "Terminal",
                        "value": "union"
                      },
                      {
                        "type": "NonTerminal",
                        "name": "Name",
                        "params": null
                      },
                      {
                        "type": "Quantified",
                        "token": {
                          "type": "NonTerminal",
                          "name": "Directives",
                          "params": [
                            {
                              "type": "NonTerminalParam",
                              "conditional": false,
                              "negated": false,
                              "name": "Const"
                            }
                          ]
                        },
                        "isList": false,
                        "isOptional": true
                      },
                      {
                        "type": "NonTerminal",
                        "name": "UnionMemberTypes",
                        "params": null
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Terminal",
                        "value": "extend"
                      },
                      {
                        "type": "Terminal",
                        "value": "union"
                      },
                      {
                        "type": "NonTerminal",
                        "name": "Name",
                        "params": null
                      },
                      {
                        "type": "NonTerminal",
                        "name": "Directives",
                        "params": [
                          {
                            "type": "NonTerminalParam",
                            "conditional": false,
                            "negated": false,
                            "name": "Const"
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "EnumTypeDefinition",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "Description",
                      "params": null
                    },
                    "isList": false,
                    "isOptional": true
                  },
                  {
                    "type": "Terminal",
                    "value": "enum"
                  },
                  {
                    "type": "NonTerminal",
                    "name": "Name",
                    "params": null
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "Directives",
                      "params": [
                        {
                          "type": "NonTerminalParam",
                          "conditional": false,
                          "negated": false,
                          "name": "Const"
                        }
                      ]
                    },
                    "isList": false,
                    "isOptional": true
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "EnumValuesDefinition",
                      "params": null
                    },
                    "isList": false,
                    "isOptional": true
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "EnumValuesDefinition",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "Terminal",
                    "value": "{"
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "EnumValueDefinition",
                      "params": null
                    },
                    "isList": true,
                    "isOptional": false
                  },
                  {
                    "type": "Terminal",
                    "value": "}"
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "EnumValueDefinition",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "Description",
                      "params": null
                    },
                    "isList": false,
                    "isOptional": true
                  },
                  {
                    "type": "NonTerminal",
                    "name": "EnumValue",
                    "params": null
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "Directives",
                      "params": [
                        {
                          "type": "NonTerminalParam",
                          "conditional": false,
                          "negated": false,
                          "name": "Const"
                        }
                      ]
                    },
                    "isList": false,
                    "isOptional": true
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "EnumTypeExtension",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "ListRHS",
                "defs": [
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Terminal",
                        "value": "extend"
                      },
                      {
                        "type": "Terminal",
                        "value": "enum"
                      },
                      {
                        "type": "NonTerminal",
                        "name": "Name",
                        "params": null
                      },
                      {
                        "type": "Quantified",
                        "token": {
                          "type": "NonTerminal",
                          "name": "Directives",
                          "params": [
                            {
                              "type": "NonTerminalParam",
                              "conditional": false,
                              "negated": false,
                              "name": "Const"
                            }
                          ]
                        },
                        "isList": false,
                        "isOptional": true
                      },
                      {
                        "type": "NonTerminal",
                        "name": "EnumValuesDefinition",
                        "params": null
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Terminal",
                        "value": "extend"
                      },
                      {
                        "type": "Terminal",
                        "value": "enum"
                      },
                      {
                        "type": "NonTerminal",
                        "name": "Name",
                        "params": null
                      },
                      {
                        "type": "NonTerminal",
                        "name": "Directives",
                        "params": [
                          {
                            "type": "NonTerminalParam",
                            "conditional": false,
                            "negated": false,
                            "name": "Const"
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "InputObjectTypeDefinition",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "Description",
                      "params": null
                    },
                    "isList": false,
                    "isOptional": true
                  },
                  {
                    "type": "Terminal",
                    "value": "input"
                  },
                  {
                    "type": "NonTerminal",
                    "name": "Name",
                    "params": null
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "Directives",
                      "params": [
                        {
                          "type": "NonTerminalParam",
                          "conditional": false,
                          "negated": false,
                          "name": "Const"
                        }
                      ]
                    },
                    "isList": false,
                    "isOptional": true
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "InputFieldsDefinition",
                      "params": null
                    },
                    "isList": false,
                    "isOptional": true
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "InputFieldsDefinition",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "Terminal",
                    "value": "{"
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "InputValueDefinition",
                      "params": null
                    },
                    "isList": true,
                    "isOptional": false
                  },
                  {
                    "type": "Terminal",
                    "value": "}"
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "InputObjectTypeExtension",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "ListRHS",
                "defs": [
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Terminal",
                        "value": "extend"
                      },
                      {
                        "type": "Terminal",
                        "value": "input"
                      },
                      {
                        "type": "NonTerminal",
                        "name": "Name",
                        "params": null
                      },
                      {
                        "type": "Quantified",
                        "token": {
                          "type": "NonTerminal",
                          "name": "Directives",
                          "params": [
                            {
                              "type": "NonTerminalParam",
                              "conditional": false,
                              "negated": false,
                              "name": "Const"
                            }
                          ]
                        },
                        "isList": false,
                        "isOptional": true
                      },
                      {
                        "type": "NonTerminal",
                        "name": "InputFieldsDefinition",
                        "params": null
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Terminal",
                        "value": "extend"
                      },
                      {
                        "type": "Terminal",
                        "value": "input"
                      },
                      {
                        "type": "NonTerminal",
                        "name": "Name",
                        "params": null
                      },
                      {
                        "type": "NonTerminal",
                        "name": "Directives",
                        "params": [
                          {
                            "type": "NonTerminalParam",
                            "conditional": false,
                            "negated": false,
                            "name": "Const"
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "DirectiveDefinition",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "RHS",
                "condition": null,
                "tokens": [
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "Description",
                      "params": null
                    },
                    "isList": false,
                    "isOptional": true
                  },
                  {
                    "type": "Terminal",
                    "value": "directive"
                  },
                  {
                    "type": "Terminal",
                    "value": "@"
                  },
                  {
                    "type": "NonTerminal",
                    "name": "Name",
                    "params": null
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "NonTerminal",
                      "name": "ArgumentsDefinition",
                      "params": null
                    },
                    "isList": false,
                    "isOptional": true
                  },
                  {
                    "type": "Quantified",
                    "token": {
                      "type": "Terminal",
                      "value": "repeatable"
                    },
                    "isList": false,
                    "isOptional": true
                  },
                  {
                    "type": "Terminal",
                    "value": "on"
                  },
                  {
                    "type": "NonTerminal",
                    "name": "DirectiveLocations",
                    "params": null
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "DirectiveLocations",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "ListRHS",
                "defs": [
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "DirectiveLocations",
                        "params": null
                      },
                      {
                        "type": "Terminal",
                        "value": "|"
                      },
                      {
                        "type": "NonTerminal",
                        "name": "DirectiveLocation",
                        "params": null
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "Quantified",
                        "token": {
                          "type": "Terminal",
                          "value": "|"
                        },
                        "isList": false,
                        "isOptional": true
                      },
                      {
                        "type": "NonTerminal",
                        "name": "DirectiveLocation",
                        "params": null
                      }
                    ]
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "DirectiveLocation",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "ListRHS",
                "defs": [
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "ExecutableDirectiveLocation",
                        "params": null
                      }
                    ]
                  },
                  {
                    "type": "RHS",
                    "condition": null,
                    "tokens": [
                      {
                        "type": "NonTerminal",
                        "name": "TypeSystemDirectiveLocation",
                        "params": null
                      }
                    ]
                  }
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "ExecutableDirectiveLocation",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "OneOfRHS",
                "rows": [
                  [
                    {
                      "type": "Terminal",
                      "value": "QUERY"
                    }
                  ],
                  [
                    {
                      "type": "Terminal",
                      "value": "MUTATION"
                    }
                  ],
                  [
                    {
                      "type": "Terminal",
                      "value": "SUBSCRIPTION"
                    }
                  ],
                  [
                    {
                      "type": "Terminal",
                      "value": "FIELD"
                    }
                  ],
                  [
                    {
                      "type": "Terminal",
                      "value": "FRAGMENT_DEFINITION"
                    }
                  ],
                  [
                    {
                      "type": "Terminal",
                      "value": "FRAGMENT_SPREAD"
                    }
                  ],
                  [
                    {
                      "type": "Terminal",
                      "value": "INLINE_FRAGMENT"
                    }
                  ],
                  [
                    {
                      "type": "Terminal",
                      "value": "VARIABLE_DEFINITION"
                    }
                  ]
                ]
              }
            },
            {
              "type": "Production",
              "token": {
                "type": "NonTerminal",
                "name": "TypeSystemDirectiveLocation",
                "params": null
              },
              "defType": 1,
              "rhs": {
                "type": "OneOfRHS",
                "rows": [
                  [
                    {
                      "type": "Terminal",
                      "value": "SCHEMA"
                    }
                  ],
                  [
                    {
                      "type": "Terminal",
                      "value": "SCALAR"
                    }
                  ],
                  [
                    {
                      "type": "Terminal",
                      "value": "OBJECT"
                    }
                  ],
                  [
                    {
                      "type": "Terminal",
                      "value": "FIELD_DEFINITION"
                    }
                  ],
                  [
                    {
                      "type": "Terminal",
                      "value": "ARGUMENT_DEFINITION"
                    }
                  ],
                  [
                    {
                      "type": "Terminal",
                      "value": "INTERFACE"
                    }
                  ],
                  [
                    {
                      "type": "Terminal",
                      "value": "UNION"
                    }
                  ],
                  [
                    {
                      "type": "Terminal",
                      "value": "ENUM"
                    }
                  ],
                  [
                    {
                      "type": "Terminal",
                      "value": "ENUM_VALUE"
                    }
                  ],
                  [
                    {
                      "type": "Terminal",
                      "value": "INPUT_OBJECT"
                    }
                  ],
                  [
                    {
                      "type": "Terminal",
                      "value": "INPUT_FIELD_DEFINITION"
                    }
                  ]
                ]
              }
            }
          ]
        }
      ]
    }
  ]
}